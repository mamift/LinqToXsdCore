//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenGis.Ows {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using www.w3.org.XML.Item1998.@namespace;
    using OpenGis.ThreeDps.Scene;
    using www.w3.org.Item1999.xlink;
    using OpenGis.ThreeDps.Core;
    
    
    public abstract partial class AbstractMetaData : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AbstractMetaData(XElement xe) {  return (AbstractMetaData)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AbstractMetaData() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AbstractMetaData Load(string xmlFile) {
            return ((AbstractMetaData)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AbstractMetaData Load(System.IO.TextReader xmlFile) {
            return ((AbstractMetaData)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AbstractMetaData Parse(string xml) {
            return ((AbstractMetaData)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
    /// </para>
    /// </summary>
    public partial class ServiceIdentification : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstractXName = System.Xml.Linq.XName.Get("Abstract", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Abstract> AbstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeywordsXName = System.Xml.Linq.XName.Get("Keywords", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Keywords> KeywordsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceTypeXName = System.Xml.Linq.XName.Get("ServiceType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceTypeVersionXName = System.Xml.Linq.XName.Get("ServiceTypeVersion", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ServiceTypeVersionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfileXName = System.Xml.Linq.XName.Get("Profile", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> ProfileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeesXName = System.Xml.Linq.XName.Get("Fees", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AccessConstraintsXName = System.Xml.Linq.XName.Get("AccessConstraints", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<AccessConstraints> AccessConstraintsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceIdentification", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceIdentification(XElement xe) { return XTypedServices.ToXTypedElement<ServiceIdentification>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceIdentification() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(ServiceTypeXName), new NamedContentModelEntity(ServiceTypeVersionXName), new NamedContentModelEntity(ProfileXName), new NamedContentModelEntity(FeesXName), new NamedContentModelEntity(AccessConstraintsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public ServiceIdentification() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, TitleXName);
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, TitleXName);
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<Abstract> Abstract {
            get {
                if ((this.AbstractField == null)) {
                    this.AbstractField = new XTypedList<Abstract>(this, LinqToXsdTypeManager.Instance, AbstractXName);
                }
                return this.AbstractField;
            }
            set {
                if ((value == null)) {
                    this.AbstractField = null;
                }
                else {
                    if ((this.AbstractField == null)) {
                        this.AbstractField = XTypedList<Abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, AbstractXName);
                    }
                    else {
                        XTypedServices.SetList<Abstract>(this.AbstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<Keywords>(this, LinqToXsdTypeManager.Instance, KeywordsXName);
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, KeywordsXName);
                    }
                    else {
                        XTypedServices.SetList<Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A service type name from a registry of
        ///                services. For example, the values of the codeSpace URI and
        ///                name and code string may be "OGC" and "catalogue." This type
        ///                name is normally used for machine-to-machine
        ///                communication.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual CodeType ServiceType {
            get {
                XElement x = this.GetElement(ServiceTypeXName);
                return ((CodeType)(x));
            }
            set {
                this.SetElement(ServiceTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more versions of this
        ///                service type implemented by this server. This information is
        ///                not adequate for version negotiation, and shall not be used
        ///                for that purpose.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<string> ServiceTypeVersion {
            get {
                if ((this.ServiceTypeVersionField == null)) {
                    this.ServiceTypeVersionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ServiceTypeVersionXName);
                }
                return this.ServiceTypeVersionField;
            }
            set {
                if ((value == null)) {
                    this.ServiceTypeVersionField = null;
                }
                else {
                    if ((this.ServiceTypeVersionField == null)) {
                        this.ServiceTypeVersionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ServiceTypeVersionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ServiceTypeVersionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of identifiers of Application
        ///                Profiles that are implemented by this server. This element
        ///                should be included for each specified application profile
        ///                implemented by this server. The identifier value should be
        ///                specified by each Application Profile. If this element is
        ///                omitted, no meaning is implied.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> Profile {
            get {
                if ((this.ProfileField == null)) {
                    this.ProfileField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, ProfileXName);
                }
                return this.ProfileField;
            }
            set {
                if ((value == null)) {
                    this.ProfileField = null;
                }
                else {
                    if ((this.ProfileField == null)) {
                        this.ProfileField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, ProfileXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.ProfileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// If this element is omitted, no meaning is
        ///                implied.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual Fees Fees {
            get {
                XElement x = this.GetElement(FeesXName);
                return ((Fees)(x));
            }
            set {
                this.SetElement(FeesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of access constraints applied to
        ///                assure the protection of privacy or intellectual property, and
        ///                any other restrictions on retrieving or using data from or
        ///                otherwise using this server. The reserved value NONE (case
        ///                insensitive) shall be used to mean no access constraints are
        ///                imposed. When this element is omitted, no meaning is
        ///                implied.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, ServiceType, ServiceTypeVersion+, Profile*, Fees?, AccessConstraints*)
        /// </para>
        /// </summary>
        public virtual IList<AccessConstraints> AccessConstraints {
            get {
                if ((this.AccessConstraintsField == null)) {
                    this.AccessConstraintsField = new XSimpleList<AccessConstraints>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AccessConstraintsXName);
                }
                return this.AccessConstraintsField;
            }
            set {
                if ((value == null)) {
                    this.AccessConstraintsField = null;
                }
                else {
                    if ((this.AccessConstraintsField == null)) {
                        this.AccessConstraintsField = XSimpleList<AccessConstraints>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AccessConstraintsXName);
                    }
                    else {
                        XTypedServices.SetList<AccessConstraints>(this.AccessConstraintsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ServiceIdentification Load(string xmlFile) {
            return XTypedServices.Load<ServiceIdentification>(xmlFile);
        }
        
        public static ServiceIdentification Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ServiceIdentification>(xmlFile);
        }
        
        public static ServiceIdentification Parse(string xml) {
            return XTypedServices.Parse<ServiceIdentification>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceIdentification>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(ServiceTypeXName, typeof(CodeType));
            localElementDictionary.Add(ServiceTypeVersionXName, typeof(string));
            localElementDictionary.Add(ProfileXName, typeof(System.Uri));
            localElementDictionary.Add(FeesXName, typeof(Fees));
            localElementDictionary.Add(AccessConstraintsXName, typeof(AccessConstraints));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ProviderName, ProviderSite?, ServiceContact)
    /// </para>
    /// </summary>
    public partial class ServiceProvider : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderNameXName = System.Xml.Linq.XName.Get("ProviderName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderSiteXName = System.Xml.Linq.XName.Get("ProviderSite", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceContactXName = System.Xml.Linq.XName.Get("ServiceContact", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceProvider", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceProvider(XElement xe) { return XTypedServices.ToXTypedElement<ServiceProvider>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceProvider() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProviderNameXName), new NamedContentModelEntity(ProviderSiteXName), new NamedContentModelEntity(ServiceContactXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ProviderName, ProviderSite?, ServiceContact)
        /// </para>
        /// </summary>
        public ServiceProvider() {
        }
        
        /// <summary>
        /// <para>
        /// A unique identifier for the service provider
        ///            organization.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProviderName, ProviderSite?, ServiceContact)
        /// </para>
        /// </summary>
        public virtual string ProviderName {
            get {
                XElement x = this.GetElement(ProviderNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ProviderNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to the most relevant web site of the
        ///            service provider.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ProviderName, ProviderSite?, ServiceContact)
        /// </para>
        /// </summary>
        public virtual OnlineResourceType ProviderSite {
            get {
                XElement x = this.GetElement(ProviderSiteXName);
                return ((OnlineResourceType)(x));
            }
            set {
                this.SetElement(ProviderSiteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Information for contacting the service provider.
        ///            The OnlineResource element within this ServiceContact element
        ///            should not be used to reference a web site of the service
        ///            provider.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ProviderName, ProviderSite?, ServiceContact)
        /// </para>
        /// </summary>
        public virtual ResponsiblePartySubsetType ServiceContact {
            get {
                XElement x = this.GetElement(ServiceContactXName);
                return ((ResponsiblePartySubsetType)(x));
            }
            set {
                this.SetElement(ServiceContactXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ServiceProvider Load(string xmlFile) {
            return XTypedServices.Load<ServiceProvider>(xmlFile);
        }
        
        public static ServiceProvider Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ServiceProvider>(xmlFile);
        }
        
        public static ServiceProvider Parse(string xml) {
            return XTypedServices.Parse<ServiceProvider>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceProvider>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProviderNameXName, typeof(string));
            localElementDictionary.Add(ProviderSiteXName, typeof(OnlineResourceType));
            localElementDictionary.Add(ServiceContactXName, typeof(ResponsiblePartySubsetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class AnyValue : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnyValue", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AnyValue(XElement xe) { return XTypedServices.ToXTypedElement<AnyValue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AnyValue() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AnyValue Load(string xmlFile) {
            return XTypedServices.Load<AnyValue>(xmlFile);
        }
        
        public static AnyValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AnyValue>(xmlFile);
        }
        
        public static AnyValue Parse(string xml) {
            return XTypedServices.Parse<AnyValue>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnyValue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NoValues : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NoValues", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator NoValues(XElement xe) { return XTypedServices.ToXTypedElement<NoValues>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NoValues() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NoValues Load(string xmlFile) {
            return XTypedServices.Load<NoValues>(xmlFile);
        }
        
        public static NoValues Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NoValues>(xmlFile);
        }
        
        public static NoValues Parse(string xml) {
            return XTypedServices.Parse<NoValues>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NoValues>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ValuesReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName referenceXName = System.Xml.Linq.XName.Get("reference", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValuesReference", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ValuesReference(XElement xe) { return XTypedServices.ToXTypedElement<ValuesReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ValuesReference() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                XAttribute x = this.Attribute(referenceXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(referenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ValuesReference Load(string xmlFile) {
            return XTypedServices.Load<ValuesReference>(xmlFile);
        }
        
        public static ValuesReference Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ValuesReference>(xmlFile);
        }
        
        public static ValuesReference Parse(string xml) {
            return XTypedServices.Parse<ValuesReference>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValuesReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value | Range)+
    /// </para>
    /// </summary>
    public partial class AllowedValues : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Value> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RangeXName = System.Xml.Linq.XName.Get("Range", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Range> RangeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AllowedValues", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AllowedValues(XElement xe) { return XTypedServices.ToXTypedElement<AllowedValues>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AllowedValues() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(RangeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value | Range)+
        /// </para>
        /// </summary>
        public AllowedValues() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Value | Range)+
        /// </para>
        /// </summary>
        public virtual IList<Value> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<Value>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<Value>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<Value>(this.ValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Value | Range)+
        /// </para>
        /// </summary>
        public virtual IList<Range> Range {
            get {
                if ((this.RangeField == null)) {
                    this.RangeField = new XTypedList<Range>(this, LinqToXsdTypeManager.Instance, RangeXName);
                }
                return this.RangeField;
            }
            set {
                if ((value == null)) {
                    this.RangeField = null;
                }
                else {
                    if ((this.RangeField == null)) {
                        this.RangeField = XTypedList<Range>.Initialize(this, LinqToXsdTypeManager.Instance, value, RangeXName);
                    }
                    else {
                        XTypedServices.SetList<Range>(this.RangeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AllowedValues Load(string xmlFile) {
            return XTypedServices.Load<AllowedValues>(xmlFile);
        }
        
        public static AllowedValues Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AllowedValues>(xmlFile);
        }
        
        public static AllowedValues Parse(string xml) {
            return XTypedServices.Parse<AllowedValues>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AllowedValues>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ValueXName, typeof(Value));
            localElementDictionary.Add(RangeXName, typeof(Range));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
    /// </para>
    /// </summary>
    public partial class OperationsMetadata : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperationXName = System.Xml.Linq.XName.Get("Operation", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Operation> OperationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DomainType> ParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConstraintXName = System.Xml.Linq.XName.Get("Constraint", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DomainType> ConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedCapabilitiesXName = System.Xml.Linq.XName.Get("ExtendedCapabilities", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OperationsMetadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OperationsMetadata(XElement xe) { return XTypedServices.ToXTypedElement<OperationsMetadata>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OperationsMetadata() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OperationXName), new NamedContentModelEntity(ParameterXName), new NamedContentModelEntity(ConstraintXName), new NamedContentModelEntity(ExtendedCapabilitiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
        /// </para>
        /// </summary>
        public OperationsMetadata() {
        }
        
        /// <summary>
        /// <para>
        /// Metadata for unordered list of all the (requests
        ///            for) operations that this server interface implements. The list of
        ///            required and optional operations implemented shall be specified in
        ///            the Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
        /// </para>
        /// </summary>
        public virtual IList<Operation> Operation {
            get {
                if ((this.OperationField == null)) {
                    this.OperationField = new XTypedList<Operation>(this, LinqToXsdTypeManager.Instance, OperationXName);
                }
                return this.OperationField;
            }
            set {
                if ((value == null)) {
                    this.OperationField = null;
                }
                else {
                    if ((this.OperationField == null)) {
                        this.OperationField = XTypedList<Operation>.Initialize(this, LinqToXsdTypeManager.Instance, value, OperationXName);
                    }
                    else {
                        XTypedServices.SetList<Operation>(this.OperationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of parameter valid domains
        ///            that each apply to one or more operations which this server
        ///            interface implements. The list of required and optional parameter
        ///            domain limitations shall be specified in the Implementation
        ///            Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
        /// </para>
        /// </summary>
        public virtual IList<DomainType> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<DomainType>(this, LinqToXsdTypeManager.Instance, ParameterXName);
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<DomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterXName);
                    }
                    else {
                        XTypedServices.SetList<DomainType>(this.ParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of valid domain constraints
        ///            on non-parameter quantities that each apply to this server. The
        ///            list of required and optional constraints shall be specified in
        ///            the Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
        /// </para>
        /// </summary>
        public virtual IList<DomainType> Constraint {
            get {
                if ((this.ConstraintField == null)) {
                    this.ConstraintField = new XTypedList<DomainType>(this, LinqToXsdTypeManager.Instance, ConstraintXName);
                }
                return this.ConstraintField;
            }
            set {
                if ((value == null)) {
                    this.ConstraintField = null;
                }
                else {
                    if ((this.ConstraintField == null)) {
                        this.ConstraintField = XTypedList<DomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<DomainType>(this.ConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Operation+, Parameter*, Constraint*, ExtendedCapabilities?)
        /// </para>
        /// </summary>
        public virtual ExtendedCapabilities ExtendedCapabilities {
            get {
                XElement x = this.GetElement(ExtendedCapabilitiesXName);
                return ((ExtendedCapabilities)(x));
            }
            set {
                this.SetElement(ExtendedCapabilitiesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OperationsMetadata Load(string xmlFile) {
            return XTypedServices.Load<OperationsMetadata>(xmlFile);
        }
        
        public static OperationsMetadata Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OperationsMetadata>(xmlFile);
        }
        
        public static OperationsMetadata Parse(string xml) {
            return XTypedServices.Parse<OperationsMetadata>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OperationsMetadata>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OperationXName, typeof(Operation));
            localElementDictionary.Add(ParameterXName, typeof(DomainType));
            localElementDictionary.Add(ConstraintXName, typeof(DomainType));
            localElementDictionary.Add(ExtendedCapabilitiesXName, typeof(ExtendedCapabilities));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ExtendedCapabilities : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedCapabilities", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ExtendedCapabilities(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedCapabilities>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExtendedCapabilities() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ExtendedCapabilities Load(string xmlFile) {
            return XTypedServices.Load<ExtendedCapabilities>(xmlFile);
        }
        
        public static ExtendedCapabilities Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ExtendedCapabilities>(xmlFile);
        }
        
        public static ExtendedCapabilities Parse(string xml) {
            return XTypedServices.Parse<ExtendedCapabilities>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExtendedCapabilities>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
    /// </para>
    /// </summary>
    public partial class Operation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DCPXName = System.Xml.Linq.XName.Get("DCP", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DCP> DCPField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DomainType> ParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConstraintXName = System.Xml.Linq.XName.Get("Constraint", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DomainType> ConstraintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<Metadata> MetadataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Operation", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Operation(XElement xe) { return XTypedServices.ToXTypedElement<Operation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Operation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DCPXName), new NamedContentModelEntity(ParameterXName), new NamedContentModelEntity(ConstraintXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
        /// </para>
        /// </summary>
        public Operation() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of Distributed Computing Platforms
        ///            (DCPs) supported for this operation. At present, only the HTTP DCP
        ///            is defined, so this element will appear only once.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<DCP> DCP {
            get {
                if ((this.DCPField == null)) {
                    this.DCPField = new XTypedList<DCP>(this, LinqToXsdTypeManager.Instance, DCPXName);
                }
                return this.DCPField;
            }
            set {
                if ((value == null)) {
                    this.DCPField = null;
                }
                else {
                    if ((this.DCPField == null)) {
                        this.DCPField = XTypedList<DCP>.Initialize(this, LinqToXsdTypeManager.Instance, value, DCPXName);
                    }
                    else {
                        XTypedServices.SetList<DCP>(this.DCPField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of parameter domains that
        ///            each apply to this operation which this server implements. If one
        ///            of these Parameter elements has the same "name" attribute as a
        ///            Parameter element in the OperationsMetadata element, this
        ///            Parameter element shall override the other one for this operation.
        ///            The list of required and optional parameter domain limitations for
        ///            this operation shall be specified in the Implementation
        ///            Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<DomainType> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<DomainType>(this, LinqToXsdTypeManager.Instance, ParameterXName);
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<DomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterXName);
                    }
                    else {
                        XTypedServices.SetList<DomainType>(this.ParameterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of valid domain constraints
        ///            on non-parameter quantities that each apply to this operation. If
        ///            one of these Constraint elements has the same "name" attribute as
        ///            a Constraint element in the OperationsMetadata element, this
        ///            Constraint element shall override the other one for this
        ///            operation. The list of required and optional constraints for this
        ///            operation shall be specified in the Implementation Specification
        ///            for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<DomainType> Constraint {
            get {
                if ((this.ConstraintField == null)) {
                    this.ConstraintField = new XTypedList<DomainType>(this, LinqToXsdTypeManager.Instance, ConstraintXName);
                }
                return this.ConstraintField;
            }
            set {
                if ((value == null)) {
                    this.ConstraintField = null;
                }
                else {
                    if ((this.ConstraintField == null)) {
                        this.ConstraintField = XTypedList<DomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<DomainType>(this.ConstraintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///            about this operation and its' implementation. A list of required
        ///            and optional metadata elements for this operation should be
        ///            specified in the Implementation Specification for this service.
        ///            (Informative: This metadata might specify the operation request
        ///            parameters or provide the XML Schemas for the operation
        ///            request.)
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (DCP+, Parameter*, Constraint*, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedSubstitutedList<Metadata>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedSubstitutedList<Metadata>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<Metadata>(this.MetadataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Name or identifier of this operation (request) (for
        ///          example, GetCapabilities). The list of required and optional
        ///          operations implemented shall be specified in the Implementation
        ///          Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Operation Load(string xmlFile) {
            return XTypedServices.Load<Operation>(xmlFile);
        }
        
        public static Operation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Operation>(xmlFile);
        }
        
        public static Operation Parse(string xml) {
            return XTypedServices.Parse<Operation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Operation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DCPXName, typeof(DCP));
            localElementDictionary.Add(ParameterXName, typeof(DomainType));
            localElementDictionary.Add(ConstraintXName, typeof(DomainType));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HTTP)
    /// </para>
    /// </summary>
    public partial class DCP : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTTPXName = System.Xml.Linq.XName.Get("HTTP", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DCP", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DCP(XElement xe) { return XTypedServices.ToXTypedElement<DCP>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DCP() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(HTTPXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HTTP)
        /// </para>
        /// </summary>
        public DCP() {
        }
        
        public DCP(HTTP HTTP) {
            this.HTTP = HTTP;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (HTTP)
        /// </para>
        /// </summary>
        public virtual HTTP HTTP {
            get {
                XElement x = this.GetElement(HTTPXName);
                return ((HTTP)(x));
            }
            set {
                this.SetElement(HTTPXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DCP Load(string xmlFile) {
            return XTypedServices.Load<DCP>(xmlFile);
        }
        
        public static DCP Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DCP>(xmlFile);
        }
        
        public static DCP Parse(string xml) {
            return XTypedServices.Parse<DCP>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DCP>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HTTPXName, typeof(HTTP));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Get | Post)+
    /// </para>
    /// </summary>
    public partial class HTTP : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GetXName = System.Xml.Linq.XName.Get("Get", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RequestMethodType> GetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PostXName = System.Xml.Linq.XName.Get("Post", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RequestMethodType> PostField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HTTP", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HTTP(XElement xe) { return XTypedServices.ToXTypedElement<HTTP>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HTTP() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(GetXName), new NamedContentModelEntity(PostXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Get | Post)+
        /// </para>
        /// </summary>
        public HTTP() {
        }
        
        /// <summary>
        /// <para>
        /// Connect point URL prefix and any constraints for
        ///            the HTTP "Get" request method for this operation
        ///            request.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Get | Post)+
        /// </para>
        /// </summary>
        public virtual IList<RequestMethodType> Get {
            get {
                if ((this.GetField == null)) {
                    this.GetField = new XTypedList<RequestMethodType>(this, LinqToXsdTypeManager.Instance, GetXName);
                }
                return this.GetField;
            }
            set {
                if ((value == null)) {
                    this.GetField = null;
                }
                else {
                    if ((this.GetField == null)) {
                        this.GetField = XTypedList<RequestMethodType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GetXName);
                    }
                    else {
                        XTypedServices.SetList<RequestMethodType>(this.GetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Connect point URL and any constraints for the HTTP
        ///            "Post" request method for this operation request.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Get | Post)+
        /// </para>
        /// </summary>
        public virtual IList<RequestMethodType> Post {
            get {
                if ((this.PostField == null)) {
                    this.PostField = new XTypedList<RequestMethodType>(this, LinqToXsdTypeManager.Instance, PostXName);
                }
                return this.PostField;
            }
            set {
                if ((value == null)) {
                    this.PostField = null;
                }
                else {
                    if ((this.PostField == null)) {
                        this.PostField = XTypedList<RequestMethodType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PostXName);
                    }
                    else {
                        XTypedServices.SetList<RequestMethodType>(this.PostField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static HTTP Load(string xmlFile) {
            return XTypedServices.Load<HTTP>(xmlFile);
        }
        
        public static HTTP Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<HTTP>(xmlFile);
        }
        
        public static HTTP Parse(string xml) {
            return XTypedServices.Parse<HTTP>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HTTP>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GetXName, typeof(RequestMethodType));
            localElementDictionary.Add(PostXName, typeof(RequestMethodType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Resource : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Resource", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Resource(XElement xe) { return XTypedServices.ToXTypedElement<Resource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Resource() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Resource Load(string xmlFile) {
            return XTypedServices.Load<Resource>(xmlFile);
        }
        
        public static Resource Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Resource>(xmlFile);
        }
        
        public static Resource Parse(string xml) {
            return XTypedServices.Parse<Resource>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Resource>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Exception+)
    /// </para>
    /// </summary>
    public partial class ExceptionReport : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExceptionXName = System.Xml.Linq.XName.Get("Exception", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Exception> ExceptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExceptionReport", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExceptionReport(XElement xe) { return XTypedServices.ToXTypedElement<ExceptionReport>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExceptionReport() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExceptionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Exception+)
        /// </para>
        /// </summary>
        public ExceptionReport() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more Exception elements
        ///            that each describes an error. These Exception elements shall be
        ///            interpreted by clients as being independent of one another (not
        ///            hierarchical).
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Exception+)
        /// </para>
        /// </summary>
        public virtual IList<Exception> Exception {
            get {
                if ((this.ExceptionField == null)) {
                    this.ExceptionField = new XTypedList<Exception>(this, LinqToXsdTypeManager.Instance, ExceptionXName);
                }
                return this.ExceptionField;
            }
            set {
                if ((value == null)) {
                    this.ExceptionField = null;
                }
                else {
                    if ((this.ExceptionField == null)) {
                        this.ExceptionField = XTypedList<Exception>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExceptionXName);
                    }
                    else {
                        XTypedServices.SetList<Exception>(this.ExceptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Specification version for OWS operation. The string
        ///          value shall contain one x.y.z "version" value (e.g., "2.1.3"). A
        ///          version number shall contain three non-negative integers separated
        ///          by decimal points, in the form "x.y.z". The integers y and z shall
        ///          not exceed 99. Each version shall be for the Implementation
        ///          Specification (document) and the associated XML Schemas to which
        ///          requested operations will conform. An Implementation Specification
        ///          version normally specifies XML Schemas against which an XML encoded
        ///          operation response must conform and should be validated. See Version
        ///          negotiation subclause for more information.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier of the language used by all included
        ///          exception text values. These language identifiers shall be as
        ///          specified in IETF RFC 4646. When this attribute is omitted, the
        ///          language used is not identified.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseUnionValue(x, lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, langXName, lang.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ExceptionReport Load(string xmlFile) {
            return XTypedServices.Load<ExceptionReport>(xmlFile);
        }
        
        public static ExceptionReport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ExceptionReport>(xmlFile);
        }
        
        public static ExceptionReport Parse(string xml) {
            return XTypedServices.Parse<ExceptionReport>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExceptionReport>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExceptionXName, typeof(Exception));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Value+)
    /// </para>
    /// </summary>
    public partial class AdditionalParameter : global::OpenGis.Ows.AbstractMetaData, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> ValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdditionalParameter", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AdditionalParameter(XElement xe) { return XTypedServices.ToXTypedElement<AdditionalParameter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AdditionalParameter() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NameXName), new NamedContentModelEntity(ValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Value+)
        /// </para>
        /// </summary>
        public AdditionalParameter() {
        }
        
        /// <summary>
        /// <para>
        /// Name or identifier of this AdditionalParameter,
        ///            unique for this OGC Web Service.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Value+)
        /// </para>
        /// </summary>
        public virtual CodeType Name {
            get {
                XElement x = this.GetElement(NameXName);
                return ((CodeType)(x));
            }
            set {
                this.SetElement(NameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more values of this
        ///            AdditionalParameter.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Name, Value+)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static AdditionalParameter Load(string xmlFile) {
            return XTypedServices.Load<AdditionalParameter>(xmlFile);
        }
        
        public static AdditionalParameter Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AdditionalParameter>(xmlFile);
        }
        
        public new static AdditionalParameter Parse(string xml) {
            return XTypedServices.Parse<AdditionalParameter>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdditionalParameter>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(CodeType));
            localElementDictionary.Add(ValueXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded identifier of a standard MIME type, possibly
    ///      a parameterized MIME type.
    /// </para>
    /// </summary>
    public sealed class MimeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(application|audio|image|text|video|message|multipart|model)/.+(;\\s*.+=.+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MimeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Specification version for OWS operation. The string value
    ///      shall contain one x.y.z "version" value (e.g., "2.1.3"). A version
    ///      number shall contain three non-negative integers separated by decimal
    ///      points, in the form "x.y.z". The integers y and z shall not exceed 99.
    ///      Each version shall be for the Implementation Specification (document)
    ///      and the associated XML Schemas to which requested operations will
    ///      conform. An Implementation Specification version normally specifies XML
    ///      Schemas against which an XML encoded operation response must conform and
    ///      should be validated. See Version negotiation subclause for more
    ///      information.
    /// </para>
    /// </summary>
    public sealed class VersionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d+\\.\\d?\\d\\.\\d?\\d"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VersionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This element either references or contains more metadata
    ///      about the element that includes this element. To reference metadata
    ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
    ///      shall be included. Either at least one of the attributes in
    ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
    ///      be included, but not both. An Implementation Specification can restrict
    ///      the contents of this element to always be a reference or always contain
    ///      metadata. (Informative: This element was adapted from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// <para>
    /// Regular expression: (AbstractMetaData?)
    /// </para>
    /// </summary>
    public partial class MetadataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstractMetaDataXName = System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName aboutXName = System.Xml.Linq.XName.Get("about", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MetadataType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MetadataType(XElement xe) { return XTypedServices.ToXTypedElement<MetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MetadataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameter", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// This element either references or contains more metadata
        ///      about the element that includes this element. To reference metadata
        ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
        ///      shall be included. Either at least one of the attributes in
        ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
        ///      be included, but not both. An Implementation Specification can restrict
        ///      the contents of this element to always be a reference or always contain
        ///      metadata. (Informative: This element was adapted from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// <para>
        /// Regular expression: (AbstractMetaData?)
        /// </para>
        /// </summary>
        public MetadataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: AbstractMetaData, AdditionalParameter
        /// </para>
        /// <para>
        /// Regular expression: (AbstractMetaData?)
        /// </para>
        /// </summary>
        public virtual AbstractMetaData AbstractMetaData {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameter", "http://www.opengis.net/ows/2.0"));
                return ((AbstractMetaData)(x));
            }
            set {
                this.SetElement(AbstractMetaDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.actuateType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.actuateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional reference to the aspect of the element which
        ///        includes this "metadata" element that this metadata provides more
        ///        information about.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri about {
            get {
                XAttribute x = this.Attribute(aboutXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(aboutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MetadataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AbstractMetaDataXName, typeof(AbstractMetaData));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded minimum rectangular bounding box (or region)
    ///      parameter, surrounding all the associated data.
    /// </para>
    /// <para>
    /// This type is adapted from the EnvelopeType of GML 3.1,
    ///      with modified contents and documentation for encoding a MINIMUM size box
    ///      SURROUNDING all associated data.
    /// </para>
    /// <para>
    /// Regular expression: (LowerCorner, UpperCorner)
    /// </para>
    /// </summary>
    public partial class BoundingBoxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LowerCornerXName = System.Xml.Linq.XName.Get("LowerCorner", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpperCornerXName = System.Xml.Linq.XName.Get("UpperCorner", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName crsXName = System.Xml.Linq.XName.Get("crs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dimensionsXName = System.Xml.Linq.XName.Get("dimensions", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BoundingBoxType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BoundingBoxType(XElement xe) { return XTypedServices.ToXTypedElement<BoundingBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BoundingBoxType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LowerCornerXName), new NamedContentModelEntity(UpperCornerXName));
        }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data.
        /// </para>
        /// <para>
        /// This type is adapted from the EnvelopeType of GML 3.1,
        ///      with modified contents and documentation for encoding a MINIMUM size box
        ///      SURROUNDING all associated data.
        /// </para>
        /// <para>
        /// Regular expression: (LowerCorner, UpperCorner)
        /// </para>
        /// </summary>
        public BoundingBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Position of the bounding box corner at which the
        ///          value of each coordinate normally is the algebraic minimum within
        ///          this bounding box. In some cases, this position is normally
        ///          displayed at the top, such as the top left for some image
        ///          coordinates. For more information, see Subclauses 10.2.5 and
        ///          C.13.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LowerCorner, UpperCorner)
        /// </para>
        /// </summary>
        public virtual IList<double> LowerCorner {
            get {
                XElement x = this.GetElement(LowerCornerXName);
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListElement(LowerCornerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Position of the bounding box corner at which the
        ///          value of each coordinate normally is the algebraic maximum within
        ///          this bounding box. In some cases, this position is normally
        ///          displayed at the bottom, such as the bottom right for some image
        ///          coordinates. For more information, see Subclauses 10.2.5 and
        ///          C.13.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LowerCorner, UpperCorner)
        /// </para>
        /// </summary>
        public virtual IList<double> UpperCorner {
            get {
                XElement x = this.GetElement(UpperCornerXName);
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListElement(UpperCornerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Usually references the definition of a CRS, as
        ///        specified in [OGC Topic 2]. Such a CRS definition can be XML encoded
        ///        using the gml:CoordinateReferenceSystemType in [GML 3.1]. For well
        ///        known references, it is not required that a CRS definition exist at
        ///        the location the URI points to. If no anyURI value is included, the
        ///        applicable CRS must be either: a) Specified outside the bounding box,
        ///        but inside a data structure that includes this bounding box, as
        ///        specified for a specific OWS use of this bounding box type. b) Fixed
        ///        and specified in the Implementation Specification for a specific OWS
        ///        use of the bounding box type.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri crs {
            get {
                XAttribute x = this.Attribute(crsXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(crsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of dimensions in this CRS (the length of a
        ///        coordinate sequence in this use of the PositionType). This number is
        ///        specified by the CRS definition, but can also be specified
        ///        here.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? dimensions {
            get {
                XAttribute x = this.Attribute(dimensionsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(dimensionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BoundingBoxType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LowerCornerXName, typeof(double));
            localElementDictionary.Add(UpperCornerXName, typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Position instances hold the coordinates of a position in
    ///      a coordinate reference system (CRS) referenced by the related "crs"
    ///      attribute or elsewhere. For an angular coordinate axis that is
    ///      physically continuous for multiple revolutions, but whose recorded
    ///      values can be discontinuous, special conditions apply when the bounding
    ///      box is continuous across the value discontinuity: a) If the bounding box
    ///      is continuous clear around this angular axis, then ordinate values of
    ///      minus and plus infinity shall be used. b) If the bounding box is
    ///      continuous across the value discontinuity but is not continuous clear
    ///      around this angular axis, then some non-normal value can be used if
    ///      specified for a specific OWS use of the BoundingBoxType. For more
    ///      information, see Subclauses 10.2.5 and C.13.
    /// </para>
    /// <para>
    /// This type is adapted from DirectPositionType and
    ///      doubleList of GML 3.1. The adaptations include omission of all the
    ///      attributes, since the needed information is included in the
    ///      BoundingBoxType.
    /// </para>
    /// </summary>
    public sealed class PositionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private PositionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded minimum rectangular bounding box (or region)
    ///      parameter, surrounding all the associated data. This box is specialized
    ///      for use with the 2D WGS 84 coordinate reference system with decimal
    ///      values of longitude and latitude.
    /// </para>
    /// <para>
    /// This type is adapted from the general BoundingBoxType,
    ///      with modified contents and documentation for use with the 2D WGS 84
    ///      coordinate reference system.
    /// </para>
    /// </summary>
    public partial class WGS84BoundingBoxType : global::OpenGis.Ows.BoundingBoxType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WGS84BoundingBoxType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator WGS84BoundingBoxType(XElement xe) { return XTypedServices.ToXTypedElement<WGS84BoundingBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data. This box is specialized
        ///      for use with the 2D WGS 84 coordinate reference system with decimal
        ///      values of longitude and latitude.
        /// </para>
        /// <para>
        /// This type is adapted from the general BoundingBoxType,
        ///      with modified contents and documentation for use with the 2D WGS 84
        ///      coordinate reference system.
        /// </para>
        /// </summary>
        public WGS84BoundingBoxType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WGS84BoundingBoxType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Two-dimensional position instances hold the longitude and
    ///      latitude coordinates of a position in the 2D WGS 84 coordinate reference
    ///      system. The longitude value shall be listed first, followed by the
    ///      latitude value, both in decimal degrees. Latitude values shall range
    ///      from -90 to +90 degrees, and longitude values shall normally range from
    ///      -180 to +180 degrees. For the longitude axis, special conditions apply
    ///      when the bounding box is continuous across the +/- 180 degrees meridian
    ///      longitude value discontinuity: a) If the bounding box is continuous
    ///      clear around the Earth, then longitude values of minus and plus infinity
    ///      shall be used. b) If the bounding box is continuous across the value
    ///      discontinuity but is not continuous clear around the Earth, then some
    ///      non-normal value can be used if specified for a specific OWS use of the
    ///      WGS84BoundingBoxType. For more information, see Subclauses 10.4.5 and
    ///      C.13.
    /// </para>
    /// </summary>
    public sealed class PositionType2D {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private PositionType2D() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Human-readable descriptive information for the object it
    ///      is included within. This type shall be extended if needed for specific
    ///      OWS use to include additional metadata for each type of information.
    ///      This type shall not be restricted for a specific OWS to change the
    ///      multiplicity (or optionality) of some elements. If the xml:lang
    ///      attribute is not included in a Title, Abstract or Keyword element, then
    ///      no language is specified for that element unless specified by another
    ///      means. All Title, Abstract and Keyword elements in the same Description
    ///      that share the same xml:lang attribute value represent the description
    ///      of the parent object in that language. Multiple Title or Abstract
    ///      elements shall not exist in the same Description with the same xml:lang
    ///      attribute value unless otherwise specified.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*)
    /// </para>
    /// </summary>
    public partial class DescriptionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstractXName = System.Xml.Linq.XName.Get("Abstract", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Abstract> AbstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeywordsXName = System.Xml.Linq.XName.Get("Keywords", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Keywords> KeywordsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DescriptionType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DescriptionType(XElement xe) { return XTypedServices.ToXTypedElement<DescriptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DescriptionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName));
        }
        
        /// <summary>
        /// <para>
        /// Human-readable descriptive information for the object it
        ///      is included within. This type shall be extended if needed for specific
        ///      OWS use to include additional metadata for each type of information.
        ///      This type shall not be restricted for a specific OWS to change the
        ///      multiplicity (or optionality) of some elements. If the xml:lang
        ///      attribute is not included in a Title, Abstract or Keyword element, then
        ///      no language is specified for that element unless specified by another
        ///      means. All Title, Abstract and Keyword elements in the same Description
        ///      that share the same xml:lang attribute value represent the description
        ///      of the parent object in that language. Multiple Title or Abstract
        ///      elements shall not exist in the same Description with the same xml:lang
        ///      attribute value unless otherwise specified.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*)
        /// </para>
        /// </summary>
        public DescriptionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*)
        /// </para>
        /// </summary>
        public virtual IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, TitleXName);
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, TitleXName);
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*)
        /// </para>
        /// </summary>
        public virtual IList<Abstract> Abstract {
            get {
                if ((this.AbstractField == null)) {
                    this.AbstractField = new XTypedList<Abstract>(this, LinqToXsdTypeManager.Instance, AbstractXName);
                }
                return this.AbstractField;
            }
            set {
                if ((value == null)) {
                    this.AbstractField = null;
                }
                else {
                    if ((this.AbstractField == null)) {
                        this.AbstractField = XTypedList<Abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, AbstractXName);
                    }
                    else {
                        XTypedServices.SetList<Abstract>(this.AbstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*)
        /// </para>
        /// </summary>
        public virtual IList<Keywords> Keywords {
            get {
                if ((this.KeywordsField == null)) {
                    this.KeywordsField = new XTypedList<Keywords>(this, LinqToXsdTypeManager.Instance, KeywordsXName);
                }
                return this.KeywordsField;
            }
            set {
                if ((value == null)) {
                    this.KeywordsField = null;
                }
                else {
                    if ((this.KeywordsField == null)) {
                        this.KeywordsField = XTypedList<Keywords>.Initialize(this, LinqToXsdTypeManager.Instance, value, KeywordsXName);
                    }
                    else {
                        XTypedServices.SetList<Keywords>(this.KeywordsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DescriptionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Basic metadata identifying and describing a set of
    ///      data.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*)
    /// </para>
    /// </summary>
    public partial class BasicIdentificationType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<Metadata> MetadataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BasicIdentificationType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BasicIdentificationType(XElement xe) { return XTypedServices.ToXTypedElement<BasicIdentificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BasicIdentificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Basic metadata identifying and describing a set of
        ///      data.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*)
        /// </para>
        /// </summary>
        public BasicIdentificationType() {
        }
        
        /// <summary>
        /// <para>
        /// Optional unique identifier or name of this
        ///              dataset.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*)
        /// </para>
        /// </summary>
        public virtual Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///              about this data(set). A list of optional metadata elements for
        ///              this data identification could be specified in the
        ///              Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedSubstitutedList<Metadata>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedSubstitutedList<Metadata>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<Metadata>(this.MetadataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BasicIdentificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Extended metadata identifying and describing a set of
    ///      data. This type shall be extended if needed for each specific OWS to
    ///      include additional metadata for each type of dataset. If needed, this
    ///      type should first be restricted for each specific OWS to change the
    ///      multiplicity (or optionality) of some elements.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, BoundingBox*, OutputFormat*, AvailableCRS*)
    /// </para>
    /// </summary>
    public partial class IdentificationType : global::OpenGis.Ows.BasicIdentificationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundingBoxXName = System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<BoundingBox> BoundingBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputFormatXName = System.Xml.Linq.XName.Get("OutputFormat", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<OutputFormat> OutputFormatField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableCRSXName = System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<AvailableCRS> AvailableCRSField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentificationType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IdentificationType(XElement xe) { return XTypedServices.ToXTypedElement<IdentificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IdentificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0")), new NamedContentModelEntity(OutputFormatXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("SupportedCRS", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Extended metadata identifying and describing a set of
        ///      data. This type shall be extended if needed for each specific OWS to
        ///      include additional metadata for each type of dataset. If needed, this
        ///      type should first be restricted for each specific OWS to change the
        ///      multiplicity (or optionality) of some elements.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, BoundingBox*, OutputFormat*, AvailableCRS*)
        /// </para>
        /// </summary>
        public IdentificationType() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more bounding boxes
        ///              whose union describes the extent of this
        ///              dataset.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: BoundingBox, WGS84BoundingBox
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, BoundingBox*, OutputFormat*, AvailableCRS*)
        /// </para>
        /// </summary>
        public virtual IList<BoundingBox> BoundingBox {
            get {
                if ((this.BoundingBoxField == null)) {
                    this.BoundingBoxField = new XTypedSubstitutedList<BoundingBox>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0"));
                }
                return this.BoundingBoxField;
            }
            set {
                if ((value == null)) {
                    this.BoundingBoxField = null;
                }
                else {
                    if ((this.BoundingBoxField == null)) {
                        this.BoundingBoxField = XTypedSubstitutedList<BoundingBox>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<BoundingBox>(this.BoundingBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more references to data
        ///              formats supported for server outputs.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, BoundingBox*, OutputFormat*, AvailableCRS*)
        /// </para>
        /// </summary>
        public virtual IList<OutputFormat> OutputFormat {
            get {
                if ((this.OutputFormatField == null)) {
                    this.OutputFormatField = new XSimpleList<OutputFormat>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, OutputFormatXName);
                }
                return this.OutputFormatField;
            }
            set {
                if ((value == null)) {
                    this.OutputFormatField = null;
                }
                else {
                    if ((this.OutputFormatField == null)) {
                        this.OutputFormatField = XSimpleList<OutputFormat>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, OutputFormatXName);
                    }
                    else {
                        XTypedServices.SetList<OutputFormat>(this.OutputFormatField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more available
        ///              coordinate reference systems.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: AvailableCRS, SupportedCRS
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, BoundingBox*, OutputFormat*, AvailableCRS*)
        /// </para>
        /// </summary>
        public virtual IList<AvailableCRS> AvailableCRS {
            get {
                if ((this.AvailableCRSField == null)) {
                    this.AvailableCRSField = new XTypedSubstitutedList<AvailableCRS>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("SupportedCRS", "http://www.opengis.net/ows/2.0"));
                }
                return this.AvailableCRSField;
            }
            set {
                if ((value == null)) {
                    this.AvailableCRSField = null;
                }
                else {
                    if ((this.AvailableCRSField == null)) {
                        this.AvailableCRSField = XTypedSubstitutedList<AvailableCRS>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("SupportedCRS", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<AvailableCRS>(this.AvailableCRSField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IdentificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
            localElementDictionary.Add(BoundingBoxXName, typeof(BoundingBox));
            localElementDictionary.Add(OutputFormatXName, typeof(OutputFormat));
            localElementDictionary.Add(AvailableCRSXName, typeof(AvailableCRS));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Valid domain (or allowed set of values) of one quantity,
    ///      with its name or identifier.
    /// </para>
    /// <para>
    /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
    /// </para>
    /// </summary>
    public partial class DomainType : global::OpenGis.Ows.UnNamedDomainType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DomainType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DomainType(XElement xe) { return XTypedServices.ToXTypedElement<DomainType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DomainType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AllowedValuesXName), new NamedContentModelEntity(AnyValueXName), new NamedContentModelEntity(NoValuesXName), new NamedContentModelEntity(ValuesReferenceXName)), new NamedContentModelEntity(DefaultValueXName), new NamedContentModelEntity(MeaningXName), new NamedContentModelEntity(DataTypeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(UOMXName), new NamedContentModelEntity(ReferenceSystemXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Valid domain (or allowed set of values) of one quantity,
        ///      with its name or identifier.
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public DomainType() {
        }
        
        /// <summary>
        /// <para>
        /// Name or identifier of this
        ///            quantity.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DomainType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AllowedValuesXName, typeof(AllowedValues));
            localElementDictionary.Add(AnyValueXName, typeof(AnyValue));
            localElementDictionary.Add(NoValuesXName, typeof(NoValues));
            localElementDictionary.Add(ValuesReferenceXName, typeof(ValuesReference));
            localElementDictionary.Add(DefaultValueXName, typeof(DefaultValue));
            localElementDictionary.Add(MeaningXName, typeof(Meaning));
            localElementDictionary.Add(DataTypeXName, typeof(DataType));
            localElementDictionary.Add(UOMXName, typeof(UOM));
            localElementDictionary.Add(ReferenceSystemXName, typeof(ReferenceSystem));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Valid domain (or allowed set of values) of one quantity,
    ///      with needed metadata but without a quantity name or
    ///      identifier.
    /// </para>
    /// <para>
    /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
    /// </para>
    /// </summary>
    public partial class UnNamedDomainType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowedValuesXName = System.Xml.Linq.XName.Get("AllowedValues", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnyValueXName = System.Xml.Linq.XName.Get("AnyValue", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoValuesXName = System.Xml.Linq.XName.Get("NoValues", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValuesReferenceXName = System.Xml.Linq.XName.Get("ValuesReference", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultValueXName = System.Xml.Linq.XName.Get("DefaultValue", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MeaningXName = System.Xml.Linq.XName.Get("Meaning", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataTypeXName = System.Xml.Linq.XName.Get("DataType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UOMXName = System.Xml.Linq.XName.Get("UOM", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferenceSystemXName = System.Xml.Linq.XName.Get("ReferenceSystem", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<Metadata> MetadataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnNamedDomainType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnNamedDomainType(XElement xe) { return XTypedServices.ToXTypedElement<UnNamedDomainType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnNamedDomainType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AllowedValuesXName), new NamedContentModelEntity(AnyValueXName), new NamedContentModelEntity(NoValuesXName), new NamedContentModelEntity(ValuesReferenceXName)), new NamedContentModelEntity(DefaultValueXName), new NamedContentModelEntity(MeaningXName), new NamedContentModelEntity(DataTypeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(UOMXName), new NamedContentModelEntity(ReferenceSystemXName)), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Valid domain (or allowed set of values) of one quantity,
        ///      with needed metadata but without a quantity name or
        ///      identifier.
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public UnNamedDomainType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual AllowedValues AllowedValues {
            get {
                XElement x = this.GetElement(AllowedValuesXName);
                return ((AllowedValues)(x));
            }
            set {
                this.SetElement(AllowedValuesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual AnyValue AnyValue {
            get {
                XElement x = this.GetElement(AnyValueXName);
                return ((AnyValue)(x));
            }
            set {
                this.SetElement(AnyValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual NoValues NoValues {
            get {
                XElement x = this.GetElement(NoValuesXName);
                return ((NoValues)(x));
            }
            set {
                this.SetElement(NoValuesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual ValuesReference ValuesReference {
            get {
                XElement x = this.GetElement(ValuesReferenceXName);
                return ((ValuesReference)(x));
            }
            set {
                this.SetElement(ValuesReferenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional default value for this quantity, which
        ///          should be included when this quantity has a default
        ///          value.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual DefaultValue DefaultValue {
            get {
                XElement x = this.GetElement(DefaultValueXName);
                return ((DefaultValue)(x));
            }
            set {
                this.SetElement(DefaultValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Meaning metadata should be referenced or included for
        ///          each quantity.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual Meaning Meaning {
            get {
                XElement x = this.GetElement(MeaningXName);
                return ((Meaning)(x));
            }
            set {
                this.SetElement(MeaningXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// This data type metadata should be referenced or
        ///          included for each quantity.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual DataType DataType {
            get {
                XElement x = this.GetElement(DataTypeXName);
                return ((DataType)(x));
            }
            set {
                this.SetElement(DataTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier of unit of measure of this set of values.
        ///          Should be included then this set of values has units (and not a more
        ///          complete reference system).
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual UOM UOM {
            get {
                XElement x = this.GetElement(UOMXName);
                return ((UOM)(x));
            }
            set {
                this.SetElement(UOMXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier of reference system used by this set of
        ///          values. Should be included then this set of values has a reference
        ///          system (not just units).
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual ReferenceSystem ReferenceSystem {
            get {
                XElement x = this.GetElement(ReferenceSystemXName);
                return ((ReferenceSystem)(x));
            }
            set {
                this.SetElement(ReferenceSystemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of other metadata about this
        ///          quantity. A list of required and optional other metadata elements
        ///          for this quantity should be specified in the Implementation
        ///          Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: ((AllowedValues | AnyValue | NoValues | ValuesReference), DefaultValue?, Meaning?, DataType?, (UOM | ReferenceSystem)?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedSubstitutedList<Metadata>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedSubstitutedList<Metadata>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<Metadata>(this.MetadataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnNamedDomainType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AllowedValuesXName, typeof(AllowedValues));
            localElementDictionary.Add(AnyValueXName, typeof(AnyValue));
            localElementDictionary.Add(NoValuesXName, typeof(NoValues));
            localElementDictionary.Add(ValuesReferenceXName, typeof(ValuesReference));
            localElementDictionary.Add(DefaultValueXName, typeof(DefaultValue));
            localElementDictionary.Add(MeaningXName, typeof(Meaning));
            localElementDictionary.Add(DataTypeXName, typeof(DataType));
            localElementDictionary.Add(UOMXName, typeof(UOM));
            localElementDictionary.Add(ReferenceSystemXName, typeof(ReferenceSystem));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class ValueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValueType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ValueType(XElement xe) { return XTypedServices.ToXTypedElement<ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public ValueType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A range of values of a numeric parameter. This range can
    ///      be continuous or discrete, defined by a fixed spacing between adjacent
    ///      valid values. If the MinimumValue or MaximumValue is not included, there
    ///      is no value limit in that direction. Inclusion of the specified minimum
    ///      and maximum values in the range shall be defined by the
    ///      rangeClosure.
    /// </para>
    /// <para>
    /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
    /// </para>
    /// </summary>
    public partial class RangeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinimumValueXName = System.Xml.Linq.XName.Get("MinimumValue", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaximumValueXName = System.Xml.Linq.XName.Get("MaximumValue", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpacingXName = System.Xml.Linq.XName.Get("Spacing", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rangeClosureXName = System.Xml.Linq.XName.Get("rangeClosure", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static IList<string> rangeClosureDefaultValue = new string[] {
                "closed"};
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RangeType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RangeType(XElement xe) { return XTypedServices.ToXTypedElement<RangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RangeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MinimumValueXName), new NamedContentModelEntity(MaximumValueXName), new NamedContentModelEntity(SpacingXName));
        }
        
        /// <summary>
        /// <para>
        /// A range of values of a numeric parameter. This range can
        ///      be continuous or discrete, defined by a fixed spacing between adjacent
        ///      valid values. If the MinimumValue or MaximumValue is not included, there
        ///      is no value limit in that direction. Inclusion of the specified minimum
        ///      and maximum values in the range shall be defined by the
        ///      rangeClosure.
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public RangeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual MinimumValue MinimumValue {
            get {
                XElement x = this.GetElement(MinimumValueXName);
                return ((MinimumValue)(x));
            }
            set {
                this.SetElement(MinimumValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual MaximumValue MaximumValue {
            get {
                XElement x = this.GetElement(MaximumValueXName);
                return ((MaximumValue)(x));
            }
            set {
                this.SetElement(MaximumValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Shall be included when the allowed values are NOT
        ///          continuous in this range. Shall not be included when the allowed
        ///          values are continuous in this range.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual Spacing Spacing {
            get {
                XElement x = this.GetElement(SpacingXName);
                return ((Spacing)(x));
            }
            set {
                this.SetElement(SpacingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Shall be included unless the default value
        ///        applies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> rangeClosure {
            get {
                XAttribute x = this.Attribute(rangeClosureXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, rangeClosureDefaultValue);
            }
            set {
                this.SetListAttribute(rangeClosureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RangeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MinimumValueXName, typeof(MinimumValue));
            localElementDictionary.Add(MaximumValueXName, typeof(MaximumValue));
            localElementDictionary.Add(SpacingXName, typeof(Spacing));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// References metadata about a quantity, and provides a name
    ///      for this metadata. (Informative: This element was simplified from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class DomainMetadataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName referenceXName = System.Xml.Linq.XName.Get("reference", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DomainMetadataType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator DomainMetadataType(XElement xe) { return XTypedServices.ToXTypedElement<DomainMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public DomainMetadataType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                XAttribute x = this.Attribute(referenceXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(referenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DomainMetadataType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Connect point URL and any constraints for this HTTP
    ///      request method for this operation request. In the OnlineResourceType,
    ///      the xlink:href attribute in the xlink:simpleAttrs attribute group shall
    ///      be used to contain this URL. The other attributes in the
    ///      xlink:simpleAttrs attribute group should not be used.
    /// </para>
    /// <para>
    /// Regular expression: (Constraint*)
    /// </para>
    /// </summary>
    public partial class RequestMethodType : global::OpenGis.Ows.OnlineResourceType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConstraintXName = System.Xml.Linq.XName.Get("Constraint", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DomainType> ConstraintField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RequestMethodType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RequestMethodType(XElement xe) { return XTypedServices.ToXTypedElement<RequestMethodType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RequestMethodType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConstraintXName));
        }
        
        /// <summary>
        /// <para>
        /// Connect point URL and any constraints for this HTTP
        ///      request method for this operation request. In the OnlineResourceType,
        ///      the xlink:href attribute in the xlink:simpleAttrs attribute group shall
        ///      be used to contain this URL. The other attributes in the
        ///      xlink:simpleAttrs attribute group should not be used.
        /// </para>
        /// <para>
        /// Regular expression: (Constraint*)
        /// </para>
        /// </summary>
        public RequestMethodType() {
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of valid domain
        ///              constraints on non-parameter quantities that each apply to this
        ///              request method for this operation. If one of these Constraint
        ///              elements has the same "name" attribute as a Constraint element
        ///              in the OperationsMetadata or Operation element, this Constraint
        ///              element shall override the other one for this operation. The
        ///              list of required and optional constraints for this request
        ///              method for this operation shall be specified in the
        ///              Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Constraint*)
        /// </para>
        /// </summary>
        public virtual IList<DomainType> Constraint {
            get {
                if ((this.ConstraintField == null)) {
                    this.ConstraintField = new XTypedList<DomainType>(this, LinqToXsdTypeManager.Instance, ConstraintXName);
                }
                return this.ConstraintField;
            }
            set {
                if ((value == null)) {
                    this.ConstraintField = null;
                }
                else {
                    if ((this.ConstraintField == null)) {
                        this.ConstraintField = XTypedList<DomainType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConstraintXName);
                    }
                    else {
                        XTypedServices.SetList<DomainType>(this.ConstraintField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RequestMethodType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConstraintXName, typeof(DomainType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded GetCapabilities operation response. This
    ///      document provides clients with service metadata about a specific service
    ///      instance, usually including metadata about the tightly-coupled data
    ///      served. If the server does not implement the updateSequence parameter,
    ///      the server shall always return the complete Capabilities document,
    ///      without the updateSequence parameter. When the server implements the
    ///      updateSequence parameter and the GetCapabilities operation request
    ///      included the updateSequence parameter with the current value, the server
    ///      shall return this element with only the "version" and "updateSequence"
    ///      attributes. Otherwise, all optional elements shall be included or not
    ///      depending on the actual value of the Contents parameter in the
    ///      GetCapabilities operation request. This base type shall be extended by
    ///      each specific OWS to include the additional contents
    ///      needed.
    /// </para>
    /// <para>
    /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
    /// </para>
    /// </summary>
    public partial class CapabilitiesBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceIdentificationXName = System.Xml.Linq.XName.Get("ServiceIdentification", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServiceProviderXName = System.Xml.Linq.XName.Get("ServiceProvider", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OperationsMetadataXName = System.Xml.Linq.XName.Get("OperationsMetadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LanguagesXName = System.Xml.Linq.XName.Get("Languages", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName updateSequenceXName = System.Xml.Linq.XName.Get("updateSequence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CapabilitiesBaseType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CapabilitiesBaseType(XElement xe) { return XTypedServices.ToXTypedElement<CapabilitiesBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CapabilitiesBaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ServiceIdentificationXName), new NamedContentModelEntity(ServiceProviderXName), new NamedContentModelEntity(OperationsMetadataXName), new NamedContentModelEntity(LanguagesXName));
        }
        
        /// <summary>
        /// <para>
        /// XML encoded GetCapabilities operation response. This
        ///      document provides clients with service metadata about a specific service
        ///      instance, usually including metadata about the tightly-coupled data
        ///      served. If the server does not implement the updateSequence parameter,
        ///      the server shall always return the complete Capabilities document,
        ///      without the updateSequence parameter. When the server implements the
        ///      updateSequence parameter and the GetCapabilities operation request
        ///      included the updateSequence parameter with the current value, the server
        ///      shall return this element with only the "version" and "updateSequence"
        ///      attributes. Otherwise, all optional elements shall be included or not
        ///      depending on the actual value of the Contents parameter in the
        ///      GetCapabilities operation request. This base type shall be extended by
        ///      each specific OWS to include the additional contents
        ///      needed.
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
        /// </para>
        /// </summary>
        public CapabilitiesBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
        /// </para>
        /// </summary>
        public virtual ServiceIdentification ServiceIdentification {
            get {
                XElement x = this.GetElement(ServiceIdentificationXName);
                return ((ServiceIdentification)(x));
            }
            set {
                this.SetElement(ServiceIdentificationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
        /// </para>
        /// </summary>
        public virtual ServiceProvider ServiceProvider {
            get {
                XElement x = this.GetElement(ServiceProviderXName);
                return ((ServiceProvider)(x));
            }
            set {
                this.SetElement(ServiceProviderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
        /// </para>
        /// </summary>
        public virtual OperationsMetadata OperationsMetadata {
            get {
                XElement x = this.GetElement(OperationsMetadataXName);
                return ((OperationsMetadata)(x));
            }
            set {
                this.SetElement(OperationsMetadataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The list of languages that this service is able to
        ///          fully support. That is, if one of the listed languages is requested
        ///          using the AcceptLanguages parameter in future requests to the
        ///          server, all text strings contained in the response are guaranteed to
        ///          be in that language. This list does not necessarily constitute a
        ///          complete list of all languages that may be (at least partially)
        ///          supported by the server. It only states the languages that are fully
        ///          supported. If a server cannot guarantee full support of any
        ///          particular language, it shall omit it from the list of supported
        ///          languages in the capabilities document.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?)
        /// </para>
        /// </summary>
        public virtual LanguagesLocalType Languages {
            get {
                XElement x = this.GetElement(LanguagesXName);
                return ((LanguagesLocalType)(x));
            }
            set {
                this.SetElement(LanguagesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service metadata document version, having values that
        ///        are "increased" whenever any change is made in service metadata
        ///        document. Values are selected by each server, and are always opaque to
        ///        clients. When not supported by server, server shall not return this
        ///        attribute.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string updateSequence {
            get {
                XAttribute x = this.Attribute(updateSequenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(updateSequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CapabilitiesBaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ServiceIdentificationXName, typeof(ServiceIdentification));
            localElementDictionary.Add(ServiceProviderXName, typeof(ServiceProvider));
            localElementDictionary.Add(OperationsMetadataXName, typeof(OperationsMetadata));
            localElementDictionary.Add(LanguagesXName, typeof(LanguagesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Language+)
        /// </para>
        /// </summary>
        public partial class LanguagesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "http://www.opengis.net/ows/2.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<Language> LanguageField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Languages", "http://www.opengis.net/ows/2.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LanguagesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LanguagesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LanguagesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LanguageXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Language+)
            /// </para>
            /// </summary>
            public LanguagesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Language+)
            /// </para>
            /// </summary>
            public virtual IList<Language> Language {
                get {
                    if ((this.LanguageField == null)) {
                        this.LanguageField = new XSimpleList<Language>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, LanguageXName);
                    }
                    return this.LanguageField;
                }
                set {
                    if ((value == null)) {
                        this.LanguageField = null;
                    }
                    else {
                        if ((this.LanguageField == null)) {
                            this.LanguageField = XSimpleList<Language>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, value, LanguageXName);
                        }
                        else {
                            XTypedServices.SetList<Language>(this.LanguageField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LanguagesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LanguageXName, typeof(Language));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded GetCapabilities operation request. This
    ///      operation allows clients to retrieve service metadata about a specific
    ///      service instance. In this XML encoding, no "request" parameter is
    ///      included, since the element name specifies the specific operation. This
    ///      base type shall be extended by each specific OWS to include the
    ///      additional required "service" attribute, with the correct value for that
    ///      OWS.
    /// </para>
    /// <para>
    /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
    /// </para>
    /// </summary>
    public partial class GetCapabilitiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcceptVersionsXName = System.Xml.Linq.XName.Get("AcceptVersions", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SectionsXName = System.Xml.Linq.XName.Get("Sections", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcceptFormatsXName = System.Xml.Linq.XName.Get("AcceptFormats", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcceptLanguagesXName = System.Xml.Linq.XName.Get("AcceptLanguages", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName updateSequenceXName = System.Xml.Linq.XName.Get("updateSequence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetCapabilitiesType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GetCapabilitiesType(XElement xe) { return XTypedServices.ToXTypedElement<GetCapabilitiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GetCapabilitiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AcceptVersionsXName), new NamedContentModelEntity(SectionsXName), new NamedContentModelEntity(AcceptFormatsXName), new NamedContentModelEntity(AcceptLanguagesXName));
        }
        
        /// <summary>
        /// <para>
        /// XML encoded GetCapabilities operation request. This
        ///      operation allows clients to retrieve service metadata about a specific
        ///      service instance. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific operation. This
        ///      base type shall be extended by each specific OWS to include the
        ///      additional required "service" attribute, with the correct value for that
        ///      OWS.
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public GetCapabilitiesType() {
        }
        
        /// <summary>
        /// <para>
        /// When omitted, server shall return latest supported
        ///          version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual AcceptVersionsType AcceptVersions {
            get {
                XElement x = this.GetElement(AcceptVersionsXName);
                return ((AcceptVersionsType)(x));
            }
            set {
                this.SetElement(AcceptVersionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///          return complete service metadata (Capabilities)
        ///          document.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual SectionsType Sections {
            get {
                XElement x = this.GetElement(SectionsXName);
                return ((SectionsType)(x));
            }
            set {
                this.SetElement(SectionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///          return service metadata document using the MIME type
        ///          "text/xml".
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual AcceptFormatsType AcceptFormats {
            get {
                XElement x = this.GetElement(AcceptFormatsXName);
                return ((AcceptFormatsType)(x));
            }
            set {
                this.SetElement(AcceptFormatsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ordered list of languages desired by the client for
        ///          all human readable text in the response, in order of preference. For
        ///          every element, the first matching language available from the server
        ///          shall be present in the response.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual AcceptLanguagesLocalType AcceptLanguages {
            get {
                XElement x = this.GetElement(AcceptLanguagesXName);
                return ((AcceptLanguagesLocalType)(x));
            }
            set {
                this.SetElement(AcceptLanguagesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///        return latest complete service metadata document.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string updateSequence {
            get {
                XAttribute x = this.Attribute(updateSequenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(updateSequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetCapabilitiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AcceptVersionsXName, typeof(AcceptVersionsType));
            localElementDictionary.Add(SectionsXName, typeof(SectionsType));
            localElementDictionary.Add(AcceptFormatsXName, typeof(AcceptFormatsType));
            localElementDictionary.Add(AcceptLanguagesXName, typeof(AcceptLanguagesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Language+)
        /// </para>
        /// </summary>
        public partial class AcceptLanguagesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName LanguageXName = System.Xml.Linq.XName.Get("Language", "http://www.opengis.net/ows/2.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<Language> LanguageField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AcceptLanguages", "http://www.opengis.net/ows/2.0");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AcceptLanguagesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AcceptLanguagesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AcceptLanguagesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LanguageXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Language+)
            /// </para>
            /// </summary>
            public AcceptLanguagesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Language+)
            /// </para>
            /// </summary>
            public virtual IList<Language> Language {
                get {
                    if ((this.LanguageField == null)) {
                        this.LanguageField = new XSimpleList<Language>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, LanguageXName);
                    }
                    return this.LanguageField;
                }
                set {
                    if ((value == null)) {
                        this.LanguageField = null;
                    }
                    else {
                        if ((this.LanguageField == null)) {
                            this.LanguageField = XSimpleList<Language>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype, value, LanguageXName);
                        }
                        else {
                            XTypedServices.SetList<Language>(this.LanguageField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AcceptLanguagesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(LanguageXName, typeof(Language));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Service type identifier, where the string value is the
    ///      OWS type abbreviation, such as "WMS" or "WFS".
    /// </para>
    /// </summary>
    public sealed class ServiceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ServiceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Prioritized sequence of one or more specification
    ///      versions accepted by client, with preferred versions listed first. See
    ///      Version negotiation subclause for more information.
    /// </para>
    /// <para>
    /// Regular expression: (Version+)
    /// </para>
    /// </summary>
    public partial class AcceptVersionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> VersionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AcceptVersionsType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AcceptVersionsType(XElement xe) { return XTypedServices.ToXTypedElement<AcceptVersionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AcceptVersionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VersionXName));
        }
        
        /// <summary>
        /// <para>
        /// Prioritized sequence of one or more specification
        ///      versions accepted by client, with preferred versions listed first. See
        ///      Version negotiation subclause for more information.
        /// </para>
        /// <para>
        /// Regular expression: (Version+)
        /// </para>
        /// </summary>
        public AcceptVersionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Version+)
        /// </para>
        /// </summary>
        public virtual IList<string> Version {
            get {
                if ((this.VersionField == null)) {
                    this.VersionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, VersionXName);
                }
                return this.VersionField;
            }
            set {
                if ((value == null)) {
                    this.VersionField = null;
                }
                else {
                    if ((this.VersionField == null)) {
                        this.VersionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, VersionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.VersionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AcceptVersionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VersionXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of zero or more names of requested
    ///      sections in complete service metadata document. Each Section value shall
    ///      contain an allowed section name as specified by each OWS specification.
    ///      See Sections parameter subclause for more information.
    /// </para>
    /// <para>
    /// Regular expression: (Section*)
    /// </para>
    /// </summary>
    public partial class SectionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SectionXName = System.Xml.Linq.XName.Get("Section", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> SectionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SectionsType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SectionsType(XElement xe) { return XTypedServices.ToXTypedElement<SectionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SectionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SectionXName));
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more names of requested
        ///      sections in complete service metadata document. Each Section value shall
        ///      contain an allowed section name as specified by each OWS specification.
        ///      See Sections parameter subclause for more information.
        /// </para>
        /// <para>
        /// Regular expression: (Section*)
        /// </para>
        /// </summary>
        public SectionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Section*)
        /// </para>
        /// </summary>
        public virtual IList<string> Section {
            get {
                if ((this.SectionField == null)) {
                    this.SectionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, SectionXName);
                }
                return this.SectionField;
            }
            set {
                if ((value == null)) {
                    this.SectionField = null;
                }
                else {
                    if ((this.SectionField == null)) {
                        this.SectionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, SectionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.SectionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SectionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SectionXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service metadata document version, having values that are
    ///      "increased" whenever any change is made in service metadata document.
    ///      Values are selected by each server, and are always opaque to clients.
    ///      See updateSequence parameter use subclause for more
    ///      information.
    /// </para>
    /// </summary>
    public sealed class UpdateSequenceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UpdateSequenceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Prioritized sequence of zero or more GetCapabilities
    ///      operation response formats desired by client, with preferred formats
    ///      listed first. Each response format shall be identified by its MIME type.
    ///      See AcceptFormats parameter use subclause for more
    ///      information.
    /// </para>
    /// <para>
    /// Regular expression: (OutputFormat*)
    /// </para>
    /// </summary>
    public partial class AcceptFormatsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputFormatXName = System.Xml.Linq.XName.Get("OutputFormat", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> OutputFormatField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AcceptFormatsType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AcceptFormatsType(XElement xe) { return XTypedServices.ToXTypedElement<AcceptFormatsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AcceptFormatsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OutputFormatXName));
        }
        
        /// <summary>
        /// <para>
        /// Prioritized sequence of zero or more GetCapabilities
        ///      operation response formats desired by client, with preferred formats
        ///      listed first. Each response format shall be identified by its MIME type.
        ///      See AcceptFormats parameter use subclause for more
        ///      information.
        /// </para>
        /// <para>
        /// Regular expression: (OutputFormat*)
        /// </para>
        /// </summary>
        public AcceptFormatsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (OutputFormat*)
        /// </para>
        /// </summary>
        public virtual IList<string> OutputFormat {
            get {
                if ((this.OutputFormatField == null)) {
                    this.OutputFormatField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, OutputFormatXName);
                }
                return this.OutputFormatField;
            }
            set {
                if ((value == null)) {
                    this.OutputFormatField = null;
                }
                else {
                    if ((this.OutputFormatField == null)) {
                        this.OutputFormatField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, OutputFormatXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.OutputFormatField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AcceptFormatsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OutputFormatXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Request to a service to perform the GetResourceByID
    ///      operation. This operation allows a client to retrieve one or more
    ///      identified resources, including datasets and resources that describe
    ///      datasets or parameters. In this XML encoding, no "request" parameter is
    ///      included, since the element name specifies the specific
    ///      operation.
    /// </para>
    /// <para>
    /// Regular expression: (ResourceID*, OutputFormat?)
    /// </para>
    /// </summary>
    public partial class GetResourceByIdType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourceIDXName = System.Xml.Linq.XName.Get("ResourceID", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> ResourceIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputFormatXName = System.Xml.Linq.XName.Get("OutputFormat", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serviceXName = System.Xml.Linq.XName.Get("service", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetResourceByIdType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GetResourceByIdType(XElement xe) { return XTypedServices.ToXTypedElement<GetResourceByIdType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GetResourceByIdType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ResourceIDXName), new NamedContentModelEntity(OutputFormatXName));
        }
        
        /// <summary>
        /// <para>
        /// Request to a service to perform the GetResourceByID
        ///      operation. This operation allows a client to retrieve one or more
        ///      identified resources, including datasets and resources that describe
        ///      datasets or parameters. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific
        ///      operation.
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID*, OutputFormat?)
        /// </para>
        /// </summary>
        public GetResourceByIdType() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more resource identifiers.
        ///          These identifiers can be listed in the Contents section of the
        ///          service metadata (Capabilities) document. For more information on
        ///          this parameter, see Subclause 9.4.2.1 of the OWS Common
        ///          specification.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID*, OutputFormat?)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> ResourceID {
            get {
                if ((this.ResourceIDField == null)) {
                    this.ResourceIDField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, ResourceIDXName);
                }
                return this.ResourceIDField;
            }
            set {
                if ((value == null)) {
                    this.ResourceIDField = null;
                }
                else {
                    if ((this.ResourceIDField == null)) {
                        this.ResourceIDField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, ResourceIDXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.ResourceIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional reference to the data format to be used for
        ///          response to this operation request. This element shall be included
        ///          when multiple output formats are available for the selected
        ///          resource(s), and the client desires a format other than the
        ///          specified default, if any.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID*, OutputFormat?)
        /// </para>
        /// </summary>
        public virtual OutputFormat OutputFormat {
            get {
                XElement x = this.GetElement(OutputFormatXName);
                return ((OutputFormat)(x));
            }
            set {
                this.SetElement(OutputFormatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string service {
            get {
                XAttribute x = this.Attribute(serviceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serviceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetResourceByIdType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ResourceIDXName, typeof(System.Uri));
            localElementDictionary.Add(OutputFormatXName, typeof(OutputFormat));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// An Exception element describes one detected error that a
    ///      server chooses to convey to the client.
    /// </para>
    /// <para>
    /// Regular expression: (ExceptionText*)
    /// </para>
    /// </summary>
    public partial class ExceptionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExceptionTextXName = System.Xml.Linq.XName.Get("ExceptionText", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ExceptionTextField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exceptionCodeXName = System.Xml.Linq.XName.Get("exceptionCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locatorXName = System.Xml.Linq.XName.Get("locator", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExceptionType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExceptionType(XElement xe) { return XTypedServices.ToXTypedElement<ExceptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExceptionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExceptionTextXName));
        }
        
        /// <summary>
        /// <para>
        /// An Exception element describes one detected error that a
        ///      server chooses to convey to the client.
        /// </para>
        /// <para>
        /// Regular expression: (ExceptionText*)
        /// </para>
        /// </summary>
        public ExceptionType() {
        }
        
        /// <summary>
        /// <para>
        /// Ordered sequence of text strings that describe this
        ///          specific exception or error. The contents of these strings are left
        ///          open to definition by each server implementation. A server is
        ///          strongly encouraged to include at least one ExceptionText value, to
        ///          provide more information about the detected error than provided by
        ///          the exceptionCode. When included, multiple ExceptionText values
        ///          shall provide hierarchical information about one detected error,
        ///          with the most significant information listed first.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ExceptionText*)
        /// </para>
        /// </summary>
        public virtual IList<string> ExceptionText {
            get {
                if ((this.ExceptionTextField == null)) {
                    this.ExceptionTextField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ExceptionTextXName);
                }
                return this.ExceptionTextField;
            }
            set {
                if ((value == null)) {
                    this.ExceptionTextField = null;
                }
                else {
                    if ((this.ExceptionTextField == null)) {
                        this.ExceptionTextField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ExceptionTextXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ExceptionTextField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A code representing the type of this exception, which
        ///        shall be selected from a set of exceptionCode values specified for the
        ///        specific service operation and server.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string exceptionCode {
            get {
                XAttribute x = this.Attribute(exceptionCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(exceptionCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// When included, this locator shall indicate to the
        ///        client where an exception was encountered in servicing the client's
        ///        operation request. This locator should be included whenever meaningful
        ///        information can be provided by the server. The contents of this
        ///        locator will depend on the specific exceptionCode and OWS service, and
        ///        shall be specified in the OWS Implementation
        ///        Specification.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string locator {
            get {
                XAttribute x = this.Attribute(locatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(locatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExceptionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExceptionTextXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contents of typical Contents section of an OWS service
    ///      metadata (Capabilities) document. This type shall be extended and/or
    ///      restricted if needed for specific OWS use to include the specific
    ///      metadata needed.
    /// </para>
    /// <para>
    /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
    /// </para>
    /// </summary>
    public partial class ContentsBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatasetDescriptionSummaryXName = System.Xml.Linq.XName.Get("DatasetDescriptionSummary", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DatasetDescriptionSummary> DatasetDescriptionSummaryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OtherSourceXName = System.Xml.Linq.XName.Get("OtherSource", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OtherSource> OtherSourceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentsBaseType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContentsBaseType(XElement xe) { return XTypedServices.ToXTypedElement<ContentsBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentsBaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DatasetDescriptionSummaryXName), new NamedContentModelEntity(OtherSourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Contents of typical Contents section of an OWS service
        ///      metadata (Capabilities) document. This type shall be extended and/or
        ///      restricted if needed for specific OWS use to include the specific
        ///      metadata needed.
        /// </para>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
        /// </para>
        /// </summary>
        public ContentsBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered set of summary descriptions for the
        ///          datasets available from this OWS server. This set shall be included
        ///          unless another source is referenced and all this metadata is
        ///          available from that source.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
        /// </para>
        /// </summary>
        public virtual IList<DatasetDescriptionSummary> DatasetDescriptionSummary {
            get {
                if ((this.DatasetDescriptionSummaryField == null)) {
                    this.DatasetDescriptionSummaryField = new XTypedList<DatasetDescriptionSummary>(this, LinqToXsdTypeManager.Instance, DatasetDescriptionSummaryXName);
                }
                return this.DatasetDescriptionSummaryField;
            }
            set {
                if ((value == null)) {
                    this.DatasetDescriptionSummaryField = null;
                }
                else {
                    if ((this.DatasetDescriptionSummaryField == null)) {
                        this.DatasetDescriptionSummaryField = XTypedList<DatasetDescriptionSummary>.Initialize(this, LinqToXsdTypeManager.Instance, value, DatasetDescriptionSummaryXName);
                    }
                    else {
                        XTypedServices.SetList<DatasetDescriptionSummary>(this.DatasetDescriptionSummaryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered set of references to other sources of
        ///          metadata describing the coverage offerings available from this
        ///          server.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
        /// </para>
        /// </summary>
        public virtual IList<OtherSource> OtherSource {
            get {
                if ((this.OtherSourceField == null)) {
                    this.OtherSourceField = new XTypedList<OtherSource>(this, LinqToXsdTypeManager.Instance, OtherSourceXName);
                }
                return this.OtherSourceField;
            }
            set {
                if ((value == null)) {
                    this.OtherSourceField = null;
                }
                else {
                    if ((this.OtherSourceField == null)) {
                        this.OtherSourceField = XTypedList<OtherSource>.Initialize(this, LinqToXsdTypeManager.Instance, value, OtherSourceXName);
                    }
                    else {
                        XTypedServices.SetList<OtherSource>(this.OtherSourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentsBaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DatasetDescriptionSummaryXName, typeof(DatasetDescriptionSummary));
            localElementDictionary.Add(OtherSourceXName, typeof(OtherSource));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Typical dataset metadata in typical Contents section of
    ///      an OWS service metadata (Capabilities) document. This type shall be
    ///      extended and/or restricted if needed for specific OWS use, to include
    ///      the specific Dataset description metadata needed.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
    /// </para>
    /// </summary>
    public partial class DatasetDescriptionSummaryBaseType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WGS84BoundingBoxXName = System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WGS84BoundingBox> WGS84BoundingBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundingBoxXName = System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<BoundingBox> BoundingBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<Metadata> MetadataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatasetDescriptionSummaryXName = System.Xml.Linq.XName.Get("DatasetDescriptionSummary", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DatasetDescriptionSummary> DatasetDescriptionSummaryField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatasetDescriptionSummaryBaseType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DatasetDescriptionSummaryBaseType(XElement xe) { return XTypedServices.ToXTypedElement<DatasetDescriptionSummaryBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DatasetDescriptionSummaryBaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(WGS84BoundingBoxXName), new NamedContentModelEntity(IdentifierXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")), new NamedContentModelEntity(DatasetDescriptionSummaryXName));
        }
        
        /// <summary>
        /// <para>
        /// Typical dataset metadata in typical Contents section of
        ///      an OWS service metadata (Capabilities) document. This type shall be
        ///      extended and/or restricted if needed for specific OWS use, to include
        ///      the specific Dataset description metadata needed.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public DatasetDescriptionSummaryBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more minimum bounding
        ///              rectangles surrounding coverage data, using the WGS 84 CRS with
        ///              decimal degrees and longitude before latitude. If no WGS 84
        ///              bounding box is recorded for a coverage, any such bounding boxes
        ///              recorded for a higher level in a hierarchy of datasets shall
        ///              apply to this coverage. If WGS 84 bounding box(es) are recorded
        ///              for a coverage, any such bounding boxes recorded for a higher
        ///              level in a hierarchy of datasets shall be ignored. For each
        ///              lowest-level coverage in a hierarchy, at least one applicable
        ///              WGS84BoundingBox shall be either recorded or inherited, to
        ///              simplify searching for datasets that might overlap a specified
        ///              region. If multiple WGS 84 bounding boxes are included, this
        ///              shall be interpreted as the union of the areas of these bounding
        ///              boxes.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<WGS84BoundingBox> WGS84BoundingBox {
            get {
                if ((this.WGS84BoundingBoxField == null)) {
                    this.WGS84BoundingBoxField = new XTypedList<WGS84BoundingBox>(this, LinqToXsdTypeManager.Instance, WGS84BoundingBoxXName);
                }
                return this.WGS84BoundingBoxField;
            }
            set {
                if ((value == null)) {
                    this.WGS84BoundingBoxField = null;
                }
                else {
                    if ((this.WGS84BoundingBoxField == null)) {
                        this.WGS84BoundingBoxField = XTypedList<WGS84BoundingBox>.Initialize(this, LinqToXsdTypeManager.Instance, value, WGS84BoundingBoxXName);
                    }
                    else {
                        XTypedServices.SetList<WGS84BoundingBox>(this.WGS84BoundingBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Unambiguous identifier or name of this coverage,
        ///              unique for this server.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual CodeType Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((CodeType)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more minimum bounding
        ///              rectangles surrounding coverage data, in AvailableCRSs. Zero or
        ///              more BoundingBoxes are allowed in addition to one or more
        ///              WGS84BoundingBoxes to allow more precise specification of the
        ///              Dataset area in AvailableCRSs. These Bounding Boxes shall not
        ///              use any CRS not listed as an AvailableCRS. However, an
        ///              AvailableCRS can be listed without a corresponding Bounding Box.
        ///              If no such bounding box is recorded for a coverage, any such
        ///              bounding boxes recorded for a higher level in a hierarchy of
        ///              datasets shall apply to this coverage. If such bounding box(es)
        ///              are recorded for a coverage, any such bounding boxes recorded
        ///              for a higher level in a hierarchy of datasets shall be ignored.
        ///              If multiple bounding boxes are included with the same CRS, this
        ///              shall be interpreted as the union of the areas of these bounding
        ///              boxes.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: BoundingBox, WGS84BoundingBox
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<BoundingBox> BoundingBox {
            get {
                if ((this.BoundingBoxField == null)) {
                    this.BoundingBoxField = new XTypedSubstitutedList<BoundingBox>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0"));
                }
                return this.BoundingBoxField;
            }
            set {
                if ((value == null)) {
                    this.BoundingBoxField = null;
                }
                else {
                    if ((this.BoundingBoxField == null)) {
                        this.BoundingBoxField = XTypedSubstitutedList<BoundingBox>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<BoundingBox>(this.BoundingBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///              about this dataset. A list of optional metadata elements for
        ///              this dataset description could be specified in the
        ///              Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedSubstitutedList<Metadata>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedSubstitutedList<Metadata>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<Metadata>(this.MetadataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Metadata describing zero or more unordered
        ///              subsidiary datasets available from this server.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<DatasetDescriptionSummary> DatasetDescriptionSummary {
            get {
                if ((this.DatasetDescriptionSummaryField == null)) {
                    this.DatasetDescriptionSummaryField = new XTypedList<DatasetDescriptionSummary>(this, LinqToXsdTypeManager.Instance, DatasetDescriptionSummaryXName);
                }
                return this.DatasetDescriptionSummaryField;
            }
            set {
                if ((value == null)) {
                    this.DatasetDescriptionSummaryField = null;
                }
                else {
                    if ((this.DatasetDescriptionSummaryField == null)) {
                        this.DatasetDescriptionSummaryField = XTypedList<DatasetDescriptionSummary>.Initialize(this, LinqToXsdTypeManager.Instance, value, DatasetDescriptionSummaryXName);
                    }
                    else {
                        XTypedServices.SetList<DatasetDescriptionSummary>(this.DatasetDescriptionSummaryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DatasetDescriptionSummaryBaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(WGS84BoundingBoxXName, typeof(WGS84BoundingBox));
            localElementDictionary.Add(IdentifierXName, typeof(CodeType));
            localElementDictionary.Add(BoundingBoxXName, typeof(BoundingBox));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
            localElementDictionary.Add(DatasetDescriptionSummaryXName, typeof(DatasetDescriptionSummary));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Base for a reference to a remote or local
    ///      resource.
    /// </para>
    /// <para>
    /// This type contains only a restricted and annotated set of
    ///      the attributes from the xlink:simpleAttrs attributeGroup.
    /// </para>
    /// </summary>
    public partial class AbstractReferenceBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string typeFixedValue = "simple";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractReferenceBaseType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AbstractReferenceBaseType(XElement xe) { return XTypedServices.ToXTypedElement<AbstractReferenceBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Base for a reference to a remote or local
        ///      resource.
        /// </para>
        /// <para>
        /// This type contains only a restricted and annotated set of
        ///      the attributes from the xlink:simpleAttrs attributeGroup.
        /// </para>
        /// </summary>
        public AbstractReferenceBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return typeFixedValue;
            }
            set {
                if (value.Equals(typeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, typeFixedValue);
                }
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a remote resource or local payload. A
        ///        remote resource is typically addressed by a URL. For a local payload
        ///        (such as a multipart mime message), the xlink:href must start with the
        ///        prefix cid:.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a resource that describes the role of this
        ///        reference. When no value is supplied, no particular role value is to
        ///        be inferred.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Describes the meaning of the referenced resource in a
        ///        human-readable fashion.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.actuateType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.actuateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AbstractReferenceBaseType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Complete reference to a remote or local resource,
    ///      allowing including metadata about that resource.
    /// </para>
    /// <para>
    /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
    /// </para>
    /// </summary>
    public partial class ReferenceType : global::OpenGis.Ows.AbstractReferenceBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstractXName = System.Xml.Linq.XName.Get("Abstract", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Abstract> AbstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<Metadata> MetadataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenceType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IdentifierXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(FormatXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote or local resource,
        ///      allowing including metadata about that resource.
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public ReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Optional unique identifier of the referenced
        ///              resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Abstract> Abstract {
            get {
                if ((this.AbstractField == null)) {
                    this.AbstractField = new XTypedList<Abstract>(this, LinqToXsdTypeManager.Instance, AbstractXName);
                }
                return this.AbstractField;
            }
            set {
                if ((value == null)) {
                    this.AbstractField = null;
                }
                else {
                    if ((this.AbstractField == null)) {
                        this.AbstractField = XTypedList<Abstract>.Initialize(this, LinqToXsdTypeManager.Instance, value, AbstractXName);
                    }
                    else {
                        XTypedServices.SetList<Abstract>(this.AbstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The format of the referenced resource. This
        ///              element is omitted when the mime type is indicated in the http
        ///              header of the reference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                XElement x = this.GetElement(FormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FormatXName, value, "Format", global::OpenGis.Ows.MimeType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///              about this resource. A list of optional metadata elements for
        ///              this ReferenceType could be specified in the Implementation
        ///              Specification for each use of this type in a specific
        ///              OWS.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedSubstitutedList<Metadata>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedSubstitutedList<Metadata>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<Metadata>(this.MetadataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(FormatXName, typeof(string));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Logical group of one or more references to remote and/or
    ///      local resources, allowing including metadata about that group. A Group
    ///      can be used instead of a Manifest that can only contain one
    ///      group.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, AbstractReferenceBase+)
    /// </para>
    /// </summary>
    public partial class ReferenceGroupType : global::OpenGis.Ows.BasicIdentificationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstractReferenceBaseXName = System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<AbstractReferenceBase> AbstractReferenceBaseField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenceGroupType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReferenceGroupType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReferenceGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("Reference", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("ServiceReference", "http://www.opengis.net/ows/2.0")));
        }
        
        /// <summary>
        /// <para>
        /// Logical group of one or more references to remote and/or
        ///      local resources, allowing including metadata about that group. A Group
        ///      can be used instead of a Manifest that can only contain one
        ///      group.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, AbstractReferenceBase+)
        /// </para>
        /// </summary>
        public ReferenceGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Substitution members: AbstractReferenceBase, Reference, ServiceReference
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, AbstractReferenceBase+)
        /// </para>
        /// </summary>
        public virtual IList<AbstractReferenceBase> AbstractReferenceBase {
            get {
                if ((this.AbstractReferenceBaseField == null)) {
                    this.AbstractReferenceBaseField = new XTypedSubstitutedList<AbstractReferenceBase>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("Reference", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("ServiceReference", "http://www.opengis.net/ows/2.0"));
                }
                return this.AbstractReferenceBaseField;
            }
            set {
                if ((value == null)) {
                    this.AbstractReferenceBaseField = null;
                }
                else {
                    if ((this.AbstractReferenceBaseField == null)) {
                        this.AbstractReferenceBaseField = XTypedSubstitutedList<AbstractReferenceBase>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("Reference", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("ServiceReference", "http://www.opengis.net/ows/2.0"));
                    }
                    else {
                        XTypedServices.SetList<AbstractReferenceBase>(this.AbstractReferenceBaseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReferenceGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
            localElementDictionary.Add(AbstractReferenceBaseXName, typeof(AbstractReferenceBase));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more groups of references to
    ///      remote and/or local resources.
    /// </para>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
    /// </para>
    /// </summary>
    public partial class ManifestType : global::OpenGis.Ows.BasicIdentificationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReferenceGroupXName = System.Xml.Linq.XName.Get("ReferenceGroup", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReferenceGroup> ReferenceGroupField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ManifestType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ManifestType(XElement xe) { return XTypedServices.ToXTypedElement<ManifestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ManifestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")), new NamedContentModelEntity(ReferenceGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
        /// </para>
        /// </summary>
        public ManifestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
        /// </para>
        /// </summary>
        public virtual IList<ReferenceGroup> ReferenceGroup {
            get {
                if ((this.ReferenceGroupField == null)) {
                    this.ReferenceGroupField = new XTypedList<ReferenceGroup>(this, LinqToXsdTypeManager.Instance, ReferenceGroupXName);
                }
                return this.ReferenceGroupField;
            }
            set {
                if ((value == null)) {
                    this.ReferenceGroupField = null;
                }
                else {
                    if ((this.ReferenceGroupField == null)) {
                        this.ReferenceGroupField = XTypedList<ReferenceGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReferenceGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ReferenceGroup>(this.ReferenceGroupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ManifestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
            localElementDictionary.Add(ReferenceGroupXName, typeof(ReferenceGroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Complete reference to a remote resource that needs to be
    ///      retrieved from an OWS using an XML-encoded operation request. This
    ///      element shall be used, within an InputData or Manifest element that is
    ///      used for input data, when that input data needs to be retrieved from
    ///      another web service using a XML-encoded OWS operation request. This
    ///      element shall not be used for local payload input data or for requesting
    ///      the resource from a web server using HTTP Get.
    /// </para>
    /// <para>
    /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
    /// </para>
    /// </summary>
    public partial class ServiceReferenceType : global::OpenGis.Ows.ReferenceType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequestMessageXName = System.Xml.Linq.XName.Get("RequestMessage", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequestMessageReferenceXName = System.Xml.Linq.XName.Get("RequestMessageReference", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceReferenceType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<ServiceReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceReferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IdentifierXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(FormatXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0")), new ChoiceContentModelEntity(new NamedContentModelEntity(RequestMessageXName), new NamedContentModelEntity(RequestMessageReferenceXName)));
        }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote resource that needs to be
        ///      retrieved from an OWS using an XML-encoded operation request. This
        ///      element shall be used, within an InputData or Manifest element that is
        ///      used for input data, when that input data needs to be retrieved from
        ///      another web service using a XML-encoded OWS operation request. This
        ///      element shall not be used for local payload input data or for requesting
        ///      the resource from a web server using HTTP Get.
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
        /// </para>
        /// </summary>
        public ServiceReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// The XML-encoded operation request message to be
        ///              sent to request this input data from another web server using
        ///              HTTP Post.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
        /// </para>
        /// </summary>
        public virtual XTypedElement RequestMessage {
            get {
                XElement x = this.GetElement(RequestMessageXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(RequestMessageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to the XML-encoded operation request
        ///              message to be sent to request this input data from another web
        ///              server using HTTP Post. The referenced message shall be attached
        ///              to the same message (using the cid scheme), or be accessible
        ///              using a URL.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
        /// </para>
        /// </summary>
        public virtual System.Uri RequestMessageReference {
            get {
                XElement x = this.GetElement(RequestMessageReferenceXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(RequestMessageReferenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceReferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
            localElementDictionary.Add(AbstractXName, typeof(Abstract));
            localElementDictionary.Add(FormatXName, typeof(string));
            localElementDictionary.Add(MetadataXName, typeof(Metadata));
            localElementDictionary.Add(RequestMessageXName, typeof(XTypedElement));
            localElementDictionary.Add(RequestMessageReferenceXName, typeof(System.Uri));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class AdditionalParametersBaseType : global::OpenGis.Ows.MetadataType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdditionalParametersBaseType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AdditionalParametersBaseType(XElement xe) { return XTypedServices.ToXTypedElement<AdditionalParametersBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdditionalParametersBaseType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdditionalParametersBaseType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AdditionalParameter, AdditionalParameter*)
    /// </para>
    /// </summary>
    public partial class AdditionalParametersType : global::OpenGis.Ows.AdditionalParametersBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName AdditionalParameterXName = System.Xml.Linq.XName.Get("AdditionalParameter", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdditionalParameter> AdditionalParameterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdditionalParametersType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AdditionalParametersType(XElement xe) { return XTypedServices.ToXTypedElement<AdditionalParametersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AdditionalParametersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdditionalParameterXName), new NamedContentModelEntity(AdditionalParameterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AdditionalParameter, AdditionalParameter*)
        /// </para>
        /// </summary>
        public AdditionalParametersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdditionalParameter, AdditionalParameter*)
        /// </para>
        /// </summary>
        public new virtual IList<AdditionalParameter> AdditionalParameter {
            get {
                if ((this.AdditionalParameterField == null)) {
                    this.AdditionalParameterField = new XTypedList<AdditionalParameter>(this, LinqToXsdTypeManager.Instance, AdditionalParameterXName);
                }
                return this.AdditionalParameterField;
            }
            set {
                if ((value == null)) {
                    this.AdditionalParameterField = null;
                }
                else {
                    if ((this.AdditionalParameterField == null)) {
                        this.AdditionalParameterField = XTypedList<AdditionalParameter>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdditionalParameterXName);
                    }
                    else {
                        XTypedServices.SetList<AdditionalParameter>(this.AdditionalParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdditionalParametersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdditionalParameterXName, typeof(AdditionalParameter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The value used (e.g. -255) to represent a nil value with
    ///      optional nilReason and codeSpace attributes.
    /// </para>
    /// </summary>
    public partial class NilValueType : global::OpenGis.Ows.CodeType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nilReasonXName = System.Xml.Linq.XName.Get("nilReason", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NilValueType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator NilValueType(XElement xe) { return XTypedServices.ToXTypedElement<NilValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value used (e.g. -255) to represent a nil value with
        ///      optional nilReason and codeSpace attributes.
        /// </para>
        /// </summary>
        public NilValueType() {
        }
        
        /// <summary>
        /// <para>
        /// An anyURI value which refers to a resource that
        ///            describes the reason for the nil value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri nilReason {
            get {
                XAttribute x = this.Attribute(nilReasonXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(nilReasonXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NilValueType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Text string with the language of the string identified as
    ///      recommended in the XML 1.0 W3C Recommendation, section
    ///      2.12.
    /// </para>
    /// </summary>
    public partial class LanguageStringType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LanguageStringType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator LanguageStringType(XElement xe) { return XTypedServices.ToXTypedElement<LanguageStringType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Text string with the language of the string identified as
        ///      recommended in the XML 1.0 W3C Recommendation, section
        ///      2.12.
        /// </para>
        /// </summary>
        public LanguageStringType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseUnionValue(x, lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, langXName, lang.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LanguageStringType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more commonly used or formalised
    ///      word(s) or phrase(s) used to describe the subject. When needed, the
    ///      optional "type" can name the type of the associated list of keywords
    ///      that shall all have the same type. Also when needed, the codeSpace
    ///      attribute of that "type" can reference the type name authority and/or
    ///      thesaurus. If the xml:lang attribute is not included in a Keyword
    ///      element, then no language is specified for that element unless specified
    ///      by another means. All Keyword elements in the same Keywords element that
    ///      share the same xml:lang attribute value represent different keywords in
    ///      that language.
    /// </para>
    /// <para>
    /// For OWS use, the optional thesaurusName element was
    ///      omitted as being complex information that could be referenced by the
    ///      codeSpace attribute of the Type element.
    /// </para>
    /// <para>
    /// Regular expression: (Keyword+, Type?)
    /// </para>
    /// </summary>
    public partial class KeywordsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeywordXName = System.Xml.Linq.XName.Get("Keyword", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LanguageStringType> KeywordField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KeywordsType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KeywordsType(XElement xe) { return XTypedServices.ToXTypedElement<KeywordsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeywordsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KeywordXName), new NamedContentModelEntity(TypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more commonly used or formalised
        ///      word(s) or phrase(s) used to describe the subject. When needed, the
        ///      optional "type" can name the type of the associated list of keywords
        ///      that shall all have the same type. Also when needed, the codeSpace
        ///      attribute of that "type" can reference the type name authority and/or
        ///      thesaurus. If the xml:lang attribute is not included in a Keyword
        ///      element, then no language is specified for that element unless specified
        ///      by another means. All Keyword elements in the same Keywords element that
        ///      share the same xml:lang attribute value represent different keywords in
        ///      that language.
        /// </para>
        /// <para>
        /// For OWS use, the optional thesaurusName element was
        ///      omitted as being complex information that could be referenced by the
        ///      codeSpace attribute of the Type element.
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+, Type?)
        /// </para>
        /// </summary>
        public KeywordsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+, Type?)
        /// </para>
        /// </summary>
        public virtual IList<LanguageStringType> Keyword {
            get {
                if ((this.KeywordField == null)) {
                    this.KeywordField = new XTypedList<LanguageStringType>(this, LinqToXsdTypeManager.Instance, KeywordXName);
                }
                return this.KeywordField;
            }
            set {
                if ((value == null)) {
                    this.KeywordField = null;
                }
                else {
                    if ((this.KeywordField == null)) {
                        this.KeywordField = XTypedList<LanguageStringType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KeywordXName);
                    }
                    else {
                        XTypedServices.SetList<LanguageStringType>(this.KeywordField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+, Type?)
        /// </para>
        /// </summary>
        public virtual CodeType Type {
            get {
                XElement x = this.GetElement(TypeXName);
                return ((CodeType)(x));
            }
            set {
                this.SetElement(TypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeywordsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KeywordXName, typeof(LanguageStringType));
            localElementDictionary.Add(TypeXName, typeof(CodeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Name or code with an (optional) authority. If the
    ///      codeSpace attribute is present, its value shall reference a dictionary,
    ///      thesaurus, or authority for the name or code, such as the organisation
    ///      who assigned the value, or the dictionary from which it is
    ///      taken.
    /// </para>
    /// <para>
    /// Type copied from basicTypes.xsd of GML 3 with
    ///      documentation edited, for possible use outside the ServiceIdentification
    ///      section of a service metadata document.
    /// </para>
    /// </summary>
    public partial class CodeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSpaceXName = System.Xml.Linq.XName.Get("codeSpace", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodeType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator CodeType(XElement xe) { return XTypedServices.ToXTypedElement<CodeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Name or code with an (optional) authority. If the
        ///      codeSpace attribute is present, its value shall reference a dictionary,
        ///      thesaurus, or authority for the name or code, such as the organisation
        ///      who assigned the value, or the dictionary from which it is
        ///      taken.
        /// </para>
        /// <para>
        /// Type copied from basicTypes.xsd of GML 3 with
        ///      documentation edited, for possible use outside the ServiceIdentification
        ///      section of a service metadata document.
        /// </para>
        /// </summary>
        public CodeType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri codeSpace {
            get {
                XAttribute x = this.Attribute(codeSpaceXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(codeSpaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Identification of, and means of communication with,
    ///      person responsible for the server. At least one of IndividualName,
    ///      OrganisationName, or PositionName shall be included.
    /// </para>
    /// <para>
    /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
    /// </para>
    /// </summary>
    public partial class ResponsiblePartyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndividualNameXName = System.Xml.Linq.XName.Get("IndividualName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganisationNameXName = System.Xml.Linq.XName.Get("OrganisationName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionNameXName = System.Xml.Linq.XName.Get("PositionName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactInfoXName = System.Xml.Linq.XName.Get("ContactInfo", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoleXName = System.Xml.Linq.XName.Get("Role", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResponsiblePartyType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ResponsiblePartyType(XElement xe) { return XTypedServices.ToXTypedElement<ResponsiblePartyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResponsiblePartyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IndividualNameXName), new NamedContentModelEntity(OrganisationNameXName), new NamedContentModelEntity(PositionNameXName), new NamedContentModelEntity(ContactInfoXName), new NamedContentModelEntity(RoleXName));
        }
        
        /// <summary>
        /// <para>
        /// Identification of, and means of communication with,
        ///      person responsible for the server. At least one of IndividualName,
        ///      OrganisationName, or PositionName shall be included.
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public ResponsiblePartyType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual IndividualName IndividualName {
            get {
                XElement x = this.GetElement(IndividualNameXName);
                return ((IndividualName)(x));
            }
            set {
                this.SetElement(IndividualNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual OrganisationName OrganisationName {
            get {
                XElement x = this.GetElement(OrganisationNameXName);
                return ((OrganisationName)(x));
            }
            set {
                this.SetElement(OrganisationNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual PositionName PositionName {
            get {
                XElement x = this.GetElement(PositionNameXName);
                return ((PositionName)(x));
            }
            set {
                this.SetElement(PositionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual ContactInfo ContactInfo {
            get {
                XElement x = this.GetElement(ContactInfoXName);
                return ((ContactInfo)(x));
            }
            set {
                this.SetElement(ContactInfoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual Role Role {
            get {
                XElement x = this.GetElement(RoleXName);
                return ((Role)(x));
            }
            set {
                this.SetElement(RoleXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResponsiblePartyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IndividualNameXName, typeof(IndividualName));
            localElementDictionary.Add(OrganisationNameXName, typeof(OrganisationName));
            localElementDictionary.Add(PositionNameXName, typeof(PositionName));
            localElementDictionary.Add(ContactInfoXName, typeof(ContactInfo));
            localElementDictionary.Add(RoleXName, typeof(Role));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Identification of, and means of communication with,
    ///      person responsible for the server.
    /// </para>
    /// <para>
    /// For OWS use in the ServiceProvider section of a service
    ///      metadata document, the optional organizationName element was removed,
    ///      since this type is always used with the ProviderName element which
    ///      provides that information. The mandatory "role" element was changed to
    ///      optional, since no clear use of this information is known in the
    ///      ServiceProvider section.
    /// </para>
    /// <para>
    /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
    /// </para>
    /// </summary>
    public partial class ResponsiblePartySubsetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndividualNameXName = System.Xml.Linq.XName.Get("IndividualName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionNameXName = System.Xml.Linq.XName.Get("PositionName", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactInfoXName = System.Xml.Linq.XName.Get("ContactInfo", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoleXName = System.Xml.Linq.XName.Get("Role", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResponsiblePartySubsetType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ResponsiblePartySubsetType(XElement xe) { return XTypedServices.ToXTypedElement<ResponsiblePartySubsetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResponsiblePartySubsetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IndividualNameXName), new NamedContentModelEntity(PositionNameXName), new NamedContentModelEntity(ContactInfoXName), new NamedContentModelEntity(RoleXName));
        }
        
        /// <summary>
        /// <para>
        /// Identification of, and means of communication with,
        ///      person responsible for the server.
        /// </para>
        /// <para>
        /// For OWS use in the ServiceProvider section of a service
        ///      metadata document, the optional organizationName element was removed,
        ///      since this type is always used with the ProviderName element which
        ///      provides that information. The mandatory "role" element was changed to
        ///      optional, since no clear use of this information is known in the
        ///      ServiceProvider section.
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
        /// </para>
        /// </summary>
        public ResponsiblePartySubsetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
        /// </para>
        /// </summary>
        public virtual IndividualName IndividualName {
            get {
                XElement x = this.GetElement(IndividualNameXName);
                return ((IndividualName)(x));
            }
            set {
                this.SetElement(IndividualNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
        /// </para>
        /// </summary>
        public virtual PositionName PositionName {
            get {
                XElement x = this.GetElement(PositionNameXName);
                return ((PositionName)(x));
            }
            set {
                this.SetElement(PositionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
        /// </para>
        /// </summary>
        public virtual ContactInfo ContactInfo {
            get {
                XElement x = this.GetElement(ContactInfoXName);
                return ((ContactInfo)(x));
            }
            set {
                this.SetElement(ContactInfoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, PositionName?, ContactInfo?, Role?)
        /// </para>
        /// </summary>
        public virtual Role Role {
            get {
                XElement x = this.GetElement(RoleXName);
                return ((Role)(x));
            }
            set {
                this.SetElement(RoleXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResponsiblePartySubsetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IndividualNameXName, typeof(IndividualName));
            localElementDictionary.Add(PositionNameXName, typeof(PositionName));
            localElementDictionary.Add(ContactInfoXName, typeof(ContactInfo));
            localElementDictionary.Add(RoleXName, typeof(Role));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information required to enable contact with the
    ///      responsible person and/or organization.
    /// </para>
    /// <para>
    /// For OWS use in the service metadata document, the
    ///      optional hoursOfService and contactInstructions elements were retained,
    ///      as possibly being useful in the ServiceProvider section.
    /// </para>
    /// <para>
    /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PhoneXName = System.Xml.Linq.XName.Get("Phone", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddressXName = System.Xml.Linq.XName.Get("Address", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OnlineResourceXName = System.Xml.Linq.XName.Get("OnlineResource", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoursOfServiceXName = System.Xml.Linq.XName.Get("HoursOfService", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactInstructionsXName = System.Xml.Linq.XName.Get("ContactInstructions", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PhoneXName), new NamedContentModelEntity(AddressXName), new NamedContentModelEntity(OnlineResourceXName), new NamedContentModelEntity(HoursOfServiceXName), new NamedContentModelEntity(ContactInstructionsXName));
        }
        
        /// <summary>
        /// <para>
        /// Information required to enable contact with the
        ///      responsible person and/or organization.
        /// </para>
        /// <para>
        /// For OWS use in the service metadata document, the
        ///      optional hoursOfService and contactInstructions elements were retained,
        ///      as possibly being useful in the ServiceProvider section.
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Telephone numbers at which the organization or
        ///          individual may be contacted.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual TelephoneType Phone {
            get {
                XElement x = this.GetElement(PhoneXName);
                return ((TelephoneType)(x));
            }
            set {
                this.SetElement(PhoneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Physical and email address at which the organization
        ///          or individual may be contacted.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual AddressType Address {
            get {
                XElement x = this.GetElement(AddressXName);
                return ((AddressType)(x));
            }
            set {
                this.SetElement(AddressXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// On-line information that can be used to contact the
        ///          individual or organization. OWS specifics: The xlink:href attribute
        ///          in the xlink:simpleAttrs attribute group shall be used to reference
        ///          this resource. Whenever practical, the xlink:href attribute with
        ///          type anyURI should be a URL from which more contact information can
        ///          be electronically retrieved. The xlink:title attribute with type
        ///          "string" can be used to name this set of information. The other
        ///          attributes in the xlink:simpleAttrs attribute group should not be
        ///          used.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual OnlineResourceType OnlineResource {
            get {
                XElement x = this.GetElement(OnlineResourceXName);
                return ((OnlineResourceType)(x));
            }
            set {
                this.SetElement(OnlineResourceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Time period (including time zone) when individuals
        ///          can contact the organization or individual.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual string HoursOfService {
            get {
                XElement x = this.GetElement(HoursOfServiceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(HoursOfServiceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Supplemental instructions on how or when to contact
        ///          the individual or organization.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual string ContactInstructions {
            get {
                XElement x = this.GetElement(ContactInstructionsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ContactInstructionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PhoneXName, typeof(TelephoneType));
            localElementDictionary.Add(AddressXName, typeof(AddressType));
            localElementDictionary.Add(OnlineResourceXName, typeof(OnlineResourceType));
            localElementDictionary.Add(HoursOfServiceXName, typeof(string));
            localElementDictionary.Add(ContactInstructionsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference to on-line resource from which data can be
    ///      obtained.
    /// </para>
    /// <para>
    /// For OWS use in the service metadata document, the
    ///      CI_OnlineResource class was XML encoded as the attributeGroup
    ///      "xlink:simpleAttrs", as used in GML.
    /// </para>
    /// </summary>
    public partial class OnlineResourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OnlineResourceType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator OnlineResourceType(XElement xe) { return XTypedServices.ToXTypedElement<OnlineResourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Reference to on-line resource from which data can be
        ///      obtained.
        /// </para>
        /// <para>
        /// For OWS use in the service metadata document, the
        ///      CI_OnlineResource class was XML encoded as the attributeGroup
        ///      "xlink:simpleAttrs", as used in GML.
        /// </para>
        /// </summary>
        public OnlineResourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.actuateType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.actuateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OnlineResourceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Telephone numbers for contacting the responsible
    ///      individual or organization.
    /// </para>
    /// <para>
    /// Regular expression: (Voice*, Facsimile*)
    /// </para>
    /// </summary>
    public partial class TelephoneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VoiceXName = System.Xml.Linq.XName.Get("Voice", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> VoiceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FacsimileXName = System.Xml.Linq.XName.Get("Facsimile", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FacsimileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TelephoneType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TelephoneType(XElement xe) { return XTypedServices.ToXTypedElement<TelephoneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TelephoneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VoiceXName), new NamedContentModelEntity(FacsimileXName));
        }
        
        /// <summary>
        /// <para>
        /// Telephone numbers for contacting the responsible
        ///      individual or organization.
        /// </para>
        /// <para>
        /// Regular expression: (Voice*, Facsimile*)
        /// </para>
        /// </summary>
        public TelephoneType() {
        }
        
        /// <summary>
        /// <para>
        /// Telephone number by which individuals can speak to
        ///          the responsible organization or individual.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Voice*, Facsimile*)
        /// </para>
        /// </summary>
        public virtual IList<string> Voice {
            get {
                if ((this.VoiceField == null)) {
                    this.VoiceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, VoiceXName);
                }
                return this.VoiceField;
            }
            set {
                if ((value == null)) {
                    this.VoiceField = null;
                }
                else {
                    if ((this.VoiceField == null)) {
                        this.VoiceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, VoiceXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.VoiceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Telephone number of a facsimile machine for the
        ///          responsible organization or individual.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Voice*, Facsimile*)
        /// </para>
        /// </summary>
        public virtual IList<string> Facsimile {
            get {
                if ((this.FacsimileField == null)) {
                    this.FacsimileField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, FacsimileXName);
                }
                return this.FacsimileField;
            }
            set {
                if ((value == null)) {
                    this.FacsimileField = null;
                }
                else {
                    if ((this.FacsimileField == null)) {
                        this.FacsimileField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, FacsimileXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FacsimileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TelephoneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VoiceXName, typeof(string));
            localElementDictionary.Add(FacsimileXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Location of the responsible individual or
    ///      organization.
    /// </para>
    /// <para>
    /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
    /// </para>
    /// </summary>
    public partial class AddressType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeliveryPointXName = System.Xml.Linq.XName.Get("DeliveryPoint", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DeliveryPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CityXName = System.Xml.Linq.XName.Get("City", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdministrativeAreaXName = System.Xml.Linq.XName.Get("AdministrativeArea", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PostalCodeXName = System.Xml.Linq.XName.Get("PostalCode", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CountryXName = System.Xml.Linq.XName.Get("Country", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElectronicMailAddressXName = System.Xml.Linq.XName.Get("ElectronicMailAddress", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> ElectronicMailAddressField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AddressType", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AddressType(XElement xe) { return XTypedServices.ToXTypedElement<AddressType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AddressType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeliveryPointXName), new NamedContentModelEntity(CityXName), new NamedContentModelEntity(AdministrativeAreaXName), new NamedContentModelEntity(PostalCodeXName), new NamedContentModelEntity(CountryXName), new NamedContentModelEntity(ElectronicMailAddressXName));
        }
        
        /// <summary>
        /// <para>
        /// Location of the responsible individual or
        ///      organization.
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public AddressType() {
        }
        
        /// <summary>
        /// <para>
        /// Address line for the location.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual IList<string> DeliveryPoint {
            get {
                if ((this.DeliveryPointField == null)) {
                    this.DeliveryPointField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DeliveryPointXName);
                }
                return this.DeliveryPointField;
            }
            set {
                if ((value == null)) {
                    this.DeliveryPointField = null;
                }
                else {
                    if ((this.DeliveryPointField == null)) {
                        this.DeliveryPointField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DeliveryPointXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DeliveryPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// City of the location.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual string City {
            get {
                XElement x = this.GetElement(CityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(CityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// State or province of the location.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual string AdministrativeArea {
            get {
                XElement x = this.GetElement(AdministrativeAreaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(AdministrativeAreaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// ZIP or other postal code.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual string PostalCode {
            get {
                XElement x = this.GetElement(PostalCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(PostalCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Country of the physical address.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual string Country {
            get {
                XElement x = this.GetElement(CountryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(CountryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Address of the electronic mailbox of the responsible
        ///          organization or individual.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DeliveryPoint*, City?, AdministrativeArea?, PostalCode?, Country?, ElectronicMailAddress*)
        /// </para>
        /// </summary>
        public virtual IList<string> ElectronicMailAddress {
            get {
                if ((this.ElectronicMailAddressField == null)) {
                    this.ElectronicMailAddressField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ElectronicMailAddressXName);
                }
                return this.ElectronicMailAddressField;
            }
            set {
                if ((value == null)) {
                    this.ElectronicMailAddressField = null;
                }
                else {
                    if ((this.ElectronicMailAddressField == null)) {
                        this.ElectronicMailAddressField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ElectronicMailAddressXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.ElectronicMailAddressField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AddressType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DeliveryPointXName, typeof(string));
            localElementDictionary.Add(CityXName, typeof(string));
            localElementDictionary.Add(AdministrativeAreaXName, typeof(string));
            localElementDictionary.Add(PostalCodeXName, typeof(string));
            localElementDictionary.Add(CountryXName, typeof(string));
            localElementDictionary.Add(ElectronicMailAddressXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// This element either references or contains more metadata
    ///      about the element that includes this element. To reference metadata
    ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
    ///      shall be included. Either at least one of the attributes in
    ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
    ///      be included, but not both. An Implementation Specification can restrict
    ///      the contents of this element to always be a reference or always contain
    ///      metadata. (Informative: This element was adapted from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class Metadata : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Metadata(XElement xe) {  return (Metadata)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected Metadata(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        /// This element either references or contains more metadata
        ///      about the element that includes this element. To reference metadata
        ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
        ///      shall be included. Either at least one of the attributes in
        ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
        ///      be included, but not both. An Implementation Specification can restrict
        ///      the contents of this element to always be a reference or always contain
        ///      metadata. (Informative: This element was adapted from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public Metadata() {
            SetInnerType(new MetadataType());
        }
        
        /// <summary>
        /// <para>
        /// This element either references or contains more metadata
        ///      about the element that includes this element. To reference metadata
        ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
        ///      shall be included. Either at least one of the attributes in
        ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
        ///      be included, but not both. An Implementation Specification can restrict
        ///      the contents of this element to always be a reference or always contain
        ///      metadata. (Informative: This element was adapted from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public Metadata(MetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual MetadataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: AbstractMetaData, AdditionalParameter
        /// </para>
        /// <para>
        /// Regular expression: (AbstractMetaData?)
        /// </para>
        /// </summary>
        public virtual AbstractMetaData AbstractMetaData {
            get {
                return this.ContentField.AbstractMetaData;
            }
            set {
                this.ContentField.AbstractMetaData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType? type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                return this.ContentField.href;
            }
            set {
                this.ContentField.href = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                return this.ContentField.arcrole;
            }
            set {
                this.ContentField.arcrole = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                return this.ContentField.show;
            }
            set {
                this.ContentField.show = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                return this.ContentField.actuate;
            }
            set {
                this.ContentField.actuate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional reference to the aspect of the element which
        ///        includes this "metadata" element that this metadata provides more
        ///        information about.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri about {
            get {
                return this.ContentField.about;
            }
            set {
                this.ContentField.about = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Metadata Load(string xmlFile) {
            return ((Metadata)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static Metadata Load(System.IO.TextReader xmlFile) {
            return ((Metadata)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static Metadata Parse(string xml) {
            return ((Metadata)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new Metadata(((MetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MetadataType ContentField) {
            this.ContentField = ((MetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(MetadataType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded minimum rectangular bounding box (or region)
    ///      parameter, surrounding all the associated data.
    /// </para>
    /// <para>
    /// This type is adapted from the EnvelopeType of GML 3.1,
    ///      with modified contents and documentation for encoding a MINIMUM size box
    ///      SURROUNDING all associated data.
    /// </para>
    /// </summary>
    public partial class BoundingBox : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BoundingBoxType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator BoundingBox(XElement xe) {  return (BoundingBox)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected BoundingBox(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data.
        /// </para>
        /// <para>
        /// This type is adapted from the EnvelopeType of GML 3.1,
        ///      with modified contents and documentation for encoding a MINIMUM size box
        ///      SURROUNDING all associated data.
        /// </para>
        /// </summary>
        public BoundingBox() {
            SetInnerType(new BoundingBoxType());
        }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data.
        /// </para>
        /// <para>
        /// This type is adapted from the EnvelopeType of GML 3.1,
        ///      with modified contents and documentation for encoding a MINIMUM size box
        ///      SURROUNDING all associated data.
        /// </para>
        /// </summary>
        public BoundingBox(BoundingBoxType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual BoundingBoxType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Position of the bounding box corner at which the
        ///          value of each coordinate normally is the algebraic minimum within
        ///          this bounding box. In some cases, this position is normally
        ///          displayed at the top, such as the top left for some image
        ///          coordinates. For more information, see Subclauses 10.2.5 and
        ///          C.13.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LowerCorner, UpperCorner)
        /// </para>
        /// </summary>
        public virtual IList<double> LowerCorner {
            get {
                return this.ContentField.LowerCorner;
            }
            set {
                this.ContentField.LowerCorner = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Position of the bounding box corner at which the
        ///          value of each coordinate normally is the algebraic maximum within
        ///          this bounding box. In some cases, this position is normally
        ///          displayed at the bottom, such as the bottom right for some image
        ///          coordinates. For more information, see Subclauses 10.2.5 and
        ///          C.13.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LowerCorner, UpperCorner)
        /// </para>
        /// </summary>
        public virtual IList<double> UpperCorner {
            get {
                return this.ContentField.UpperCorner;
            }
            set {
                this.ContentField.UpperCorner = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Usually references the definition of a CRS, as
        ///        specified in [OGC Topic 2]. Such a CRS definition can be XML encoded
        ///        using the gml:CoordinateReferenceSystemType in [GML 3.1]. For well
        ///        known references, it is not required that a CRS definition exist at
        ///        the location the URI points to. If no anyURI value is included, the
        ///        applicable CRS must be either: a) Specified outside the bounding box,
        ///        but inside a data structure that includes this bounding box, as
        ///        specified for a specific OWS use of this bounding box type. b) Fixed
        ///        and specified in the Implementation Specification for a specific OWS
        ///        use of the bounding box type.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri crs {
            get {
                return this.ContentField.crs;
            }
            set {
                this.ContentField.crs = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of dimensions in this CRS (the length of a
        ///        coordinate sequence in this use of the PositionType). This number is
        ///        specified by the CRS definition, but can also be specified
        ///        here.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? dimensions {
            get {
                return this.ContentField.dimensions;
            }
            set {
                this.ContentField.dimensions = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BoundingBox Load(string xmlFile) {
            return ((BoundingBox)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static BoundingBox Load(System.IO.TextReader xmlFile) {
            return ((BoundingBox)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static BoundingBox Parse(string xml) {
            return ((BoundingBox)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new BoundingBox(((BoundingBoxType)(this.Content.Clone())));
        }
        
        private void SetInnerType(BoundingBoxType ContentField) {
            this.ContentField = ((BoundingBoxType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(BoundingBoxType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded minimum rectangular bounding box (or region)
    ///      parameter, surrounding all the associated data. This box is specialized
    ///      for use with the 2D WGS 84 coordinate reference system with decimal
    ///      values of longitude and latitude.
    /// </para>
    /// <para>
    /// This type is adapted from the general BoundingBoxType,
    ///      with modified contents and documentation for use with the 2D WGS 84
    ///      coordinate reference system.
    /// </para>
    /// </summary>
    public partial class WGS84BoundingBox : global::OpenGis.Ows.BoundingBox, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WGS84BoundingBoxType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator WGS84BoundingBox(XElement xe) { return XTypedServices.ToXTypedElement<WGS84BoundingBox, WGS84BoundingBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data. This box is specialized
        ///      for use with the 2D WGS 84 coordinate reference system with decimal
        ///      values of longitude and latitude.
        /// </para>
        /// <para>
        /// This type is adapted from the general BoundingBoxType,
        ///      with modified contents and documentation for use with the 2D WGS 84
        ///      coordinate reference system.
        /// </para>
        /// </summary>
        public WGS84BoundingBox() : 
                base(true) {
            SetInnerType(new WGS84BoundingBoxType());
        }
        
        /// <summary>
        /// <para>
        /// XML encoded minimum rectangular bounding box (or region)
        ///      parameter, surrounding all the associated data. This box is specialized
        ///      for use with the 2D WGS 84 coordinate reference system with decimal
        ///      values of longitude and latitude.
        /// </para>
        /// <para>
        /// This type is adapted from the general BoundingBoxType,
        ///      with modified contents and documentation for use with the 2D WGS 84
        ///      coordinate reference system.
        /// </para>
        /// </summary>
        public WGS84BoundingBox(WGS84BoundingBoxType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual WGS84BoundingBoxType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static WGS84BoundingBox Load(string xmlFile) {
            return XTypedServices.Load<WGS84BoundingBox, WGS84BoundingBoxType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static WGS84BoundingBox Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<WGS84BoundingBox, WGS84BoundingBoxType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static WGS84BoundingBox Parse(string xml) {
            return XTypedServices.Parse<WGS84BoundingBox, WGS84BoundingBoxType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new WGS84BoundingBox(((WGS84BoundingBoxType)(this.Content.Clone())));
        }
        
        private void SetInnerType(WGS84BoundingBoxType ContentField) {
            this.ContentField = ((WGS84BoundingBoxType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Name or code with an (optional) authority. If the
    ///      codeSpace attribute is present, its value shall reference a dictionary,
    ///      thesaurus, or authority for the name or code, such as the organisation
    ///      who assigned the value, or the dictionary from which it is
    ///      taken.
    /// </para>
    /// <para>
    /// Type copied from basicTypes.xsd of GML 3 with
    ///      documentation edited, for possible use outside the ServiceIdentification
    ///      section of a service metadata document.
    /// </para>
    /// </summary>
    public partial class Identifier : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CodeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Identifier(XElement xe) { return XTypedServices.ToXTypedElement<Identifier, CodeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Name or code with an (optional) authority. If the
        ///      codeSpace attribute is present, its value shall reference a dictionary,
        ///      thesaurus, or authority for the name or code, such as the organisation
        ///      who assigned the value, or the dictionary from which it is
        ///      taken.
        /// </para>
        /// <para>
        /// Type copied from basicTypes.xsd of GML 3 with
        ///      documentation edited, for possible use outside the ServiceIdentification
        ///      section of a service metadata document.
        /// </para>
        /// </summary>
        public Identifier() {
            SetInnerType(new CodeType());
        }
        
        /// <summary>
        /// <para>
        /// Name or code with an (optional) authority. If the
        ///      codeSpace attribute is present, its value shall reference a dictionary,
        ///      thesaurus, or authority for the name or code, such as the organisation
        ///      who assigned the value, or the dictionary from which it is
        ///      taken.
        /// </para>
        /// <para>
        /// Type copied from basicTypes.xsd of GML 3 with
        ///      documentation edited, for possible use outside the ServiceIdentification
        ///      section of a service metadata document.
        /// </para>
        /// </summary>
        public Identifier(CodeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual CodeType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri codeSpace {
            get {
                return this.ContentField.codeSpace;
            }
            set {
                this.ContentField.codeSpace = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Identifier Load(string xmlFile) {
            return XTypedServices.Load<Identifier, CodeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Identifier Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Identifier, CodeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Identifier Parse(string xml) {
            return XTypedServices.Parse<Identifier, CodeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Identifier(((CodeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CodeType ContentField) {
            this.ContentField = ((CodeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded identifier of a standard MIME type, possibly
    ///      a parameterized MIME type.
    /// </para>
    /// </summary>
    public partial class OutputFormat : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutputFormat", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator OutputFormat(XElement xe) { return XTypedServices.ToXTypedElement<OutputFormat>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// XML encoded identifier of a standard MIME type, possibly
        ///      a parameterized MIME type.
        /// </para>
        /// </summary>
        public OutputFormat() {
        }
        
        /// <summary>
        /// <para>
        /// XML encoded identifier of a standard MIME type, possibly
        ///      a parameterized MIME type.
        /// </para>
        /// </summary>
        public OutputFormat(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OpenGis.Ows.MimeType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OutputFormat Load(string xmlFile) {
            return XTypedServices.Load<OutputFormat>(xmlFile);
        }
        
        public static OutputFormat Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OutputFormat>(xmlFile);
        }
        
        public static OutputFormat Parse(string xml) {
            return XTypedServices.Parse<OutputFormat>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OutputFormat>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AvailableCRS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AvailableCRS(XElement xe) {  return (AvailableCRS)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AvailableCRS() {
        }
        
        public AvailableCRS(System.Uri content) {
            this.TypedValue = content;
        }
        
        public virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AvailableCRS Load(string xmlFile) {
            return ((AvailableCRS)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AvailableCRS Load(System.IO.TextReader xmlFile) {
            return ((AvailableCRS)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AvailableCRS Parse(string xml) {
            return ((AvailableCRS)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AvailableCRS>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SupportedCRS : global::OpenGis.Ows.AvailableCRS, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SupportedCRS", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator SupportedCRS(XElement xe) { return XTypedServices.ToXTypedElement<SupportedCRS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SupportedCRS() {
        }
        
        public SupportedCRS(System.Uri content) {
            this.TypedValue = content;
        }
        
        public new virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static SupportedCRS Load(string xmlFile) {
            return XTypedServices.Load<SupportedCRS>(xmlFile);
        }
        
        public static SupportedCRS Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SupportedCRS>(xmlFile);
        }
        
        public new static SupportedCRS Parse(string xml) {
            return XTypedServices.Parse<SupportedCRS>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SupportedCRS>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AccessConstraints : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AccessConstraints", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AccessConstraints(XElement xe) { return XTypedServices.ToXTypedElement<AccessConstraints>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AccessConstraints() {
        }
        
        public AccessConstraints(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AccessConstraints Load(string xmlFile) {
            return XTypedServices.Load<AccessConstraints>(xmlFile);
        }
        
        public static AccessConstraints Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AccessConstraints>(xmlFile);
        }
        
        public static AccessConstraints Parse(string xml) {
            return XTypedServices.Parse<AccessConstraints>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AccessConstraints>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Fees : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Fees", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Fees(XElement xe) { return XTypedServices.ToXTypedElement<Fees>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Fees() {
        }
        
        public Fees(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Fees Load(string xmlFile) {
            return XTypedServices.Load<Fees>(xmlFile);
        }
        
        public static Fees Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Fees>(xmlFile);
        }
        
        public static Fees Parse(string xml) {
            return XTypedServices.Parse<Fees>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Fees>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Language : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Language", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Language(XElement xe) { return XTypedServices.ToXTypedElement<Language>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Language() {
        }
        
        public Language(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Language Load(string xmlFile) {
            return XTypedServices.Load<Language>(xmlFile);
        }
        
        public static Language Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Language>(xmlFile);
        }
        
        public static Language Parse(string xml) {
            return XTypedServices.Parse<Language>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Language>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class Value : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Value", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Value(XElement xe) { return XTypedServices.ToXTypedElement<Value, ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public Value() {
            SetInnerType(new ValueType());
        }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public Value(ValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ValueType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Value Load(string xmlFile) {
            return XTypedServices.Load<Value, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Value Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Value, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Value Parse(string xml) {
            return XTypedServices.Parse<Value, ValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Value(((ValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ValueType ContentField) {
            this.ContentField = ((ValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class DefaultValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DefaultValue", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator DefaultValue(XElement xe) { return XTypedServices.ToXTypedElement<DefaultValue, ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public DefaultValue() {
            SetInnerType(new ValueType());
        }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public DefaultValue(ValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ValueType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DefaultValue Load(string xmlFile) {
            return XTypedServices.Load<DefaultValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DefaultValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DefaultValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DefaultValue Parse(string xml) {
            return XTypedServices.Parse<DefaultValue, ValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DefaultValue(((ValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ValueType ContentField) {
            this.ContentField = ((ValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A range of values of a numeric parameter. This range can
    ///      be continuous or discrete, defined by a fixed spacing between adjacent
    ///      valid values. If the MinimumValue or MaximumValue is not included, there
    ///      is no value limit in that direction. Inclusion of the specified minimum
    ///      and maximum values in the range shall be defined by the
    ///      rangeClosure.
    /// </para>
    /// </summary>
    public partial class Range : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private RangeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Range", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Range(XElement xe) { return XTypedServices.ToXTypedElement<Range, RangeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A range of values of a numeric parameter. This range can
        ///      be continuous or discrete, defined by a fixed spacing between adjacent
        ///      valid values. If the MinimumValue or MaximumValue is not included, there
        ///      is no value limit in that direction. Inclusion of the specified minimum
        ///      and maximum values in the range shall be defined by the
        ///      rangeClosure.
        /// </para>
        /// </summary>
        public Range() {
            SetInnerType(new RangeType());
        }
        
        /// <summary>
        /// <para>
        /// A range of values of a numeric parameter. This range can
        ///      be continuous or discrete, defined by a fixed spacing between adjacent
        ///      valid values. If the MinimumValue or MaximumValue is not included, there
        ///      is no value limit in that direction. Inclusion of the specified minimum
        ///      and maximum values in the range shall be defined by the
        ///      rangeClosure.
        /// </para>
        /// </summary>
        public Range(RangeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual RangeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual MinimumValue MinimumValue {
            get {
                return this.ContentField.MinimumValue;
            }
            set {
                this.ContentField.MinimumValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual MaximumValue MaximumValue {
            get {
                return this.ContentField.MaximumValue;
            }
            set {
                this.ContentField.MaximumValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Shall be included when the allowed values are NOT
        ///          continuous in this range. Shall not be included when the allowed
        ///          values are continuous in this range.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MinimumValue?, MaximumValue?, Spacing?)
        /// </para>
        /// </summary>
        public virtual Spacing Spacing {
            get {
                return this.ContentField.Spacing;
            }
            set {
                this.ContentField.Spacing = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Shall be included unless the default value
        ///        applies.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> rangeClosure {
            get {
                return this.ContentField.rangeClosure;
            }
            set {
                this.ContentField.rangeClosure = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Range Load(string xmlFile) {
            return XTypedServices.Load<Range, RangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Range Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Range, RangeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Range Parse(string xml) {
            return XTypedServices.Parse<Range, RangeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Range(((RangeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(RangeType ContentField) {
            this.ContentField = ((RangeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class MinimumValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MinimumValue", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator MinimumValue(XElement xe) { return XTypedServices.ToXTypedElement<MinimumValue, ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public MinimumValue() {
            SetInnerType(new ValueType());
        }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public MinimumValue(ValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ValueType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MinimumValue Load(string xmlFile) {
            return XTypedServices.Load<MinimumValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MinimumValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MinimumValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MinimumValue Parse(string xml) {
            return XTypedServices.Parse<MinimumValue, ValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MinimumValue(((ValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ValueType ContentField) {
            this.ContentField = ((ValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class MaximumValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MaximumValue", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator MaximumValue(XElement xe) { return XTypedServices.ToXTypedElement<MaximumValue, ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public MaximumValue() {
            SetInnerType(new ValueType());
        }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public MaximumValue(ValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ValueType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MaximumValue Load(string xmlFile) {
            return XTypedServices.Load<MaximumValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MaximumValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MaximumValue, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MaximumValue Parse(string xml) {
            return XTypedServices.Parse<MaximumValue, ValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MaximumValue(((ValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ValueType ContentField) {
            this.ContentField = ((ValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single value, encoded as a string. This type can be
    ///      used for one value, for a spacing between allowed values, or for the
    ///      default value of a parameter.
    /// </para>
    /// </summary>
    public partial class Spacing : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Spacing", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Spacing(XElement xe) { return XTypedServices.ToXTypedElement<Spacing, ValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public Spacing() {
            SetInnerType(new ValueType());
        }
        
        /// <summary>
        /// <para>
        /// A single value, encoded as a string. This type can be
        ///      used for one value, for a spacing between allowed values, or for the
        ///      default value of a parameter.
        /// </para>
        /// </summary>
        public Spacing(ValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ValueType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Spacing Load(string xmlFile) {
            return XTypedServices.Load<Spacing, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Spacing Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Spacing, ValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Spacing Parse(string xml) {
            return XTypedServices.Parse<Spacing, ValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Spacing(((ValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ValueType ContentField) {
            this.ContentField = ((ValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// References metadata about a quantity, and provides a name
    ///      for this metadata. (Informative: This element was simplified from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class Meaning : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DomainMetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Meaning", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Meaning(XElement xe) { return XTypedServices.ToXTypedElement<Meaning, DomainMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public Meaning() {
            SetInnerType(new DomainMetadataType());
        }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public Meaning(DomainMetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DomainMetadataType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                return this.ContentField.reference;
            }
            set {
                this.ContentField.reference = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Meaning Load(string xmlFile) {
            return XTypedServices.Load<Meaning, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Meaning Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Meaning, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Meaning Parse(string xml) {
            return XTypedServices.Parse<Meaning, DomainMetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Meaning(((DomainMetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DomainMetadataType ContentField) {
            this.ContentField = ((DomainMetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// References metadata about a quantity, and provides a name
    ///      for this metadata. (Informative: This element was simplified from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class DataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DomainMetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataType", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator DataType(XElement xe) { return XTypedServices.ToXTypedElement<DataType, DomainMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public DataType() {
            SetInnerType(new DomainMetadataType());
        }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public DataType(DomainMetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DomainMetadataType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                return this.ContentField.reference;
            }
            set {
                this.ContentField.reference = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataType Load(string xmlFile) {
            return XTypedServices.Load<DataType, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataType, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DataType Parse(string xml) {
            return XTypedServices.Parse<DataType, DomainMetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DataType(((DomainMetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DomainMetadataType ContentField) {
            this.ContentField = ((DomainMetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// References metadata about a quantity, and provides a name
    ///      for this metadata. (Informative: This element was simplified from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class ReferenceSystem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DomainMetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenceSystem", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ReferenceSystem(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceSystem, DomainMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public ReferenceSystem() {
            SetInnerType(new DomainMetadataType());
        }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public ReferenceSystem(DomainMetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DomainMetadataType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                return this.ContentField.reference;
            }
            set {
                this.ContentField.reference = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReferenceSystem Load(string xmlFile) {
            return XTypedServices.Load<ReferenceSystem, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceSystem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReferenceSystem, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceSystem Parse(string xml) {
            return XTypedServices.Parse<ReferenceSystem, DomainMetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ReferenceSystem(((DomainMetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DomainMetadataType ContentField) {
            this.ContentField = ((DomainMetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// References metadata about a quantity, and provides a name
    ///      for this metadata. (Informative: This element was simplified from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class UOM : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DomainMetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UOM", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator UOM(XElement xe) { return XTypedServices.ToXTypedElement<UOM, DomainMetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public UOM() {
            SetInnerType(new DomainMetadataType());
        }
        
        /// <summary>
        /// <para>
        /// References metadata about a quantity, and provides a name
        ///      for this metadata. (Informative: This element was simplified from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public UOM(DomainMetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DomainMetadataType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri reference {
            get {
                return this.ContentField.reference;
            }
            set {
                this.ContentField.reference = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UOM Load(string xmlFile) {
            return XTypedServices.Load<UOM, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UOM Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UOM, DomainMetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static UOM Parse(string xml) {
            return XTypedServices.Parse<UOM, DomainMetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new UOM(((DomainMetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DomainMetadataType ContentField) {
            this.ContentField = ((DomainMetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// XML encoded GetCapabilities operation request. This
    ///      operation allows clients to retrieve service metadata about a specific
    ///      service instance. In this XML encoding, no "request" parameter is
    ///      included, since the element name specifies the specific operation. This
    ///      base type shall be extended by each specific OWS to include the
    ///      additional required "service" attribute, with the correct value for that
    ///      OWS.
    /// </para>
    /// </summary>
    public partial class GetCapabilities : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OpenGis.Ows.GetCapabilitiesType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetCapabilities", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator GetCapabilities(XElement xe) { return XTypedServices.ToXTypedElement<GetCapabilities, OpenGis.Ows.GetCapabilitiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// XML encoded GetCapabilities operation request. This
        ///      operation allows clients to retrieve service metadata about a specific
        ///      service instance. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific operation. This
        ///      base type shall be extended by each specific OWS to include the
        ///      additional required "service" attribute, with the correct value for that
        ///      OWS.
        /// </para>
        /// </summary>
        public GetCapabilities() {
            SetInnerType(new OpenGis.Ows.GetCapabilitiesType());
        }
        
        /// <summary>
        /// <para>
        /// XML encoded GetCapabilities operation request. This
        ///      operation allows clients to retrieve service metadata about a specific
        ///      service instance. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific operation. This
        ///      base type shall be extended by each specific OWS to include the
        ///      additional required "service" attribute, with the correct value for that
        ///      OWS.
        /// </para>
        /// </summary>
        public GetCapabilities(OpenGis.Ows.GetCapabilitiesType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual OpenGis.Ows.GetCapabilitiesType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted, server shall return latest supported
        ///          version.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual AcceptVersionsType AcceptVersions {
            get {
                return this.ContentField.AcceptVersions;
            }
            set {
                this.ContentField.AcceptVersions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///          return complete service metadata (Capabilities)
        ///          document.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual SectionsType Sections {
            get {
                return this.ContentField.Sections;
            }
            set {
                this.ContentField.Sections = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///          return service metadata document using the MIME type
        ///          "text/xml".
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual AcceptFormatsType AcceptFormats {
            get {
                return this.ContentField.AcceptFormats;
            }
            set {
                this.ContentField.AcceptFormats = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Ordered list of languages desired by the client for
        ///          all human readable text in the response, in order of preference. For
        ///          every element, the first matching language available from the server
        ///          shall be present in the response.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.GetCapabilitiesType.AcceptLanguagesLocalType AcceptLanguages {
            get {
                return this.ContentField.AcceptLanguages;
            }
            set {
                this.ContentField.AcceptLanguages = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// When omitted or not supported by server, server shall
        ///        return latest complete service metadata document.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string updateSequence {
            get {
                return this.ContentField.updateSequence;
            }
            set {
                this.ContentField.updateSequence = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GetCapabilities Load(string xmlFile) {
            return XTypedServices.Load<GetCapabilities, OpenGis.Ows.GetCapabilitiesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GetCapabilities Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GetCapabilities, OpenGis.Ows.GetCapabilitiesType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GetCapabilities Parse(string xml) {
            return XTypedServices.Parse<GetCapabilities, OpenGis.Ows.GetCapabilitiesType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GetCapabilities(((OpenGis.Ows.GetCapabilitiesType)(this.Content.Clone())));
        }
        
        private void SetInnerType(OpenGis.Ows.GetCapabilitiesType ContentField) {
            this.ContentField = ((OpenGis.Ows.GetCapabilitiesType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Request to a service to perform the GetResourceByID
    ///      operation. This operation allows a client to retrieve one or more
    ///      identified resources, including datasets and resources that describe
    ///      datasets or parameters. In this XML encoding, no "request" parameter is
    ///      included, since the element name specifies the specific
    ///      operation.
    /// </para>
    /// </summary>
    public partial class GetResourceByID : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private OpenGis.Ows.GetResourceByIdType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetResourceByID", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator GetResourceByID(XElement xe) { return XTypedServices.ToXTypedElement<GetResourceByID, OpenGis.Ows.GetResourceByIdType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Request to a service to perform the GetResourceByID
        ///      operation. This operation allows a client to retrieve one or more
        ///      identified resources, including datasets and resources that describe
        ///      datasets or parameters. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific
        ///      operation.
        /// </para>
        /// </summary>
        public GetResourceByID() {
            SetInnerType(new OpenGis.Ows.GetResourceByIdType());
        }
        
        /// <summary>
        /// <para>
        /// Request to a service to perform the GetResourceByID
        ///      operation. This operation allows a client to retrieve one or more
        ///      identified resources, including datasets and resources that describe
        ///      datasets or parameters. In this XML encoding, no "request" parameter is
        ///      included, since the element name specifies the specific
        ///      operation.
        /// </para>
        /// </summary>
        public GetResourceByID(OpenGis.Ows.GetResourceByIdType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual OpenGis.Ows.GetResourceByIdType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more resource identifiers.
        ///          These identifiers can be listed in the Contents section of the
        ///          service metadata (Capabilities) document. For more information on
        ///          this parameter, see Subclause 9.4.2.1 of the OWS Common
        ///          specification.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID*, OutputFormat?)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> ResourceID {
            get {
                return this.ContentField.ResourceID;
            }
            set {
                this.ContentField.ResourceID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional reference to the data format to be used for
        ///          response to this operation request. This element shall be included
        ///          when multiple output formats are available for the selected
        ///          resource(s), and the client desires a format other than the
        ///          specified default, if any.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID*, OutputFormat?)
        /// </para>
        /// </summary>
        public virtual OutputFormat OutputFormat {
            get {
                return this.ContentField.OutputFormat;
            }
            set {
                this.ContentField.OutputFormat = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string service {
            get {
                return this.ContentField.service;
            }
            set {
                this.ContentField.service = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GetResourceByID Load(string xmlFile) {
            return XTypedServices.Load<GetResourceByID, OpenGis.Ows.GetResourceByIdType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GetResourceByID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GetResourceByID, OpenGis.Ows.GetResourceByIdType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static GetResourceByID Parse(string xml) {
            return XTypedServices.Parse<GetResourceByID, OpenGis.Ows.GetResourceByIdType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new GetResourceByID(((OpenGis.Ows.GetResourceByIdType)(this.Content.Clone())));
        }
        
        private void SetInnerType(OpenGis.Ows.GetResourceByIdType ContentField) {
            this.ContentField = ((OpenGis.Ows.GetResourceByIdType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// An Exception element describes one detected error that a
    ///      server chooses to convey to the client.
    /// </para>
    /// </summary>
    public partial class Exception : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExceptionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exception", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Exception(XElement xe) { return XTypedServices.ToXTypedElement<Exception, ExceptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// An Exception element describes one detected error that a
        ///      server chooses to convey to the client.
        /// </para>
        /// </summary>
        public Exception() {
            SetInnerType(new ExceptionType());
        }
        
        /// <summary>
        /// <para>
        /// An Exception element describes one detected error that a
        ///      server chooses to convey to the client.
        /// </para>
        /// </summary>
        public Exception(ExceptionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ExceptionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Ordered sequence of text strings that describe this
        ///          specific exception or error. The contents of these strings are left
        ///          open to definition by each server implementation. A server is
        ///          strongly encouraged to include at least one ExceptionText value, to
        ///          provide more information about the detected error than provided by
        ///          the exceptionCode. When included, multiple ExceptionText values
        ///          shall provide hierarchical information about one detected error,
        ///          with the most significant information listed first.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ExceptionText*)
        /// </para>
        /// </summary>
        public virtual IList<string> ExceptionText {
            get {
                return this.ContentField.ExceptionText;
            }
            set {
                this.ContentField.ExceptionText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// A code representing the type of this exception, which
        ///        shall be selected from a set of exceptionCode values specified for the
        ///        specific service operation and server.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string exceptionCode {
            get {
                return this.ContentField.exceptionCode;
            }
            set {
                this.ContentField.exceptionCode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// When included, this locator shall indicate to the
        ///        client where an exception was encountered in servicing the client's
        ///        operation request. This locator should be included whenever meaningful
        ///        information can be provided by the server. The contents of this
        ///        locator will depend on the specific exceptionCode and OWS service, and
        ///        shall be specified in the OWS Implementation
        ///        Specification.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string locator {
            get {
                return this.ContentField.locator;
            }
            set {
                this.ContentField.locator = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Exception Load(string xmlFile) {
            return XTypedServices.Load<Exception, ExceptionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Exception Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Exception, ExceptionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Exception Parse(string xml) {
            return XTypedServices.Parse<Exception, ExceptionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Exception(((ExceptionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ExceptionType ContentField) {
            this.ContentField = ((ExceptionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// This element either references or contains more metadata
    ///      about the element that includes this element. To reference metadata
    ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
    ///      shall be included. Either at least one of the attributes in
    ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
    ///      be included, but not both. An Implementation Specification can restrict
    ///      the contents of this element to always be a reference or always contain
    ///      metadata. (Informative: This element was adapted from the
    ///      metaDataProperty element in GML 3.0.)
    /// </para>
    /// </summary>
    public partial class OtherSource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MetadataType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OtherSource", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator OtherSource(XElement xe) { return XTypedServices.ToXTypedElement<OtherSource, MetadataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// This element either references or contains more metadata
        ///      about the element that includes this element. To reference metadata
        ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
        ///      shall be included. Either at least one of the attributes in
        ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
        ///      be included, but not both. An Implementation Specification can restrict
        ///      the contents of this element to always be a reference or always contain
        ///      metadata. (Informative: This element was adapted from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public OtherSource() {
            SetInnerType(new MetadataType());
        }
        
        /// <summary>
        /// <para>
        /// This element either references or contains more metadata
        ///      about the element that includes this element. To reference metadata
        ///      stored remotely, at least the xlinks:href attribute in xlink:simpleAttrs
        ///      shall be included. Either at least one of the attributes in
        ///      xlink:simpleAttrs or a substitute for the AbstractMetaData element shall
        ///      be included, but not both. An Implementation Specification can restrict
        ///      the contents of this element to always be a reference or always contain
        ///      metadata. (Informative: This element was adapted from the
        ///      metaDataProperty element in GML 3.0.)
        /// </para>
        /// </summary>
        public OtherSource(MetadataType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual MetadataType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: AbstractMetaData, AdditionalParameter
        /// </para>
        /// <para>
        /// Regular expression: (AbstractMetaData?)
        /// </para>
        /// </summary>
        public virtual AbstractMetaData AbstractMetaData {
            get {
                return this.ContentField.AbstractMetaData;
            }
            set {
                this.ContentField.AbstractMetaData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType? type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                return this.ContentField.href;
            }
            set {
                this.ContentField.href = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                return this.ContentField.arcrole;
            }
            set {
                this.ContentField.arcrole = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                return this.ContentField.show;
            }
            set {
                this.ContentField.show = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                return this.ContentField.actuate;
            }
            set {
                this.ContentField.actuate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional reference to the aspect of the element which
        ///        includes this "metadata" element that this metadata provides more
        ///        information about.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri about {
            get {
                return this.ContentField.about;
            }
            set {
                this.ContentField.about = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OtherSource Load(string xmlFile) {
            return XTypedServices.Load<OtherSource, MetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherSource Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OtherSource, MetadataType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OtherSource Parse(string xml) {
            return XTypedServices.Parse<OtherSource, MetadataType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OtherSource(((MetadataType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MetadataType ContentField) {
            this.ContentField = ((MetadataType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Typical dataset metadata in typical Contents section of
    ///      an OWS service metadata (Capabilities) document. This type shall be
    ///      extended and/or restricted if needed for specific OWS use, to include
    ///      the specific Dataset description metadata needed.
    /// </para>
    /// </summary>
    public partial class DatasetDescriptionSummary : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DatasetDescriptionSummaryBaseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatasetDescriptionSummary", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator DatasetDescriptionSummary(XElement xe) { return XTypedServices.ToXTypedElement<DatasetDescriptionSummary, DatasetDescriptionSummaryBaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Typical dataset metadata in typical Contents section of
        ///      an OWS service metadata (Capabilities) document. This type shall be
        ///      extended and/or restricted if needed for specific OWS use, to include
        ///      the specific Dataset description metadata needed.
        /// </para>
        /// </summary>
        public DatasetDescriptionSummary() {
            SetInnerType(new DatasetDescriptionSummaryBaseType());
        }
        
        /// <summary>
        /// <para>
        /// Typical dataset metadata in typical Contents section of
        ///      an OWS service metadata (Capabilities) document. This type shall be
        ///      extended and/or restricted if needed for specific OWS use, to include
        ///      the specific Dataset description metadata needed.
        /// </para>
        /// </summary>
        public DatasetDescriptionSummary(DatasetDescriptionSummaryBaseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DatasetDescriptionSummaryBaseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more minimum bounding
        ///              rectangles surrounding coverage data, using the WGS 84 CRS with
        ///              decimal degrees and longitude before latitude. If no WGS 84
        ///              bounding box is recorded for a coverage, any such bounding boxes
        ///              recorded for a higher level in a hierarchy of datasets shall
        ///              apply to this coverage. If WGS 84 bounding box(es) are recorded
        ///              for a coverage, any such bounding boxes recorded for a higher
        ///              level in a hierarchy of datasets shall be ignored. For each
        ///              lowest-level coverage in a hierarchy, at least one applicable
        ///              WGS84BoundingBox shall be either recorded or inherited, to
        ///              simplify searching for datasets that might overlap a specified
        ///              region. If multiple WGS 84 bounding boxes are included, this
        ///              shall be interpreted as the union of the areas of these bounding
        ///              boxes.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<WGS84BoundingBox> WGS84BoundingBox {
            get {
                return this.ContentField.WGS84BoundingBox;
            }
            set {
                this.ContentField.WGS84BoundingBox = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Unambiguous identifier or name of this coverage,
        ///              unique for this server.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual CodeType Identifier {
            get {
                return this.ContentField.Identifier;
            }
            set {
                this.ContentField.Identifier = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of zero or more minimum bounding
        ///              rectangles surrounding coverage data, in AvailableCRSs. Zero or
        ///              more BoundingBoxes are allowed in addition to one or more
        ///              WGS84BoundingBoxes to allow more precise specification of the
        ///              Dataset area in AvailableCRSs. These Bounding Boxes shall not
        ///              use any CRS not listed as an AvailableCRS. However, an
        ///              AvailableCRS can be listed without a corresponding Bounding Box.
        ///              If no such bounding box is recorded for a coverage, any such
        ///              bounding boxes recorded for a higher level in a hierarchy of
        ///              datasets shall apply to this coverage. If such bounding box(es)
        ///              are recorded for a coverage, any such bounding boxes recorded
        ///              for a higher level in a hierarchy of datasets shall be ignored.
        ///              If multiple bounding boxes are included with the same CRS, this
        ///              shall be interpreted as the union of the areas of these bounding
        ///              boxes.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: BoundingBox, WGS84BoundingBox
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<BoundingBox> BoundingBox {
            get {
                return this.ContentField.BoundingBox;
            }
            set {
                this.ContentField.BoundingBox = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///              about this dataset. A list of optional metadata elements for
        ///              this dataset description could be specified in the
        ///              Implementation Specification for this service.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                return this.ContentField.Metadata;
            }
            set {
                this.ContentField.Metadata = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Metadata describing zero or more unordered
        ///              subsidiary datasets available from this server.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, WGS84BoundingBox*, Identifier, BoundingBox*, Metadata*, DatasetDescriptionSummary*)
        /// </para>
        /// </summary>
        public virtual IList<DatasetDescriptionSummary> DatasetDescriptionSummary1 {
            get {
                return this.ContentField.DatasetDescriptionSummary;
            }
            set {
                this.ContentField.DatasetDescriptionSummary = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DatasetDescriptionSummary Load(string xmlFile) {
            return XTypedServices.Load<DatasetDescriptionSummary, DatasetDescriptionSummaryBaseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DatasetDescriptionSummary Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DatasetDescriptionSummary, DatasetDescriptionSummaryBaseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DatasetDescriptionSummary Parse(string xml) {
            return XTypedServices.Parse<DatasetDescriptionSummary, DatasetDescriptionSummaryBaseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DatasetDescriptionSummary(((DatasetDescriptionSummaryBaseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DatasetDescriptionSummaryBaseType ContentField) {
            this.ContentField = ((DatasetDescriptionSummaryBaseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Base for a reference to a remote or local
    ///      resource.
    /// </para>
    /// <para>
    /// This type contains only a restricted and annotated set of
    ///      the attributes from the xlink:simpleAttrs attributeGroup.
    /// </para>
    /// </summary>
    public abstract partial class AbstractReferenceBase : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AbstractReferenceBaseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AbstractReferenceBase(XElement xe) {  return (AbstractReferenceBase)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected AbstractReferenceBase(bool setNull) {
        }
        
        /// <summary>
        /// <para>
        /// Base for a reference to a remote or local
        ///      resource.
        /// </para>
        /// <para>
        /// This type contains only a restricted and annotated set of
        ///      the attributes from the xlink:simpleAttrs attributeGroup.
        /// </para>
        /// </summary>
        public AbstractReferenceBase() {
            SetInnerType(new AbstractReferenceBaseType());
        }
        
        /// <summary>
        /// <para>
        /// Base for a reference to a remote or local
        ///      resource.
        /// </para>
        /// <para>
        /// This type contains only a restricted and annotated set of
        ///      the attributes from the xlink:simpleAttrs attributeGroup.
        /// </para>
        /// </summary>
        public AbstractReferenceBase(AbstractReferenceBaseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual AbstractReferenceBaseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a remote resource or local payload. A
        ///        remote resource is typically addressed by a URL. For a local payload
        ///        (such as a multipart mime message), the xlink:href must start with the
        ///        prefix cid:.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                return this.ContentField.href;
            }
            set {
                this.ContentField.href = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a resource that describes the role of this
        ///        reference. When no value is supplied, no particular role value is to
        ///        be inferred.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                return this.ContentField.arcrole;
            }
            set {
                this.ContentField.arcrole = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Describes the meaning of the referenced resource in a
        ///        human-readable fashion.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                return this.ContentField.show;
            }
            set {
                this.ContentField.show = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Although allowed, this attribute is not expected to be
        ///        useful in this application of xlink:simpleAttrs.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                return this.ContentField.actuate;
            }
            set {
                this.ContentField.actuate = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AbstractReferenceBase Load(string xmlFile) {
            return ((AbstractReferenceBase)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AbstractReferenceBase Load(System.IO.TextReader xmlFile) {
            return ((AbstractReferenceBase)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static AbstractReferenceBase Parse(string xml) {
            return ((AbstractReferenceBase)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(AbstractReferenceBaseType ContentField) {
            this.ContentField = ((AbstractReferenceBaseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(AbstractReferenceBaseType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Complete reference to a remote or local resource,
    ///      allowing including metadata about that resource.
    /// </para>
    /// </summary>
    public partial class Reference : global::OpenGis.Ows.AbstractReferenceBase, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ReferenceType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Reference", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Reference(XElement xe) {  return (Reference)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected Reference(bool setNull) : 
                base(true) {
        }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote or local resource,
        ///      allowing including metadata about that resource.
        /// </para>
        /// </summary>
        public Reference() : 
                base(true) {
            SetInnerType(new ReferenceType());
        }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote or local resource,
        ///      allowing including metadata about that resource.
        /// </para>
        /// </summary>
        public Reference(ReferenceType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual ReferenceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unique identifier of the referenced
        ///              resource.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual Identifier Identifier {
            get {
                return this.ContentField.Identifier;
            }
            set {
                this.ContentField.Identifier = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Abstract> Abstract {
            get {
                return this.ContentField.Abstract;
            }
            set {
                this.ContentField.Abstract = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The format of the referenced resource. This
        ///              element is omitted when the mime type is indicated in the http
        ///              header of the reference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                return this.ContentField.Format;
            }
            set {
                this.ContentField.Format = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Optional unordered list of additional metadata
        ///              about this resource. A list of optional metadata elements for
        ///              this ReferenceType could be specified in the Implementation
        ///              Specification for each use of this type in a specific
        ///              OWS.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: Metadata, AdditionalParameters
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*)
        /// </para>
        /// </summary>
        public virtual IList<Metadata> Metadata {
            get {
                return this.ContentField.Metadata;
            }
            set {
                this.ContentField.Metadata = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static Reference Load(string xmlFile) {
            return ((Reference)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static Reference Load(System.IO.TextReader xmlFile) {
            return ((Reference)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static Reference Parse(string xml) {
            return ((Reference)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return new Reference(((ReferenceType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ReferenceType ContentField) {
            this.ContentField = ((ReferenceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(ReferenceType ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Logical group of one or more references to remote and/or
    ///      local resources, allowing including metadata about that group. A Group
    ///      can be used instead of a Manifest that can only contain one
    ///      group.
    /// </para>
    /// </summary>
    public partial class ReferenceGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ReferenceGroupType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenceGroup", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ReferenceGroup(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceGroup, ReferenceGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Logical group of one or more references to remote and/or
        ///      local resources, allowing including metadata about that group. A Group
        ///      can be used instead of a Manifest that can only contain one
        ///      group.
        /// </para>
        /// </summary>
        public ReferenceGroup() {
            SetInnerType(new ReferenceGroupType());
        }
        
        /// <summary>
        /// <para>
        /// Logical group of one or more references to remote and/or
        ///      local resources, allowing including metadata about that group. A Group
        ///      can be used instead of a Manifest that can only contain one
        ///      group.
        /// </para>
        /// </summary>
        public ReferenceGroup(ReferenceGroupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ReferenceGroupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Substitution members: AbstractReferenceBase, Reference, ServiceReference
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, AbstractReferenceBase+)
        /// </para>
        /// </summary>
        public virtual IList<AbstractReferenceBase> AbstractReferenceBase {
            get {
                return this.ContentField.AbstractReferenceBase;
            }
            set {
                this.ContentField.AbstractReferenceBase = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReferenceGroup Load(string xmlFile) {
            return XTypedServices.Load<ReferenceGroup, ReferenceGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReferenceGroup, ReferenceGroupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ReferenceGroup Parse(string xml) {
            return XTypedServices.Parse<ReferenceGroup, ReferenceGroupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ReferenceGroup(((ReferenceGroupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ReferenceGroupType ContentField) {
            this.ContentField = ((ReferenceGroupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more groups of references to
    ///      remote and/or local resources.
    /// </para>
    /// </summary>
    public partial class Manifest : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ManifestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Manifest", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Manifest(XElement xe) { return XTypedServices.ToXTypedElement<Manifest, ManifestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public Manifest() {
            SetInnerType(new ManifestType());
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public Manifest(ManifestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ManifestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
        /// </para>
        /// </summary>
        public virtual IList<ReferenceGroup> ReferenceGroup {
            get {
                return this.ContentField.ReferenceGroup;
            }
            set {
                this.ContentField.ReferenceGroup = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Manifest Load(string xmlFile) {
            return XTypedServices.Load<Manifest, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Manifest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Manifest, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Manifest Parse(string xml) {
            return XTypedServices.Parse<Manifest, ManifestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Manifest(((ManifestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ManifestType ContentField) {
            this.ContentField = ((ManifestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more groups of references to
    ///      remote and/or local resources.
    /// </para>
    /// </summary>
    public partial class OperationResponse : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ManifestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OperationResponse", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator OperationResponse(XElement xe) { return XTypedServices.ToXTypedElement<OperationResponse, ManifestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public OperationResponse() {
            SetInnerType(new ManifestType());
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public OperationResponse(ManifestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ManifestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
        /// </para>
        /// </summary>
        public virtual IList<ReferenceGroup> ReferenceGroup {
            get {
                return this.ContentField.ReferenceGroup;
            }
            set {
                this.ContentField.ReferenceGroup = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OperationResponse Load(string xmlFile) {
            return XTypedServices.Load<OperationResponse, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OperationResponse Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OperationResponse, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static OperationResponse Parse(string xml) {
            return XTypedServices.Parse<OperationResponse, ManifestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new OperationResponse(((ManifestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ManifestType ContentField) {
            this.ContentField = ((ManifestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more groups of references to
    ///      remote and/or local resources.
    /// </para>
    /// </summary>
    public partial class InputData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ManifestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InputData", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator InputData(XElement xe) { return XTypedServices.ToXTypedElement<InputData, ManifestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public InputData() {
            SetInnerType(new ManifestType());
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more groups of references to
        ///      remote and/or local resources.
        /// </para>
        /// </summary>
        public InputData(ManifestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ManifestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier?, Metadata*, ReferenceGroup+)
        /// </para>
        /// </summary>
        public virtual IList<ReferenceGroup> ReferenceGroup {
            get {
                return this.ContentField.ReferenceGroup;
            }
            set {
                this.ContentField.ReferenceGroup = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InputData Load(string xmlFile) {
            return XTypedServices.Load<InputData, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InputData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InputData, ManifestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InputData Parse(string xml) {
            return XTypedServices.Parse<InputData, ManifestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new InputData(((ManifestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ManifestType ContentField) {
            this.ContentField = ((ManifestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Complete reference to a remote resource that needs to be
    ///      retrieved from an OWS using an XML-encoded operation request. This
    ///      element shall be used, within an InputData or Manifest element that is
    ///      used for input data, when that input data needs to be retrieved from
    ///      another web service using a XML-encoded OWS operation request. This
    ///      element shall not be used for local payload input data or for requesting
    ///      the resource from a web server using HTTP Get.
    /// </para>
    /// </summary>
    public partial class ServiceReference : global::OpenGis.Ows.Reference, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ServiceReferenceType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceReference", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ServiceReference(XElement xe) { return XTypedServices.ToXTypedElement<ServiceReference, ServiceReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote resource that needs to be
        ///      retrieved from an OWS using an XML-encoded operation request. This
        ///      element shall be used, within an InputData or Manifest element that is
        ///      used for input data, when that input data needs to be retrieved from
        ///      another web service using a XML-encoded OWS operation request. This
        ///      element shall not be used for local payload input data or for requesting
        ///      the resource from a web server using HTTP Get.
        /// </para>
        /// </summary>
        public ServiceReference() : 
                base(true) {
            SetInnerType(new ServiceReferenceType());
        }
        
        /// <summary>
        /// <para>
        /// Complete reference to a remote resource that needs to be
        ///      retrieved from an OWS using an XML-encoded operation request. This
        ///      element shall be used, within an InputData or Manifest element that is
        ///      used for input data, when that input data needs to be retrieved from
        ///      another web service using a XML-encoded OWS operation request. This
        ///      element shall not be used for local payload input data or for requesting
        ///      the resource from a web server using HTTP Get.
        /// </para>
        /// </summary>
        public ServiceReference(ServiceReferenceType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual ServiceReferenceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// The XML-encoded operation request message to be
        ///              sent to request this input data from another web server using
        ///              HTTP Post.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
        /// </para>
        /// </summary>
        public virtual XTypedElement RequestMessage {
            get {
                return this.ContentField.RequestMessage;
            }
            set {
                this.ContentField.RequestMessage = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to the XML-encoded operation request
        ///              message to be sent to request this input data from another web
        ///              server using HTTP Post. The referenced message shall be attached
        ///              to the same message (using the cid scheme), or be accessible
        ///              using a URL.
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Identifier?, Abstract*, Format?, Metadata*, (RequestMessage | RequestMessageReference))
        /// </para>
        /// </summary>
        public virtual System.Uri RequestMessageReference {
            get {
                return this.ContentField.RequestMessageReference;
            }
            set {
                this.ContentField.RequestMessageReference = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static ServiceReference Load(string xmlFile) {
            return XTypedServices.Load<ServiceReference, ServiceReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ServiceReference Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ServiceReference, ServiceReferenceType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static ServiceReference Parse(string xml) {
            return XTypedServices.Parse<ServiceReference, ServiceReferenceType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ServiceReference(((ServiceReferenceType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ServiceReferenceType ContentField) {
            this.ContentField = ((ServiceReferenceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AdditionalParameters : global::OpenGis.Ows.Metadata, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AdditionalParametersType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator AdditionalParameters(XElement xe) { return XTypedServices.ToXTypedElement<AdditionalParameters, AdditionalParametersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdditionalParameters() : 
                base(true) {
            SetInnerType(new AdditionalParametersType());
        }
        
        public AdditionalParameters(AdditionalParametersType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual AdditionalParametersType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdditionalParameter, AdditionalParameter*)
        /// </para>
        /// </summary>
        public new virtual IList<AdditionalParameter> AdditionalParameter {
            get {
                return this.ContentField.AdditionalParameter;
            }
            set {
                this.ContentField.AdditionalParameter = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static AdditionalParameters Load(string xmlFile) {
            return XTypedServices.Load<AdditionalParameters, AdditionalParametersType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AdditionalParameters Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AdditionalParameters, AdditionalParametersType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static AdditionalParameters Parse(string xml) {
            return XTypedServices.Parse<AdditionalParameters, AdditionalParametersType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new AdditionalParameters(((AdditionalParametersType)(this.Content.Clone())));
        }
        
        private void SetInnerType(AdditionalParametersType ContentField) {
            this.ContentField = ((AdditionalParametersType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The value used (e.g. -255) to represent a nil value with
    ///      optional nilReason and codeSpace attributes.
    /// </para>
    /// </summary>
    public partial class nilValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NilValueType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nilValue", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator nilValue(XElement xe) { return XTypedServices.ToXTypedElement<nilValue, NilValueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value used (e.g. -255) to represent a nil value with
        ///      optional nilReason and codeSpace attributes.
        /// </para>
        /// </summary>
        public nilValue() {
            SetInnerType(new NilValueType());
        }
        
        /// <summary>
        /// <para>
        /// The value used (e.g. -255) to represent a nil value with
        ///      optional nilReason and codeSpace attributes.
        /// </para>
        /// </summary>
        public nilValue(NilValueType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual NilValueType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// An anyURI value which refers to a resource that
        ///            describes the reason for the nil value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri nilReason {
            get {
                return this.ContentField.nilReason;
            }
            set {
                this.ContentField.nilReason = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static nilValue Load(string xmlFile) {
            return XTypedServices.Load<nilValue, NilValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nilValue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nilValue, NilValueType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nilValue Parse(string xml) {
            return XTypedServices.Parse<nilValue, NilValueType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new nilValue(((NilValueType)(this.Content.Clone())));
        }
        
        private void SetInnerType(NilValueType ContentField) {
            this.ContentField = ((NilValueType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Text string with the language of the string identified as
    ///      recommended in the XML 1.0 W3C Recommendation, section
    ///      2.12.
    /// </para>
    /// </summary>
    public partial class Title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LanguageStringType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Title", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Title(XElement xe) { return XTypedServices.ToXTypedElement<Title, LanguageStringType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Text string with the language of the string identified as
        ///      recommended in the XML 1.0 W3C Recommendation, section
        ///      2.12.
        /// </para>
        /// </summary>
        public Title() {
            SetInnerType(new LanguageStringType());
        }
        
        /// <summary>
        /// <para>
        /// Text string with the language of the string identified as
        ///      recommended in the XML 1.0 W3C Recommendation, section
        ///      2.12.
        /// </para>
        /// </summary>
        public Title(LanguageStringType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual LanguageStringType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Title Load(string xmlFile) {
            return XTypedServices.Load<Title, LanguageStringType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Title, LanguageStringType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Title Parse(string xml) {
            return XTypedServices.Parse<Title, LanguageStringType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Title(((LanguageStringType)(this.Content.Clone())));
        }
        
        private void SetInnerType(LanguageStringType ContentField) {
            this.ContentField = ((LanguageStringType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Text string with the language of the string identified as
    ///      recommended in the XML 1.0 W3C Recommendation, section
    ///      2.12.
    /// </para>
    /// </summary>
    public partial class Abstract : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LanguageStringType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Abstract", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Abstract(XElement xe) { return XTypedServices.ToXTypedElement<Abstract, LanguageStringType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Text string with the language of the string identified as
        ///      recommended in the XML 1.0 W3C Recommendation, section
        ///      2.12.
        /// </para>
        /// </summary>
        public Abstract() {
            SetInnerType(new LanguageStringType());
        }
        
        /// <summary>
        /// <para>
        /// Text string with the language of the string identified as
        ///      recommended in the XML 1.0 W3C Recommendation, section
        ///      2.12.
        /// </para>
        /// </summary>
        public Abstract(LanguageStringType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual LanguageStringType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Abstract Load(string xmlFile) {
            return XTypedServices.Load<Abstract, LanguageStringType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Abstract Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Abstract, LanguageStringType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Abstract Parse(string xml) {
            return XTypedServices.Parse<Abstract, LanguageStringType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Abstract(((LanguageStringType)(this.Content.Clone())));
        }
        
        private void SetInnerType(LanguageStringType ContentField) {
            this.ContentField = ((LanguageStringType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unordered list of one or more commonly used or formalised
    ///      word(s) or phrase(s) used to describe the subject. When needed, the
    ///      optional "type" can name the type of the associated list of keywords
    ///      that shall all have the same type. Also when needed, the codeSpace
    ///      attribute of that "type" can reference the type name authority and/or
    ///      thesaurus. If the xml:lang attribute is not included in a Keyword
    ///      element, then no language is specified for that element unless specified
    ///      by another means. All Keyword elements in the same Keywords element that
    ///      share the same xml:lang attribute value represent different keywords in
    ///      that language.
    /// </para>
    /// <para>
    /// For OWS use, the optional thesaurusName element was
    ///      omitted as being complex information that could be referenced by the
    ///      codeSpace attribute of the Type element.
    /// </para>
    /// </summary>
    public partial class Keywords : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private KeywordsType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Keywords", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Keywords(XElement xe) { return XTypedServices.ToXTypedElement<Keywords, KeywordsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more commonly used or formalised
        ///      word(s) or phrase(s) used to describe the subject. When needed, the
        ///      optional "type" can name the type of the associated list of keywords
        ///      that shall all have the same type. Also when needed, the codeSpace
        ///      attribute of that "type" can reference the type name authority and/or
        ///      thesaurus. If the xml:lang attribute is not included in a Keyword
        ///      element, then no language is specified for that element unless specified
        ///      by another means. All Keyword elements in the same Keywords element that
        ///      share the same xml:lang attribute value represent different keywords in
        ///      that language.
        /// </para>
        /// <para>
        /// For OWS use, the optional thesaurusName element was
        ///      omitted as being complex information that could be referenced by the
        ///      codeSpace attribute of the Type element.
        /// </para>
        /// </summary>
        public Keywords() {
            SetInnerType(new KeywordsType());
        }
        
        /// <summary>
        /// <para>
        /// Unordered list of one or more commonly used or formalised
        ///      word(s) or phrase(s) used to describe the subject. When needed, the
        ///      optional "type" can name the type of the associated list of keywords
        ///      that shall all have the same type. Also when needed, the codeSpace
        ///      attribute of that "type" can reference the type name authority and/or
        ///      thesaurus. If the xml:lang attribute is not included in a Keyword
        ///      element, then no language is specified for that element unless specified
        ///      by another means. All Keyword elements in the same Keywords element that
        ///      share the same xml:lang attribute value represent different keywords in
        ///      that language.
        /// </para>
        /// <para>
        /// For OWS use, the optional thesaurusName element was
        ///      omitted as being complex information that could be referenced by the
        ///      codeSpace attribute of the Type element.
        /// </para>
        /// </summary>
        public Keywords(KeywordsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual KeywordsType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+, Type?)
        /// </para>
        /// </summary>
        public virtual IList<LanguageStringType> Keyword {
            get {
                return this.ContentField.Keyword;
            }
            set {
                this.ContentField.Keyword = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+, Type?)
        /// </para>
        /// </summary>
        public virtual CodeType Type {
            get {
                return this.ContentField.Type;
            }
            set {
                this.ContentField.Type = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Keywords Load(string xmlFile) {
            return XTypedServices.Load<Keywords, KeywordsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Keywords Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Keywords, KeywordsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Keywords Parse(string xml) {
            return XTypedServices.Parse<Keywords, KeywordsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Keywords(((KeywordsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(KeywordsType ContentField) {
            this.ContentField = ((KeywordsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Identification of, and means of communication with,
    ///      person responsible for the server. At least one of IndividualName,
    ///      OrganisationName, or PositionName shall be included.
    /// </para>
    /// </summary>
    public partial class PointOfContact : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ResponsiblePartyType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointOfContact", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator PointOfContact(XElement xe) { return XTypedServices.ToXTypedElement<PointOfContact, ResponsiblePartyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Identification of, and means of communication with,
        ///      person responsible for the server. At least one of IndividualName,
        ///      OrganisationName, or PositionName shall be included.
        /// </para>
        /// </summary>
        public PointOfContact() {
            SetInnerType(new ResponsiblePartyType());
        }
        
        /// <summary>
        /// <para>
        /// Identification of, and means of communication with,
        ///      person responsible for the server. At least one of IndividualName,
        ///      OrganisationName, or PositionName shall be included.
        /// </para>
        /// </summary>
        public PointOfContact(ResponsiblePartyType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ResponsiblePartyType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual IndividualName IndividualName {
            get {
                return this.ContentField.IndividualName;
            }
            set {
                this.ContentField.IndividualName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual OrganisationName OrganisationName {
            get {
                return this.ContentField.OrganisationName;
            }
            set {
                this.ContentField.OrganisationName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual PositionName PositionName {
            get {
                return this.ContentField.PositionName;
            }
            set {
                this.ContentField.PositionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual ContactInfo ContactInfo {
            get {
                return this.ContentField.ContactInfo;
            }
            set {
                this.ContentField.ContactInfo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IndividualName?, OrganisationName?, PositionName?, ContactInfo?, Role)
        /// </para>
        /// </summary>
        public virtual Role Role {
            get {
                return this.ContentField.Role;
            }
            set {
                this.ContentField.Role = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PointOfContact Load(string xmlFile) {
            return XTypedServices.Load<PointOfContact, ResponsiblePartyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PointOfContact Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PointOfContact, ResponsiblePartyType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PointOfContact Parse(string xml) {
            return XTypedServices.Parse<PointOfContact, ResponsiblePartyType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PointOfContact(((ResponsiblePartyType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ResponsiblePartyType ContentField) {
            this.ContentField = ((ResponsiblePartyType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class IndividualName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IndividualName", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator IndividualName(XElement xe) { return XTypedServices.ToXTypedElement<IndividualName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public IndividualName() {
        }
        
        public IndividualName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static IndividualName Load(string xmlFile) {
            return XTypedServices.Load<IndividualName>(xmlFile);
        }
        
        public static IndividualName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<IndividualName>(xmlFile);
        }
        
        public static IndividualName Parse(string xml) {
            return XTypedServices.Parse<IndividualName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IndividualName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OrganisationName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationName", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator OrganisationName(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OrganisationName() {
        }
        
        public OrganisationName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OrganisationName Load(string xmlFile) {
            return XTypedServices.Load<OrganisationName>(xmlFile);
        }
        
        public static OrganisationName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OrganisationName>(xmlFile);
        }
        
        public static OrganisationName Parse(string xml) {
            return XTypedServices.Parse<OrganisationName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PositionName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PositionName", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator PositionName(XElement xe) { return XTypedServices.ToXTypedElement<PositionName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PositionName() {
        }
        
        public PositionName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PositionName Load(string xmlFile) {
            return XTypedServices.Load<PositionName>(xmlFile);
        }
        
        public static PositionName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PositionName>(xmlFile);
        }
        
        public static PositionName Parse(string xml) {
            return XTypedServices.Parse<PositionName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PositionName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Name or code with an (optional) authority. If the
    ///      codeSpace attribute is present, its value shall reference a dictionary,
    ///      thesaurus, or authority for the name or code, such as the organisation
    ///      who assigned the value, or the dictionary from which it is
    ///      taken.
    /// </para>
    /// <para>
    /// Type copied from basicTypes.xsd of GML 3 with
    ///      documentation edited, for possible use outside the ServiceIdentification
    ///      section of a service metadata document.
    /// </para>
    /// </summary>
    public partial class Role : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CodeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Role", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator Role(XElement xe) { return XTypedServices.ToXTypedElement<Role, CodeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Name or code with an (optional) authority. If the
        ///      codeSpace attribute is present, its value shall reference a dictionary,
        ///      thesaurus, or authority for the name or code, such as the organisation
        ///      who assigned the value, or the dictionary from which it is
        ///      taken.
        /// </para>
        /// <para>
        /// Type copied from basicTypes.xsd of GML 3 with
        ///      documentation edited, for possible use outside the ServiceIdentification
        ///      section of a service metadata document.
        /// </para>
        /// </summary>
        public Role() {
            SetInnerType(new CodeType());
        }
        
        /// <summary>
        /// <para>
        /// Name or code with an (optional) authority. If the
        ///      codeSpace attribute is present, its value shall reference a dictionary,
        ///      thesaurus, or authority for the name or code, such as the organisation
        ///      who assigned the value, or the dictionary from which it is
        ///      taken.
        /// </para>
        /// <para>
        /// Type copied from basicTypes.xsd of GML 3 with
        ///      documentation edited, for possible use outside the ServiceIdentification
        ///      section of a service metadata document.
        /// </para>
        /// </summary>
        public Role(CodeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual CodeType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri codeSpace {
            get {
                return this.ContentField.codeSpace;
            }
            set {
                this.ContentField.codeSpace = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Role Load(string xmlFile) {
            return XTypedServices.Load<Role, CodeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Role Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Role, CodeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Role Parse(string xml) {
            return XTypedServices.Parse<Role, CodeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Role(((CodeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CodeType ContentField) {
            this.ContentField = ((CodeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information required to enable contact with the
    ///      responsible person and/or organization.
    /// </para>
    /// <para>
    /// For OWS use in the service metadata document, the
    ///      optional hoursOfService and contactInstructions elements were retained,
    ///      as possibly being useful in the ServiceProvider section.
    /// </para>
    /// </summary>
    public partial class ContactInfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ContactType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactInfo", "http://www.opengis.net/ows/2.0");
        
		public static explicit operator ContactInfo(XElement xe) { return XTypedServices.ToXTypedElement<ContactInfo, ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Information required to enable contact with the
        ///      responsible person and/or organization.
        /// </para>
        /// <para>
        /// For OWS use in the service metadata document, the
        ///      optional hoursOfService and contactInstructions elements were retained,
        ///      as possibly being useful in the ServiceProvider section.
        /// </para>
        /// </summary>
        public ContactInfo() {
            SetInnerType(new ContactType());
        }
        
        /// <summary>
        /// <para>
        /// Information required to enable contact with the
        ///      responsible person and/or organization.
        /// </para>
        /// <para>
        /// For OWS use in the service metadata document, the
        ///      optional hoursOfService and contactInstructions elements were retained,
        ///      as possibly being useful in the ServiceProvider section.
        /// </para>
        /// </summary>
        public ContactInfo(ContactType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ContactType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Telephone numbers at which the organization or
        ///          individual may be contacted.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual TelephoneType Phone {
            get {
                return this.ContentField.Phone;
            }
            set {
                this.ContentField.Phone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Physical and email address at which the organization
        ///          or individual may be contacted.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual AddressType Address {
            get {
                return this.ContentField.Address;
            }
            set {
                this.ContentField.Address = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// On-line information that can be used to contact the
        ///          individual or organization. OWS specifics: The xlink:href attribute
        ///          in the xlink:simpleAttrs attribute group shall be used to reference
        ///          this resource. Whenever practical, the xlink:href attribute with
        ///          type anyURI should be a URL from which more contact information can
        ///          be electronically retrieved. The xlink:title attribute with type
        ///          "string" can be used to name this set of information. The other
        ///          attributes in the xlink:simpleAttrs attribute group should not be
        ///          used.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual OnlineResourceType OnlineResource {
            get {
                return this.ContentField.OnlineResource;
            }
            set {
                this.ContentField.OnlineResource = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Time period (including time zone) when individuals
        ///          can contact the organization or individual.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual string HoursOfService {
            get {
                return this.ContentField.HoursOfService;
            }
            set {
                this.ContentField.HoursOfService = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Supplemental instructions on how or when to contact
        ///          the individual or organization.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Phone?, Address?, OnlineResource?, HoursOfService?, ContactInstructions?)
        /// </para>
        /// </summary>
        public virtual string ContactInstructions {
            get {
                return this.ContentField.ContactInstructions;
            }
            set {
                this.ContentField.ContactInstructions = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ContactInfo Load(string xmlFile) {
            return XTypedServices.Load<ContactInfo, ContactType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ContactInfo Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ContactInfo, ContactType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ContactInfo Parse(string xml) {
            return XTypedServices.Parse<ContactInfo, ContactType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ContactInfo(((ContactType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ContactType ContentField) {
            this.ContentField = ((ContactType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("SceneLayerExtensionType", "http://www.opengis.net/3dps/1.0/scene"), typeof(global::OpenGis.ThreeDps.Scene.SceneLayerExtensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetSceneType", "http://www.opengis.net/3dps/1.0/scene"), typeof(global::OpenGis.ThreeDps.Scene.GetSceneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScenePortrayalCapabilitiesExtensionType", "http://www.opengis.net/3dps/1.0/scene"), typeof(global::OpenGis.ThreeDps.Scene.ScenePortrayalCapabilitiesExtensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MetadataType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.MetadataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BoundingBoxType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.BoundingBoxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WGS84BoundingBoxType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.WGS84BoundingBoxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DescriptionType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DescriptionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BasicIdentificationType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.BasicIdentificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IdentificationType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.IdentificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DomainType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DomainType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnNamedDomainType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.UnNamedDomainType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValueType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RangeType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.RangeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DomainMetadataType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DomainMetadataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RequestMethodType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.RequestMethodType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CapabilitiesBaseType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.CapabilitiesBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetCapabilitiesType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.GetCapabilitiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AcceptVersionsType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AcceptVersionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SectionsType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.SectionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AcceptFormatsType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AcceptFormatsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetResourceByIdType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.GetResourceByIdType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExceptionType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ExceptionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentsBaseType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ContentsBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DatasetDescriptionSummaryBaseType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DatasetDescriptionSummaryBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractReferenceBaseType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AbstractReferenceBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ReferenceType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ReferenceGroupType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ReferenceGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ManifestType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ManifestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceReferenceType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ServiceReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AdditionalParametersBaseType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AdditionalParametersBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AdditionalParametersType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AdditionalParametersType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NilValueType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.NilValueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LanguageStringType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.LanguageStringType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KeywordsType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.KeywordsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CodeType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.CodeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ResponsiblePartyType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ResponsiblePartyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ResponsiblePartySubsetType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ResponsiblePartySubsetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContactType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ContactType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OnlineResourceType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OnlineResourceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TelephoneType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.TelephoneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AddressType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AddressType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simple", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.simple));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extended", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.extended));
            typeDictionary.Add(System.Xml.Linq.XName.Get("titleEltType", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.titleEltType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("resourceType", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.resourceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("locatorType", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.locatorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arcType", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.arcType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractGetPortrayalType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.AbstractGetPortrayalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CapabilitiesType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.CapabilitiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RequestBaseType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.RequestBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeliveryOptionType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.DeliveryOptionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewpointHintType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.ViewpointHintType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PortrayalCapabilitiesType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.PortrayalCapabilitiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LODSchemeType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.LODSchemeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LayerType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.LayerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetResourceByIdType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.GetResourceByIdType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Position3DType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.Position3DType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentsType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.ContentsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetCapabilitiesType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.GetCapabilitiesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverallStyleType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.OverallStyleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BackgroundType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.BackgroundType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StyleType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.StyleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Position2DType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.Position2DType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OWSContentsBaseRestrictionType", "http://www.opengis.net/3dps/1.0/core"), typeof(global::OpenGis.ThreeDps.Core.OWSContentsBaseRestrictionType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AbstractMetaData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ServiceIdentification", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ServiceIdentification));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ServiceProvider", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ServiceProvider));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AnyValue", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AnyValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NoValues", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.NoValues));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ValuesReference", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ValuesReference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AllowedValues", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AllowedValues));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OperationsMetadata", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OperationsMetadata));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ExtendedCapabilities", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ExtendedCapabilities));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Operation", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Operation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DCP", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DCP));
            elementDictionary.Add(System.Xml.Linq.XName.Get("HTTP", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.HTTP));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Resource", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Resource));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ExceptionReport", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ExceptionReport));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AdditionalParameter", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AdditionalParameter));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SceneLayerExtension", "http://www.opengis.net/3dps/1.0/scene"), typeof(global::OpenGis.ThreeDps.Scene.SceneLayerExtension));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Metadata", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Metadata));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BoundingBox", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.BoundingBox));
            elementDictionary.Add(System.Xml.Linq.XName.Get("WGS84BoundingBox", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.WGS84BoundingBox));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Identifier));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OutputFormat", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OutputFormat));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AvailableCRS", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AvailableCRS));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SupportedCRS", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.SupportedCRS));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AccessConstraints", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AccessConstraints));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Fees", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Fees));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Language", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Language));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Value", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Value));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DefaultValue", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DefaultValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Range", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Range));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MinimumValue", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.MinimumValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MaximumValue", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.MaximumValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Spacing", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Spacing));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Meaning", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Meaning));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DataType", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DataType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReferenceSystem", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ReferenceSystem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("UOM", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.UOM));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GetCapabilities", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.GetCapabilities));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GetResourceByID", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.GetResourceByID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Exception", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Exception));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OtherSource", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OtherSource));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DatasetDescriptionSummary", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.DatasetDescriptionSummary));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AbstractReferenceBase", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AbstractReferenceBase));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Reference", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Reference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReferenceGroup", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ReferenceGroup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Manifest", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Manifest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OperationResponse", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OperationResponse));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InputData", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.InputData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ServiceReference", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ServiceReference));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AdditionalParameters", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.AdditionalParameters));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nilValue", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.nilValue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Title", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Abstract", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Abstract));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Keywords", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Keywords));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PointOfContact", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.PointOfContact));
            elementDictionary.Add(System.Xml.Linq.XName.Get("IndividualName", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.IndividualName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OrganisationName", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.OrganisationName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PositionName", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.PositionName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Role", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.Role));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ContactInfo", "http://www.opengis.net/ows/2.0"), typeof(global::OpenGis.Ows.ContactInfo));
            elementDictionary.Add(System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("resource", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.resource));
            elementDictionary.Add(System.Xml.Linq.XName.Get("locator", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.locator));
            elementDictionary.Add(System.Xml.Linq.XName.Get("arc", "http://www.w3.org/1999/xlink"), typeof(global::www.w3.org.Item1999.xlink.arc));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(OpenGis.ThreeDps.Scene.SceneLayerExtension), typeof(global::OpenGis.ThreeDps.Scene.SceneLayerExtensionType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Metadata), typeof(global::OpenGis.Ows.MetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.BoundingBox), typeof(global::OpenGis.Ows.BoundingBoxType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.WGS84BoundingBox), typeof(global::OpenGis.Ows.WGS84BoundingBoxType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Identifier), typeof(global::OpenGis.Ows.CodeType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Value), typeof(global::OpenGis.Ows.ValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.DefaultValue), typeof(global::OpenGis.Ows.ValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Range), typeof(global::OpenGis.Ows.RangeType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.MinimumValue), typeof(global::OpenGis.Ows.ValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.MaximumValue), typeof(global::OpenGis.Ows.ValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Spacing), typeof(global::OpenGis.Ows.ValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Meaning), typeof(global::OpenGis.Ows.DomainMetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.DataType), typeof(global::OpenGis.Ows.DomainMetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.ReferenceSystem), typeof(global::OpenGis.Ows.DomainMetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.UOM), typeof(global::OpenGis.Ows.DomainMetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.GetCapabilities), typeof(global::OpenGis.Ows.GetCapabilitiesType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.GetResourceByID), typeof(global::OpenGis.Ows.GetResourceByIdType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Exception), typeof(global::OpenGis.Ows.ExceptionType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.OtherSource), typeof(global::OpenGis.Ows.MetadataType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.DatasetDescriptionSummary), typeof(global::OpenGis.Ows.DatasetDescriptionSummaryBaseType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.AbstractReferenceBase), typeof(global::OpenGis.Ows.AbstractReferenceBaseType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Reference), typeof(global::OpenGis.Ows.ReferenceType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.ReferenceGroup), typeof(global::OpenGis.Ows.ReferenceGroupType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Manifest), typeof(global::OpenGis.Ows.ManifestType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.OperationResponse), typeof(global::OpenGis.Ows.ManifestType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.InputData), typeof(global::OpenGis.Ows.ManifestType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.ServiceReference), typeof(global::OpenGis.Ows.ServiceReferenceType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.AdditionalParameters), typeof(global::OpenGis.Ows.AdditionalParametersType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.nilValue), typeof(global::OpenGis.Ows.NilValueType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Title), typeof(global::OpenGis.Ows.LanguageStringType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Abstract), typeof(global::OpenGis.Ows.LanguageStringType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Keywords), typeof(global::OpenGis.Ows.KeywordsType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.PointOfContact), typeof(global::OpenGis.Ows.ResponsiblePartyType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.Role), typeof(global::OpenGis.Ows.CodeType));
            wrapperDictionary.Add(typeof(OpenGis.Ows.ContactInfo), typeof(global::OpenGis.Ows.ContactType));
            wrapperDictionary.Add(typeof(www.w3.org.Item1999.xlink.title), typeof(global::www.w3.org.Item1999.xlink.titleEltType));
            wrapperDictionary.Add(typeof(www.w3.org.Item1999.xlink.resource), typeof(global::www.w3.org.Item1999.xlink.resourceType));
            wrapperDictionary.Add(typeof(www.w3.org.Item1999.xlink.locator), typeof(global::www.w3.org.Item1999.xlink.locatorType));
            wrapperDictionary.Add(typeof(www.w3.org.Item1999.xlink.arc), typeof(global::www.w3.org.Item1999.xlink.arcType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("AbstractMetaData", "http://www.opengis.net/ows/2.0")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public AbstractMetaData AbstractMetaData {  get {return rootObject as AbstractMetaData; } }

		public ServiceIdentification ServiceIdentification {  get {return rootObject as ServiceIdentification; } }

		public ServiceProvider ServiceProvider {  get {return rootObject as ServiceProvider; } }

		public AnyValue AnyValue {  get {return rootObject as AnyValue; } }

		public NoValues NoValues {  get {return rootObject as NoValues; } }

		public ValuesReference ValuesReference {  get {return rootObject as ValuesReference; } }

		public AllowedValues AllowedValues {  get {return rootObject as AllowedValues; } }

		public OperationsMetadata OperationsMetadata {  get {return rootObject as OperationsMetadata; } }

		public ExtendedCapabilities ExtendedCapabilities {  get {return rootObject as ExtendedCapabilities; } }

		public Operation Operation {  get {return rootObject as Operation; } }

		public DCP DCP {  get {return rootObject as DCP; } }

		public HTTP HTTP {  get {return rootObject as HTTP; } }

		public Resource Resource {  get {return rootObject as Resource; } }

		public ExceptionReport ExceptionReport {  get {return rootObject as ExceptionReport; } }

		public AdditionalParameter AdditionalParameter {  get {return rootObject as AdditionalParameter; } }

		public Metadata Metadata {  get {return rootObject as Metadata; } }

		public BoundingBox BoundingBox {  get {return rootObject as BoundingBox; } }

		public WGS84BoundingBox WGS84BoundingBox {  get {return rootObject as WGS84BoundingBox; } }

		public Identifier Identifier {  get {return rootObject as Identifier; } }

		public OutputFormat OutputFormat {  get {return rootObject as OutputFormat; } }

		public AvailableCRS AvailableCRS {  get {return rootObject as AvailableCRS; } }

		public SupportedCRS SupportedCRS {  get {return rootObject as SupportedCRS; } }

		public AccessConstraints AccessConstraints {  get {return rootObject as AccessConstraints; } }

		public Fees Fees {  get {return rootObject as Fees; } }

		public Language Language {  get {return rootObject as Language; } }

		public Value Value {  get {return rootObject as Value; } }

		public DefaultValue DefaultValue {  get {return rootObject as DefaultValue; } }

		public Range Range {  get {return rootObject as Range; } }

		public MinimumValue MinimumValue {  get {return rootObject as MinimumValue; } }

		public MaximumValue MaximumValue {  get {return rootObject as MaximumValue; } }

		public Spacing Spacing {  get {return rootObject as Spacing; } }

		public Meaning Meaning {  get {return rootObject as Meaning; } }

		public DataType DataType {  get {return rootObject as DataType; } }

		public ReferenceSystem ReferenceSystem {  get {return rootObject as ReferenceSystem; } }

		public UOM UOM {  get {return rootObject as UOM; } }

		public GetCapabilities GetCapabilities {  get {return rootObject as GetCapabilities; } }

		public GetResourceByID GetResourceByID {  get {return rootObject as GetResourceByID; } }

		public Exception Exception {  get {return rootObject as Exception; } }

		public OtherSource OtherSource {  get {return rootObject as OtherSource; } }

		public DatasetDescriptionSummary DatasetDescriptionSummary {  get {return rootObject as DatasetDescriptionSummary; } }

		public AbstractReferenceBase AbstractReferenceBase {  get {return rootObject as AbstractReferenceBase; } }

		public Reference Reference {  get {return rootObject as Reference; } }

		public ReferenceGroup ReferenceGroup {  get {return rootObject as ReferenceGroup; } }

		public Manifest Manifest {  get {return rootObject as Manifest; } }

		public OperationResponse OperationResponse {  get {return rootObject as OperationResponse; } }

		public InputData InputData {  get {return rootObject as InputData; } }

		public ServiceReference ServiceReference {  get {return rootObject as ServiceReference; } }

		public AdditionalParameters AdditionalParameters {  get {return rootObject as AdditionalParameters; } }

		public nilValue nilValue {  get {return rootObject as nilValue; } }

		public Title Title {  get {return rootObject as Title; } }

		public Abstract Abstract {  get {return rootObject as Abstract; } }

		public Keywords Keywords {  get {return rootObject as Keywords; } }

		public PointOfContact PointOfContact {  get {return rootObject as PointOfContact; } }

		public IndividualName IndividualName {  get {return rootObject as IndividualName; } }

		public OrganisationName OrganisationName {  get {return rootObject as OrganisationName; } }

		public PositionName PositionName {  get {return rootObject as PositionName; } }

		public Role Role {  get {return rootObject as Role; } }

		public ContactInfo ContactInfo {  get {return rootObject as ContactInfo; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(AbstractMetaData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ServiceIdentification root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ServiceProvider root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AnyValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NoValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ValuesReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AllowedValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OperationsMetadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ExtendedCapabilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Operation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DCP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(HTTP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ExceptionReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AdditionalParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Metadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BoundingBox root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(WGS84BoundingBox root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OutputFormat root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AvailableCRS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SupportedCRS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AccessConstraints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Fees root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Value root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DefaultValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Range root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MinimumValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MaximumValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Spacing root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Meaning root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DataType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReferenceSystem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UOM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GetCapabilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GetResourceByID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Exception root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OtherSource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DatasetDescriptionSummary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AbstractReferenceBase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Reference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReferenceGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Manifest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OperationResponse root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InputData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ServiceReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AdditionalParameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nilValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Abstract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Keywords root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PointOfContact root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(IndividualName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OrganisationName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PositionName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Role root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ContactInfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::OpenGis.Ows.AbstractMetaData AbstractMetaData {  get {return rootObject as global::OpenGis.Ows.AbstractMetaData; } }

		public global::OpenGis.Ows.ServiceIdentification ServiceIdentification {  get {return rootObject as global::OpenGis.Ows.ServiceIdentification; } }

		public global::OpenGis.Ows.ServiceProvider ServiceProvider {  get {return rootObject as global::OpenGis.Ows.ServiceProvider; } }

		public global::OpenGis.Ows.AnyValue AnyValue {  get {return rootObject as global::OpenGis.Ows.AnyValue; } }

		public global::OpenGis.Ows.NoValues NoValues {  get {return rootObject as global::OpenGis.Ows.NoValues; } }

		public global::OpenGis.Ows.ValuesReference ValuesReference {  get {return rootObject as global::OpenGis.Ows.ValuesReference; } }

		public global::OpenGis.Ows.AllowedValues AllowedValues {  get {return rootObject as global::OpenGis.Ows.AllowedValues; } }

		public global::OpenGis.Ows.OperationsMetadata OperationsMetadata {  get {return rootObject as global::OpenGis.Ows.OperationsMetadata; } }

		public global::OpenGis.Ows.ExtendedCapabilities ExtendedCapabilities {  get {return rootObject as global::OpenGis.Ows.ExtendedCapabilities; } }

		public global::OpenGis.Ows.Operation Operation {  get {return rootObject as global::OpenGis.Ows.Operation; } }

		public global::OpenGis.Ows.DCP DCP {  get {return rootObject as global::OpenGis.Ows.DCP; } }

		public global::OpenGis.Ows.HTTP HTTP {  get {return rootObject as global::OpenGis.Ows.HTTP; } }

		public global::OpenGis.Ows.Resource Resource {  get {return rootObject as global::OpenGis.Ows.Resource; } }

		public global::OpenGis.Ows.ExceptionReport ExceptionReport {  get {return rootObject as global::OpenGis.Ows.ExceptionReport; } }

		public global::OpenGis.Ows.AdditionalParameter AdditionalParameter {  get {return rootObject as global::OpenGis.Ows.AdditionalParameter; } }

		public global::OpenGis.Ows.Metadata Metadata {  get {return rootObject as global::OpenGis.Ows.Metadata; } }

		public global::OpenGis.Ows.BoundingBox BoundingBox {  get {return rootObject as global::OpenGis.Ows.BoundingBox; } }

		public global::OpenGis.Ows.WGS84BoundingBox WGS84BoundingBox {  get {return rootObject as global::OpenGis.Ows.WGS84BoundingBox; } }

		public global::OpenGis.Ows.Identifier Identifier {  get {return rootObject as global::OpenGis.Ows.Identifier; } }

		public global::OpenGis.Ows.OutputFormat OutputFormat {  get {return rootObject as global::OpenGis.Ows.OutputFormat; } }

		public global::OpenGis.Ows.AvailableCRS AvailableCRS {  get {return rootObject as global::OpenGis.Ows.AvailableCRS; } }

		public global::OpenGis.Ows.SupportedCRS SupportedCRS {  get {return rootObject as global::OpenGis.Ows.SupportedCRS; } }

		public global::OpenGis.Ows.AccessConstraints AccessConstraints {  get {return rootObject as global::OpenGis.Ows.AccessConstraints; } }

		public global::OpenGis.Ows.Fees Fees {  get {return rootObject as global::OpenGis.Ows.Fees; } }

		public global::OpenGis.Ows.Language Language {  get {return rootObject as global::OpenGis.Ows.Language; } }

		public global::OpenGis.Ows.Value Value {  get {return rootObject as global::OpenGis.Ows.Value; } }

		public global::OpenGis.Ows.DefaultValue DefaultValue {  get {return rootObject as global::OpenGis.Ows.DefaultValue; } }

		public global::OpenGis.Ows.Range Range {  get {return rootObject as global::OpenGis.Ows.Range; } }

		public global::OpenGis.Ows.MinimumValue MinimumValue {  get {return rootObject as global::OpenGis.Ows.MinimumValue; } }

		public global::OpenGis.Ows.MaximumValue MaximumValue {  get {return rootObject as global::OpenGis.Ows.MaximumValue; } }

		public global::OpenGis.Ows.Spacing Spacing {  get {return rootObject as global::OpenGis.Ows.Spacing; } }

		public global::OpenGis.Ows.Meaning Meaning {  get {return rootObject as global::OpenGis.Ows.Meaning; } }

		public global::OpenGis.Ows.DataType DataType {  get {return rootObject as global::OpenGis.Ows.DataType; } }

		public global::OpenGis.Ows.ReferenceSystem ReferenceSystem {  get {return rootObject as global::OpenGis.Ows.ReferenceSystem; } }

		public global::OpenGis.Ows.UOM UOM {  get {return rootObject as global::OpenGis.Ows.UOM; } }

		public global::OpenGis.Ows.GetCapabilities GetCapabilities {  get {return rootObject as global::OpenGis.Ows.GetCapabilities; } }

		public global::OpenGis.Ows.GetResourceByID GetResourceByID {  get {return rootObject as global::OpenGis.Ows.GetResourceByID; } }

		public global::OpenGis.Ows.Exception Exception {  get {return rootObject as global::OpenGis.Ows.Exception; } }

		public global::OpenGis.Ows.OtherSource OtherSource {  get {return rootObject as global::OpenGis.Ows.OtherSource; } }

		public global::OpenGis.Ows.DatasetDescriptionSummary DatasetDescriptionSummary {  get {return rootObject as global::OpenGis.Ows.DatasetDescriptionSummary; } }

		public global::OpenGis.Ows.AbstractReferenceBase AbstractReferenceBase {  get {return rootObject as global::OpenGis.Ows.AbstractReferenceBase; } }

		public global::OpenGis.Ows.Reference Reference {  get {return rootObject as global::OpenGis.Ows.Reference; } }

		public global::OpenGis.Ows.ReferenceGroup ReferenceGroup {  get {return rootObject as global::OpenGis.Ows.ReferenceGroup; } }

		public global::OpenGis.Ows.Manifest Manifest {  get {return rootObject as global::OpenGis.Ows.Manifest; } }

		public global::OpenGis.Ows.OperationResponse OperationResponse {  get {return rootObject as global::OpenGis.Ows.OperationResponse; } }

		public global::OpenGis.Ows.InputData InputData {  get {return rootObject as global::OpenGis.Ows.InputData; } }

		public global::OpenGis.Ows.ServiceReference ServiceReference {  get {return rootObject as global::OpenGis.Ows.ServiceReference; } }

		public global::OpenGis.Ows.AdditionalParameters AdditionalParameters {  get {return rootObject as global::OpenGis.Ows.AdditionalParameters; } }

		public global::OpenGis.Ows.nilValue nilValue {  get {return rootObject as global::OpenGis.Ows.nilValue; } }

		public global::OpenGis.Ows.Title Title {  get {return rootObject as global::OpenGis.Ows.Title; } }

		public global::OpenGis.Ows.Abstract Abstract {  get {return rootObject as global::OpenGis.Ows.Abstract; } }

		public global::OpenGis.Ows.Keywords Keywords {  get {return rootObject as global::OpenGis.Ows.Keywords; } }

		public global::OpenGis.Ows.PointOfContact PointOfContact {  get {return rootObject as global::OpenGis.Ows.PointOfContact; } }

		public global::OpenGis.Ows.IndividualName IndividualName {  get {return rootObject as global::OpenGis.Ows.IndividualName; } }

		public global::OpenGis.Ows.OrganisationName OrganisationName {  get {return rootObject as global::OpenGis.Ows.OrganisationName; } }

		public global::OpenGis.Ows.PositionName PositionName {  get {return rootObject as global::OpenGis.Ows.PositionName; } }

		public global::OpenGis.Ows.Role Role {  get {return rootObject as global::OpenGis.Ows.Role; } }

		public global::OpenGis.Ows.ContactInfo ContactInfo {  get {return rootObject as global::OpenGis.Ows.ContactInfo; } }

		public global::OpenGis.ThreeDps.Scene.SceneLayerExtension SceneLayerExtension {  get {return rootObject as global::OpenGis.ThreeDps.Scene.SceneLayerExtension; } }

		public global::www.w3.org.Item1999.xlink.title title1 {  get {return rootObject as global::www.w3.org.Item1999.xlink.title; } }

		public global::www.w3.org.Item1999.xlink.resource resource1 {  get {return rootObject as global::www.w3.org.Item1999.xlink.resource; } }

		public global::www.w3.org.Item1999.xlink.locator locator {  get {return rootObject as global::www.w3.org.Item1999.xlink.locator; } }

		public global::www.w3.org.Item1999.xlink.arc arc {  get {return rootObject as global::www.w3.org.Item1999.xlink.arc; } }
        
        private XRoot() {
        }
        
        public XRoot(global::OpenGis.Ows.AbstractMetaData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ServiceIdentification root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ServiceProvider root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AnyValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.NoValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ValuesReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AllowedValues root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.OperationsMetadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ExtendedCapabilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Operation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.DCP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.HTTP root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ExceptionReport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AdditionalParameter root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Metadata root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.BoundingBox root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.WGS84BoundingBox root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.OutputFormat root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AvailableCRS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.SupportedCRS root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AccessConstraints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Fees root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Value root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.DefaultValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Range root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.MinimumValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.MaximumValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Spacing root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Meaning root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.DataType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ReferenceSystem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.UOM root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.GetCapabilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.GetResourceByID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Exception root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.OtherSource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.DatasetDescriptionSummary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AbstractReferenceBase root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Reference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ReferenceGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Manifest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.OperationResponse root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.InputData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ServiceReference root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.AdditionalParameters root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.nilValue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Abstract root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Keywords root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.PointOfContact root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.IndividualName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.OrganisationName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.PositionName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.Role root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.Ows.ContactInfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::OpenGis.ThreeDps.Scene.SceneLayerExtension root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.w3.org.Item1999.xlink.title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.w3.org.Item1999.xlink.resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.w3.org.Item1999.xlink.locator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::www.w3.org.Item1999.xlink.arc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace www.w3.org.XML.Item1998.@namespace {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using OpenGis.Ows;
    
    
    public sealed class lang {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private lang() {
        }
    }
}
namespace OpenGis.ThreeDps.Scene {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using OpenGis.Ows;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
    /// </para>
    /// </summary>
    public partial class SceneLayerExtensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableFormatXName = System.Xml.Linq.XName.Get("AvailableFormat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AvailableFormatField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableOffsetXName = System.Xml.Linq.XName.Get("AvailableOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OpenGis.ThreeDps.Core.Position3DType> AvailableOffsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableOffsetModeXName = System.Xml.Linq.XName.Get("AvailableOffsetMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AvailableOffsetModeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SceneLayerExtensionType", "http://www.opengis.net/3dps/1.0/scene");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SceneLayerExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<SceneLayerExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SceneLayerExtensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AvailableFormatXName), new NamedContentModelEntity(AvailableOffsetXName), new NamedContentModelEntity(AvailableOffsetModeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public SceneLayerExtensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableFormat {
            get {
                if ((this.AvailableFormatField == null)) {
                    this.AvailableFormatField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AvailableFormatXName);
                }
                return this.AvailableFormatField;
            }
            set {
                if ((value == null)) {
                    this.AvailableFormatField = null;
                }
                else {
                    if ((this.AvailableFormatField == null)) {
                        this.AvailableFormatField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AvailableFormatXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AvailableFormatField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<OpenGis.ThreeDps.Core.Position3DType> AvailableOffset {
            get {
                if ((this.AvailableOffsetField == null)) {
                    this.AvailableOffsetField = new XTypedList<OpenGis.ThreeDps.Core.Position3DType>(this, LinqToXsdTypeManager.Instance, AvailableOffsetXName);
                }
                return this.AvailableOffsetField;
            }
            set {
                if ((value == null)) {
                    this.AvailableOffsetField = null;
                }
                else {
                    if ((this.AvailableOffsetField == null)) {
                        this.AvailableOffsetField = XTypedList<OpenGis.ThreeDps.Core.Position3DType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvailableOffsetXName);
                    }
                    else {
                        XTypedServices.SetList<OpenGis.ThreeDps.Core.Position3DType>(this.AvailableOffsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableOffsetMode {
            get {
                if ((this.AvailableOffsetModeField == null)) {
                    this.AvailableOffsetModeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AvailableOffsetModeXName);
                }
                return this.AvailableOffsetModeField;
            }
            set {
                if ((value == null)) {
                    this.AvailableOffsetModeField = null;
                }
                else {
                    if ((this.AvailableOffsetModeField == null)) {
                        this.AvailableOffsetModeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AvailableOffsetModeXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AvailableOffsetModeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SceneLayerExtensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AvailableFormatXName, typeof(string));
            localElementDictionary.Add(AvailableOffsetXName, typeof(OpenGis.ThreeDps.Core.Position3DType));
            localElementDictionary.Add(AvailableOffsetModeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
    /// </para>
    /// </summary>
    public partial class GetSceneType : global::OpenGis.ThreeDps.Core.AbstractGetPortrayalType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetXName = System.Xml.Linq.XName.Get("Offset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetModeXName = System.Xml.Linq.XName.Get("OffsetMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewpointsXName = System.Xml.Linq.XName.Get("Viewpoints", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetSceneType", "http://www.opengis.net/3dps/1.0/scene");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GetSceneType(XElement xe) { return XTypedServices.ToXTypedElement<GetSceneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GetSceneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CRSXName), new NamedContentModelEntity(BoundingBoxXName), new NamedContentModelEntity(SpatialSelectionXName), new NamedContentModelEntity(LayersXName), new NamedContentModelEntity(StylesXName), new NamedContentModelEntity(BackgroundXName), new NamedContentModelEntity(LODsXName), new NamedContentModelEntity(LODSelectionXName), new NamedContentModelEntity(OverallStylesXName), new NamedContentModelEntity(DeliveryOptionsXName), new NamedContentModelEntity(ExceptionsXName), new NamedContentModelEntity(OffsetXName), new NamedContentModelEntity(OffsetModeXName), new NamedContentModelEntity(FormatXName), new NamedContentModelEntity(ViewpointsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
        /// </para>
        /// </summary>
        public GetSceneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
        /// </para>
        /// </summary>
        public virtual OpenGis.ThreeDps.Core.Position3DType Offset {
            get {
                XElement x = this.GetElement(OffsetXName);
                return ((OpenGis.ThreeDps.Core.Position3DType)(x));
            }
            set {
                this.SetElement(OffsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
        /// </para>
        /// </summary>
        public virtual string OffsetMode {
            get {
                XElement x = this.GetElement(OffsetModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(OffsetModeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                XElement x = this.GetElement(FormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(FormatXName, value, "Format", global::OpenGis.Ows.MimeType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?, Offset?, OffsetMode?, Format, Viewpoints?)
        /// </para>
        /// </summary>
        public virtual string Viewpoints {
            get {
                XElement x = this.GetElement(ViewpointsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ViewpointsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetSceneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CRSXName, typeof(System.Uri));
            localElementDictionary.Add(BoundingBoxXName, typeof(OpenGis.Ows.BoundingBoxType));
            localElementDictionary.Add(SpatialSelectionXName, typeof(string));
            localElementDictionary.Add(LayersXName, typeof(string));
            localElementDictionary.Add(StylesXName, typeof(string));
            localElementDictionary.Add(BackgroundXName, typeof(string));
            localElementDictionary.Add(LODsXName, typeof(string));
            localElementDictionary.Add(LODSelectionXName, typeof(string));
            localElementDictionary.Add(OverallStylesXName, typeof(string));
            localElementDictionary.Add(DeliveryOptionsXName, typeof(string));
            localElementDictionary.Add(ExceptionsXName, typeof(string));
            localElementDictionary.Add(OffsetXName, typeof(OpenGis.ThreeDps.Core.Position3DType));
            localElementDictionary.Add(OffsetModeXName, typeof(string));
            localElementDictionary.Add(FormatXName, typeof(string));
            localElementDictionary.Add(ViewpointsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SupportsArbitraryOffset?)
    /// </para>
    /// </summary>
    public partial class ScenePortrayalCapabilitiesExtensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SupportsArbitraryOffsetXName = System.Xml.Linq.XName.Get("SupportsArbitraryOffset", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScenePortrayalCapabilitiesExtensionType", "http://www.opengis.net/3dps/1.0/scene");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ScenePortrayalCapabilitiesExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<ScenePortrayalCapabilitiesExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScenePortrayalCapabilitiesExtensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SupportsArbitraryOffsetXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SupportsArbitraryOffset?)
        /// </para>
        /// </summary>
        public ScenePortrayalCapabilitiesExtensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupportsArbitraryOffset?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? SupportsArbitraryOffset {
            get {
                XElement x = this.GetElement(SupportsArbitraryOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SupportsArbitraryOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScenePortrayalCapabilitiesExtensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SupportsArbitraryOffsetXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class SceneLayerExtension : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SceneLayerExtensionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SceneLayerExtension", "http://www.opengis.net/3dps/1.0/scene");
        
		public static explicit operator SceneLayerExtension(XElement xe) { return XTypedServices.ToXTypedElement<SceneLayerExtension, SceneLayerExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SceneLayerExtension() {
            SetInnerType(new SceneLayerExtensionType());
        }
        
        public SceneLayerExtension(SceneLayerExtensionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual SceneLayerExtensionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableFormat {
            get {
                return this.ContentField.AvailableFormat;
            }
            set {
                this.ContentField.AvailableFormat = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<OpenGis.ThreeDps.Core.Position3DType> AvailableOffset {
            get {
                return this.ContentField.AvailableOffset;
            }
            set {
                this.ContentField.AvailableOffset = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableFormat*, AvailableOffset*, AvailableOffsetMode*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableOffsetMode {
            get {
                return this.ContentField.AvailableOffsetMode;
            }
            set {
                this.ContentField.AvailableOffsetMode = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SceneLayerExtension Load(string xmlFile) {
            return XTypedServices.Load<SceneLayerExtension, SceneLayerExtensionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SceneLayerExtension Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SceneLayerExtension, SceneLayerExtensionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static SceneLayerExtension Parse(string xml) {
            return XTypedServices.Parse<SceneLayerExtension, SceneLayerExtensionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new SceneLayerExtension(((SceneLayerExtensionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(SceneLayerExtensionType ContentField) {
            this.ContentField = ((SceneLayerExtensionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public SceneLayerExtension SceneLayerExtension {  get {return rootObject as SceneLayerExtension; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(SceneLayerExtension root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace www.w3.org.Item1999.xlink {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using OpenGis.Ows;
    
    
    public enum typeType {
        
        simple,
        
        extended,
        
        title,
        
        resource,
        
        locator,
        
        arc,
    }
    
    public sealed class typeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "simple",
                        "extended",
                        "title",
                        "resource",
                        "locator",
                        "arc"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private typeTypeValidator() {
        }
    }
    
    public sealed class hrefType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), null);
        
        private hrefType() {
        }
    }
    
    public sealed class roleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private roleType() {
        }
    }
    
    public sealed class arcroleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private arcroleType() {
        }
    }
    
    public sealed class titleAttrType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private titleAttrType() {
        }
    }
    
    public sealed class showType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "new",
                        "replace",
                        "embed",
                        "other",
                        "none"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private showType() {
        }
    }
    
    public enum actuateType {
        
        onLoad,
        
        onRequest,
        
        other,
        
        none,
    }
    
    public sealed class actuateTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "onLoad",
                        "onRequest",
                        "other",
                        "none"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private actuateTypeValidator() {
        }
    }
    
    public sealed class labelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName), null);
        
        private labelType() {
        }
    }
    
    public sealed class fromType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName), null);
        
        private fromType() {
        }
    }
    
    public sealed class toType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName), null);
        
        private toType() {
        }
    }
    
    /// <summary>
    /// <para>
    ///      Intended for use as the type of user-declared elements to make
    ///                them     simple links.    
    /// </para>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class simple : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("simple", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator simple(XElement xe) { return XTypedServices.ToXTypedElement<simple>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static simple() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        ///      Intended for use as the type of user-declared elements to make
        ///                them     simple links.    
        /// </para>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public simple() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.actuateType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.actuateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simple>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://www.w3.org/1999/xlink"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    ///      Intended for use as the type of user-declared elements to make
    ///                them     extended links.     Note that the elements referenced in the content model
    ///                are all abstract.     The intention is that by simply declaring elements with these
    ///                as their     substitutionGroup, all the right things will happen.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (title | resource | locator | arc)*
    /// </para>
    /// </summary>
    public partial class extended : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resourceXName = System.Xml.Linq.XName.Get("resource", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<resource> resourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locatorXName = System.Xml.Linq.XName.Get("locator", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<locator> locatorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcXName = System.Xml.Linq.XName.Get("arc", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<arc> arcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extended", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator extended(XElement xe) { return XTypedServices.ToXTypedElement<extended>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extended() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(titleXName), new NamedContentModelEntity(resourceXName), new NamedContentModelEntity(locatorXName), new NamedContentModelEntity(arcXName));
        }
        
        /// <summary>
        /// <para>
        ///      Intended for use as the type of user-declared elements to make
        ///                them     extended links.     Note that the elements referenced in the content model
        ///                are all abstract.     The intention is that by simply declaring elements with these
        ///                as their     substitutionGroup, all the right things will happen.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (title | resource | locator | arc)*
        /// </para>
        /// </summary>
        public extended() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (title | resource | locator | arc)*
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (title | resource | locator | arc)*
        /// </para>
        /// </summary>
        public virtual IList<resource> resource {
            get {
                if ((this.resourceField == null)) {
                    this.resourceField = new XTypedList<resource>(this, LinqToXsdTypeManager.Instance, resourceXName);
                }
                return this.resourceField;
            }
            set {
                if ((value == null)) {
                    this.resourceField = null;
                }
                else {
                    if ((this.resourceField == null)) {
                        this.resourceField = XTypedList<resource>.Initialize(this, LinqToXsdTypeManager.Instance, value, resourceXName);
                    }
                    else {
                        XTypedServices.SetList<resource>(this.resourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (title | resource | locator | arc)*
        /// </para>
        /// </summary>
        public virtual IList<locator> locator {
            get {
                if ((this.locatorField == null)) {
                    this.locatorField = new XTypedList<locator>(this, LinqToXsdTypeManager.Instance, locatorXName);
                }
                return this.locatorField;
            }
            set {
                if ((value == null)) {
                    this.locatorField = null;
                }
                else {
                    if ((this.locatorField == null)) {
                        this.locatorField = XTypedList<locator>.Initialize(this, LinqToXsdTypeManager.Instance, value, locatorXName);
                    }
                    else {
                        XTypedServices.SetList<locator>(this.locatorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (title | resource | locator | arc)*
        /// </para>
        /// </summary>
        public virtual IList<arc> arc {
            get {
                if ((this.arcField == null)) {
                    this.arcField = new XTypedList<arc>(this, LinqToXsdTypeManager.Instance, arcXName);
                }
                return this.arcField;
            }
            set {
                if ((value == null)) {
                    this.arcField = null;
                }
                else {
                    if ((this.arcField == null)) {
                        this.arcField = XTypedList<arc>.Initialize(this, LinqToXsdTypeManager.Instance, value, arcXName);
                    }
                    else {
                        XTypedServices.SetList<arc>(this.arcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extended>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(title));
            localElementDictionary.Add(resourceXName, typeof(resource));
            localElementDictionary.Add(locatorXName, typeof(locator));
            localElementDictionary.Add(arcXName, typeof(arc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class titleEltType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("titleEltType", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator titleEltType(XElement xe) { return XTypedServices.ToXTypedElement<titleEltType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static titleEltType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public titleEltType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///       xml:lang is not required, but provides much of the
        ///                    motivation for title elements in addition to attributes, and so      is provided
        ///                    here for convenience.     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseUnionValue(x, lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, langXName, lang.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<titleEltType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://www.w3.org/1999/xlink"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class resourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("resourceType", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator resourceType(XElement xe) { return XTypedServices.ToXTypedElement<resourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static resourceType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public resourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<resourceType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://www.w3.org/1999/xlink"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title*)
    /// </para>
    /// </summary>
    public partial class locatorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("locatorType", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator locatorType(XElement xe) { return XTypedServices.ToXTypedElement<locatorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static locatorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public locatorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///       label is not required, but locators have no particular
        ///                    XLink function if they are not labeled.     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<locatorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(title));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title*)
    /// </para>
    /// </summary>
    public partial class arcType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<title> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcroleXName = System.Xml.Linq.XName.Get("arcrole", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName title1XName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName showXName = System.Xml.Linq.XName.Get("show", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName actuateXName = System.Xml.Linq.XName.Get("actuate", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fromXName = System.Xml.Linq.XName.Get("from", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName toXName = System.Xml.Linq.XName.Get("to", "http://www.w3.org/1999/xlink");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arcType", "http://www.w3.org/1999/xlink");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator arcType(XElement xe) { return XTypedServices.ToXTypedElement<arcType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static arcType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(titleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public arcType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<title>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<title>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<title>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return ((www.w3.org.Item1999.xlink.typeType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.typeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                XAttribute x = this.Attribute(arcroleXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(arcroleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                XAttribute x = this.Attribute(title1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(title1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                XAttribute x = this.Attribute(showXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(showXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                XAttribute x = this.Attribute(actuateXName);
                if ((x == null)) {
                    return null;
                }
                return ((www.w3.org.Item1999.xlink.actuateType)(Enum.Parse(typeof(www.w3.org.Item1999.xlink.actuateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(actuateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string from {
            get {
                XAttribute x = this.Attribute(fromXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(fromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///       from and to have default behavior when values are missing
        ///                
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string to {
            get {
                XAttribute x = this.Attribute(toXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(toXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arcType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(titleXName, typeof(title));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public abstract partial class title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private titleEltType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/1999/xlink");
        
		public static explicit operator title(XElement xe) {  return (title)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public title() {
            SetInnerType(new titleEltType());
        }
        
        public title(titleEltType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual titleEltType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.ContentField.Any;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///       xml:lang is not required, but provides much of the
        ///                    motivation for title elements in addition to attributes, and so      is provided
        ///                    here for convenience.     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static title Load(string xmlFile) {
            return ((title)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static title Load(System.IO.TextReader xmlFile) {
            return ((title)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static title Parse(string xml) {
            return ((title)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(titleEltType ContentField) {
            this.ContentField = ((titleEltType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class resource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private resourceType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("resource", "http://www.w3.org/1999/xlink");
        
		public static explicit operator resource(XElement xe) {  return (resource)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public resource() {
            SetInnerType(new resourceType());
        }
        
        public resource(resourceType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual resourceType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.ContentField.Any;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                return this.ContentField.label;
            }
            set {
                this.ContentField.label = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static resource Load(string xmlFile) {
            return ((resource)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static resource Load(System.IO.TextReader xmlFile) {
            return ((resource)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static resource Parse(string xml) {
            return ((resource)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(resourceType ContentField) {
            this.ContentField = ((resourceType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class locator : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private locatorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("locator", "http://www.w3.org/1999/xlink");
        
		public static explicit operator locator(XElement xe) {  return (locator)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public locator() {
            SetInnerType(new locatorType());
        }
        
        public locator(locatorType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual locatorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                return this.ContentField.href;
            }
            set {
                this.ContentField.href = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                return this.ContentField.title1;
            }
            set {
                this.ContentField.title1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///       label is not required, but locators have no particular
        ///                    XLink function if they are not labeled.     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                return this.ContentField.label;
            }
            set {
                this.ContentField.label = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static locator Load(string xmlFile) {
            return ((locator)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static locator Load(System.IO.TextReader xmlFile) {
            return ((locator)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static locator Parse(string xml) {
            return ((locator)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(locatorType ContentField) {
            this.ContentField = ((locatorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class arc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private arcType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arc", "http://www.w3.org/1999/xlink");
        
		public static explicit operator arc(XElement xe) {  return (arc)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arc() {
            SetInnerType(new arcType());
        }
        
        public arc(arcType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual arcType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title*)
        /// </para>
        /// </summary>
        public virtual IList<title> title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.typeType type {
            get {
                return this.ContentField.type;
            }
            set {
                this.ContentField.type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri arcrole {
            get {
                return this.ContentField.arcrole;
            }
            set {
                this.ContentField.arcrole = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title1 {
            get {
                return this.ContentField.title1;
            }
            set {
                this.ContentField.title1 = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string show {
            get {
                return this.ContentField.show;
            }
            set {
                this.ContentField.show = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual www.w3.org.Item1999.xlink.actuateType? actuate {
            get {
                return this.ContentField.actuate;
            }
            set {
                this.ContentField.actuate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string from {
            get {
                return this.ContentField.from;
            }
            set {
                this.ContentField.from = value;
            }
        }
        
        /// <summary>
        /// <para>
        ///       from and to have default behavior when values are missing
        ///                
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string to {
            get {
                return this.ContentField.to;
            }
            set {
                this.ContentField.to = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static arc Load(string xmlFile) {
            return ((arc)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static arc Load(System.IO.TextReader xmlFile) {
            return ((arc)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static arc Parse(string xml) {
            return ((arc)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(arcType ContentField) {
            this.ContentField = ((arcType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public title title {  get {return rootObject as title; } }

		public resource resource {  get {return rootObject as resource; } }

		public locator locator {  get {return rootObject as locator; } }

		public arc arc {  get {return rootObject as arc; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(locator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(arc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace OpenGis.ThreeDps.Core {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using OpenGis.Ows;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
    /// </para>
    /// </summary>
    public abstract partial class AbstractGetPortrayalType : global::OpenGis.ThreeDps.Core.RequestBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CRSXName = System.Xml.Linq.XName.Get("CRS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundingBoxXName = System.Xml.Linq.XName.Get("BoundingBox", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpatialSelectionXName = System.Xml.Linq.XName.Get("SpatialSelection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LayersXName = System.Xml.Linq.XName.Get("Layers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StylesXName = System.Xml.Linq.XName.Get("Styles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackgroundXName = System.Xml.Linq.XName.Get("Background", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LODsXName = System.Xml.Linq.XName.Get("LODs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LODSelectionXName = System.Xml.Linq.XName.Get("LODSelection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverallStylesXName = System.Xml.Linq.XName.Get("OverallStyles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeliveryOptionsXName = System.Xml.Linq.XName.Get("DeliveryOptions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DeliveryOptionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExceptionsXName = System.Xml.Linq.XName.Get("Exceptions", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractGetPortrayalType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbstractGetPortrayalType(XElement xe) {  return (AbstractGetPortrayalType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbstractGetPortrayalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CRSXName), new NamedContentModelEntity(BoundingBoxXName), new NamedContentModelEntity(SpatialSelectionXName), new NamedContentModelEntity(LayersXName), new NamedContentModelEntity(StylesXName), new NamedContentModelEntity(BackgroundXName), new NamedContentModelEntity(LODsXName), new NamedContentModelEntity(LODSelectionXName), new NamedContentModelEntity(OverallStylesXName), new NamedContentModelEntity(DeliveryOptionsXName), new NamedContentModelEntity(ExceptionsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public AbstractGetPortrayalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual System.Uri CRS {
            get {
                XElement x = this.GetElement(CRSXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(CRSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.BoundingBoxType BoundingBox {
            get {
                XElement x = this.GetElement(BoundingBoxXName);
                return ((OpenGis.Ows.BoundingBoxType)(x));
            }
            set {
                this.SetElement(BoundingBoxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string SpatialSelection {
            get {
                XElement x = this.GetElement(SpatialSelectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SpatialSelectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string Layers {
            get {
                XElement x = this.GetElement(LayersXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(LayersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string Styles {
            get {
                XElement x = this.GetElement(StylesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(StylesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string Background {
            get {
                XElement x = this.GetElement(BackgroundXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BackgroundXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string LODs {
            get {
                XElement x = this.GetElement(LODsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(LODsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string LODSelection {
            get {
                XElement x = this.GetElement(LODSelectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(LODSelectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string OverallStyles {
            get {
                XElement x = this.GetElement(OverallStylesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(OverallStylesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual IList<string> DeliveryOptions {
            get {
                if ((this.DeliveryOptionsField == null)) {
                    this.DeliveryOptionsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DeliveryOptionsXName);
                }
                return this.DeliveryOptionsField;
            }
            set {
                if ((value == null)) {
                    this.DeliveryOptionsField = null;
                }
                else {
                    if ((this.DeliveryOptionsField == null)) {
                        this.DeliveryOptionsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DeliveryOptionsXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DeliveryOptionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CRS, BoundingBox, SpatialSelection?, Layers, Styles?, Background?, LODs?, LODSelection?, OverallStyles?, DeliveryOptions*, Exceptions?)
        /// </para>
        /// </summary>
        public virtual string Exceptions {
            get {
                XElement x = this.GetElement(ExceptionsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ExceptionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CRSXName, typeof(System.Uri));
            localElementDictionary.Add(BoundingBoxXName, typeof(OpenGis.Ows.BoundingBoxType));
            localElementDictionary.Add(SpatialSelectionXName, typeof(string));
            localElementDictionary.Add(LayersXName, typeof(string));
            localElementDictionary.Add(StylesXName, typeof(string));
            localElementDictionary.Add(BackgroundXName, typeof(string));
            localElementDictionary.Add(LODsXName, typeof(string));
            localElementDictionary.Add(LODSelectionXName, typeof(string));
            localElementDictionary.Add(OverallStylesXName, typeof(string));
            localElementDictionary.Add(DeliveryOptionsXName, typeof(string));
            localElementDictionary.Add(ExceptionsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?, Contents?, PortrayalCapabilities?)
    /// </para>
    /// </summary>
    public partial class CapabilitiesType : global::OpenGis.Ows.CapabilitiesBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentsXName = System.Xml.Linq.XName.Get("Contents", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PortrayalCapabilitiesXName = System.Xml.Linq.XName.Get("PortrayalCapabilities", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CapabilitiesType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CapabilitiesType(XElement xe) { return XTypedServices.ToXTypedElement<CapabilitiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CapabilitiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ServiceIdentificationXName), new NamedContentModelEntity(ServiceProviderXName), new NamedContentModelEntity(OperationsMetadataXName), new NamedContentModelEntity(LanguagesXName), new NamedContentModelEntity(ContentsXName), new NamedContentModelEntity(PortrayalCapabilitiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?, Contents?, PortrayalCapabilities?)
        /// </para>
        /// </summary>
        public CapabilitiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?, Contents?, PortrayalCapabilities?)
        /// </para>
        /// </summary>
        public virtual ContentsType Contents {
            get {
                XElement x = this.GetElement(ContentsXName);
                return ((ContentsType)(x));
            }
            set {
                this.SetElement(ContentsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ServiceIdentification?, ServiceProvider?, OperationsMetadata?, Languages?, Contents?, PortrayalCapabilities?)
        /// </para>
        /// </summary>
        public virtual PortrayalCapabilitiesType PortrayalCapabilities {
            get {
                XElement x = this.GetElement(PortrayalCapabilitiesXName);
                return ((PortrayalCapabilitiesType)(x));
            }
            set {
                this.SetElement(PortrayalCapabilitiesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CapabilitiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ServiceIdentificationXName, typeof(OpenGis.Ows.ServiceIdentification));
            localElementDictionary.Add(ServiceProviderXName, typeof(OpenGis.Ows.ServiceProvider));
            localElementDictionary.Add(OperationsMetadataXName, typeof(OpenGis.Ows.OperationsMetadata));
            localElementDictionary.Add(LanguagesXName, typeof(void));
            localElementDictionary.Add(ContentsXName, typeof(ContentsType));
            localElementDictionary.Add(PortrayalCapabilitiesXName, typeof(PortrayalCapabilitiesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public abstract partial class RequestBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serviceXName = System.Xml.Linq.XName.Get("service", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName requestXName = System.Xml.Linq.XName.Get("request", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RequestBaseType", "http://www.opengis.net/3dps/1.0/core");
        
		public static explicit operator RequestBaseType(XElement xe) {  return (RequestBaseType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RequestBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string service {
            get {
                XAttribute x = this.Attribute(serviceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serviceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string request {
            get {
                XAttribute x = this.Attribute(requestXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(requestXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, Format*)
    /// </para>
    /// </summary>
    public partial class DeliveryOptionType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FormatField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeliveryOptionType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeliveryOptionType(XElement xe) { return XTypedServices.ToXTypedElement<DeliveryOptionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeliveryOptionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new NamedContentModelEntity(FormatXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, Format*)
        /// </para>
        /// </summary>
        public DeliveryOptionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, Format*)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, Format*)
        /// </para>
        /// </summary>
        public virtual IList<string> Format {
            get {
                if ((this.FormatField == null)) {
                    this.FormatField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, FormatXName);
                }
                return this.FormatField;
            }
            set {
                if ((value == null)) {
                    this.FormatField = null;
                }
                else {
                    if ((this.FormatField == null)) {
                        this.FormatField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, FormatXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FormatField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeliveryOptionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
            localElementDictionary.Add(FormatXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
    /// </para>
    /// </summary>
    public partial class ViewpointHintType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName POCXName = System.Xml.Linq.XName.Get("POC", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName POIXName = System.Xml.Linq.XName.Get("POI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UPXName = System.Xml.Linq.XName.Get("UP", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FOVXXName = System.Xml.Linq.XName.Get("FOVX", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewpointHintType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ViewpointHintType(XElement xe) { return XTypedServices.ToXTypedElement<ViewpointHintType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewpointHintType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(POCXName), new NamedContentModelEntity(POIXName), new NamedContentModelEntity(UPXName), new NamedContentModelEntity(FOVXXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
        /// </para>
        /// </summary>
        public ViewpointHintType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
        /// </para>
        /// </summary>
        public virtual Position3DType POC {
            get {
                XElement x = this.GetElement(POCXName);
                return ((Position3DType)(x));
            }
            set {
                this.SetElement(POCXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
        /// </para>
        /// </summary>
        public virtual Position3DType POI {
            get {
                XElement x = this.GetElement(POIXName);
                return ((Position3DType)(x));
            }
            set {
                this.SetElement(POIXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
        /// </para>
        /// </summary>
        public virtual Position3DType UP {
            get {
                XElement x = this.GetElement(UPXName);
                return ((Position3DType)(x));
            }
            set {
                this.SetElement(UPXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, POC, POI, UP, FOVX)
        /// </para>
        /// </summary>
        public virtual double FOVX {
            get {
                XElement x = this.GetElement(FOVXXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(FOVXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewpointHintType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(POCXName, typeof(Position3DType));
            localElementDictionary.Add(POIXName, typeof(Position3DType));
            localElementDictionary.Add(UPXName, typeof(Position3DType));
            localElementDictionary.Add(FOVXXName, typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum Section {
        
        ServiceIdentification,
        
        ServiceProvider,
        
        OperationsMetadata,
        
        Languages,
        
        Contents,
        
        PortrayalCapabilities,
        
        All,
    }
    
    public sealed class SectionValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ServiceIdentification",
                        "ServiceProvider",
                        "OperationsMetadata",
                        "Languages",
                        "Contents",
                        "PortrayalCapabilities",
                        "All"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SectionValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
    /// </para>
    /// </summary>
    public partial class PortrayalCapabilitiesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableSpatialSelectionXName = System.Xml.Linq.XName.Get("AvailableSpatialSelection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AvailableSpatialSelectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableLODSelectionXName = System.Xml.Linq.XName.Get("AvailableLODSelection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AvailableLODSelectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SupportsBoundingBoxConversionXName = System.Xml.Linq.XName.Get("SupportsBoundingBoxConversion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableLODSchemeXName = System.Xml.Linq.XName.Get("AvailableLODScheme", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LODSchemeType> AvailableLODSchemeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewpointHintXName = System.Xml.Linq.XName.Get("ViewpointHint", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewpointHintType> ViewpointHintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeliveryOptionXName = System.Xml.Linq.XName.Get("DeliveryOption", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DeliveryOptionType> DeliveryOptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverallStyleXName = System.Xml.Linq.XName.Get("OverallStyle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OverallStyleType> OverallStyleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BackgroundXName = System.Xml.Linq.XName.Get("Background", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BackgroundType> BackgroundField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PortrayalCapabilitiesType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PortrayalCapabilitiesType(XElement xe) { return XTypedServices.ToXTypedElement<PortrayalCapabilitiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PortrayalCapabilitiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AvailableSpatialSelectionXName), new NamedContentModelEntity(AvailableLODSelectionXName), new NamedContentModelEntity(SupportsBoundingBoxConversionXName), new NamedContentModelEntity(AvailableLODSchemeXName), new NamedContentModelEntity(ViewpointHintXName), new NamedContentModelEntity(DeliveryOptionXName), new NamedContentModelEntity(OverallStyleXName), new NamedContentModelEntity(BackgroundXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public PortrayalCapabilitiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableSpatialSelection {
            get {
                if ((this.AvailableSpatialSelectionField == null)) {
                    this.AvailableSpatialSelectionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AvailableSpatialSelectionXName);
                }
                return this.AvailableSpatialSelectionField;
            }
            set {
                if ((value == null)) {
                    this.AvailableSpatialSelectionField = null;
                }
                else {
                    if ((this.AvailableSpatialSelectionField == null)) {
                        this.AvailableSpatialSelectionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AvailableSpatialSelectionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AvailableSpatialSelectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableLODSelection {
            get {
                if ((this.AvailableLODSelectionField == null)) {
                    this.AvailableLODSelectionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AvailableLODSelectionXName);
                }
                return this.AvailableLODSelectionField;
            }
            set {
                if ((value == null)) {
                    this.AvailableLODSelectionField = null;
                }
                else {
                    if ((this.AvailableLODSelectionField == null)) {
                        this.AvailableLODSelectionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AvailableLODSelectionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AvailableLODSelectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual System.Boolean? SupportsBoundingBoxConversion {
            get {
                XElement x = this.GetElement(SupportsBoundingBoxConversionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SupportsBoundingBoxConversionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<LODSchemeType> AvailableLODScheme {
            get {
                if ((this.AvailableLODSchemeField == null)) {
                    this.AvailableLODSchemeField = new XTypedList<LODSchemeType>(this, LinqToXsdTypeManager.Instance, AvailableLODSchemeXName);
                }
                return this.AvailableLODSchemeField;
            }
            set {
                if ((value == null)) {
                    this.AvailableLODSchemeField = null;
                }
                else {
                    if ((this.AvailableLODSchemeField == null)) {
                        this.AvailableLODSchemeField = XTypedList<LODSchemeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvailableLODSchemeXName);
                    }
                    else {
                        XTypedServices.SetList<LODSchemeType>(this.AvailableLODSchemeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<ViewpointHintType> ViewpointHint {
            get {
                if ((this.ViewpointHintField == null)) {
                    this.ViewpointHintField = new XTypedList<ViewpointHintType>(this, LinqToXsdTypeManager.Instance, ViewpointHintXName);
                }
                return this.ViewpointHintField;
            }
            set {
                if ((value == null)) {
                    this.ViewpointHintField = null;
                }
                else {
                    if ((this.ViewpointHintField == null)) {
                        this.ViewpointHintField = XTypedList<ViewpointHintType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ViewpointHintXName);
                    }
                    else {
                        XTypedServices.SetList<ViewpointHintType>(this.ViewpointHintField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<DeliveryOptionType> DeliveryOption {
            get {
                if ((this.DeliveryOptionField == null)) {
                    this.DeliveryOptionField = new XTypedList<DeliveryOptionType>(this, LinqToXsdTypeManager.Instance, DeliveryOptionXName);
                }
                return this.DeliveryOptionField;
            }
            set {
                if ((value == null)) {
                    this.DeliveryOptionField = null;
                }
                else {
                    if ((this.DeliveryOptionField == null)) {
                        this.DeliveryOptionField = XTypedList<DeliveryOptionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DeliveryOptionXName);
                    }
                    else {
                        XTypedServices.SetList<DeliveryOptionType>(this.DeliveryOptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<OverallStyleType> OverallStyle {
            get {
                if ((this.OverallStyleField == null)) {
                    this.OverallStyleField = new XTypedList<OverallStyleType>(this, LinqToXsdTypeManager.Instance, OverallStyleXName);
                }
                return this.OverallStyleField;
            }
            set {
                if ((value == null)) {
                    this.OverallStyleField = null;
                }
                else {
                    if ((this.OverallStyleField == null)) {
                        this.OverallStyleField = XTypedList<OverallStyleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverallStyleXName);
                    }
                    else {
                        XTypedServices.SetList<OverallStyleType>(this.OverallStyleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AvailableSpatialSelection*, AvailableLODSelection*, SupportsBoundingBoxConversion?, AvailableLODScheme*, ViewpointHint*, DeliveryOption*, OverallStyle*, Background*)
        /// </para>
        /// </summary>
        public virtual IList<BackgroundType> Background {
            get {
                if ((this.BackgroundField == null)) {
                    this.BackgroundField = new XTypedList<BackgroundType>(this, LinqToXsdTypeManager.Instance, BackgroundXName);
                }
                return this.BackgroundField;
            }
            set {
                if ((value == null)) {
                    this.BackgroundField = null;
                }
                else {
                    if ((this.BackgroundField == null)) {
                        this.BackgroundField = XTypedList<BackgroundType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BackgroundXName);
                    }
                    else {
                        XTypedServices.SetList<BackgroundType>(this.BackgroundField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PortrayalCapabilitiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AvailableSpatialSelectionXName, typeof(string));
            localElementDictionary.Add(AvailableLODSelectionXName, typeof(string));
            localElementDictionary.Add(SupportsBoundingBoxConversionXName, typeof(bool));
            localElementDictionary.Add(AvailableLODSchemeXName, typeof(LODSchemeType));
            localElementDictionary.Add(ViewpointHintXName, typeof(ViewpointHintType));
            localElementDictionary.Add(DeliveryOptionXName, typeof(DeliveryOptionType));
            localElementDictionary.Add(OverallStyleXName, typeof(OverallStyleType));
            localElementDictionary.Add(BackgroundXName, typeof(BackgroundType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, LOD+)
    /// </para>
    /// </summary>
    public partial class LODSchemeType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LODXName = System.Xml.Linq.XName.Get("LOD", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Xml.XmlQualifiedName> LODField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LODSchemeType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LODSchemeType(XElement xe) { return XTypedServices.ToXTypedElement<LODSchemeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LODSchemeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new NamedContentModelEntity(LODXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, LOD+)
        /// </para>
        /// </summary>
        public LODSchemeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, LOD+)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, LOD+)
        /// </para>
        /// </summary>
        public virtual IList<System.Xml.XmlQualifiedName> LOD {
            get {
                if ((this.LODField == null)) {
                    this.LODField = new XSimpleList<System.Xml.XmlQualifiedName>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype, LODXName);
                }
                return this.LODField;
            }
            set {
                if ((value == null)) {
                    this.LODField = null;
                }
                else {
                    if ((this.LODField == null)) {
                        this.LODField = XSimpleList<System.Xml.XmlQualifiedName>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype, value, LODXName);
                    }
                    else {
                        XTypedServices.SetList<System.Xml.XmlQualifiedName>(this.LODField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LODSchemeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
            localElementDictionary.Add(LODXName, typeof(System.Xml.XmlQualifiedName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
    /// </para>
    /// </summary>
    public partial class LayerType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableCRSXName = System.Xml.Linq.XName.Get("AvailableCRS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Uri> AvailableCRSField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableLODXName = System.Xml.Linq.XName.Get("AvailableLOD", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> AvailableLODField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeliveryOptionXName = System.Xml.Linq.XName.Get("DeliveryOption", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DeliveryOptionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LayerXName = System.Xml.Linq.XName.Get("Layer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LayerType> LayerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvailableStyleXName = System.Xml.Linq.XName.Get("AvailableStyle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StyleType> AvailableStyleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WGS84BoundingBoxXName = System.Xml.Linq.XName.Get("WGS84BoundingBox", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OpenGis.Ows.WGS84BoundingBoxType> WGS84BoundingBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetadataXName = System.Xml.Linq.XName.Get("Metadata", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OpenGis.Ows.MetadataType> MetadataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundingBoxXName = System.Xml.Linq.XName.Get("BoundingBox", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OpenGis.Ows.BoundingBoxType> BoundingBoxField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LayerType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LayerType(XElement xe) { return XTypedServices.ToXTypedElement<LayerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LayerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName), new NamedContentModelEntity(AvailableCRSXName), new NamedContentModelEntity(AvailableLODXName), new NamedContentModelEntity(DeliveryOptionXName), new NamedContentModelEntity(LayerXName), new NamedContentModelEntity(AvailableStyleXName), new NamedContentModelEntity(WGS84BoundingBoxXName), new NamedContentModelEntity(MetadataXName), new NamedContentModelEntity(BoundingBoxXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public LayerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<System.Uri> AvailableCRS {
            get {
                if ((this.AvailableCRSField == null)) {
                    this.AvailableCRSField = new XSimpleList<System.Uri>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, AvailableCRSXName);
                }
                return this.AvailableCRSField;
            }
            set {
                if ((value == null)) {
                    this.AvailableCRSField = null;
                }
                else {
                    if ((this.AvailableCRSField == null)) {
                        this.AvailableCRSField = XSimpleList<System.Uri>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype, value, AvailableCRSXName);
                    }
                    else {
                        XTypedServices.SetList<System.Uri>(this.AvailableCRSField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<string> AvailableLOD {
            get {
                if ((this.AvailableLODField == null)) {
                    this.AvailableLODField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AvailableLODXName);
                }
                return this.AvailableLODField;
            }
            set {
                if ((value == null)) {
                    this.AvailableLODField = null;
                }
                else {
                    if ((this.AvailableLODField == null)) {
                        this.AvailableLODField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AvailableLODXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.AvailableLODField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<string> DeliveryOption {
            get {
                if ((this.DeliveryOptionField == null)) {
                    this.DeliveryOptionField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DeliveryOptionXName);
                }
                return this.DeliveryOptionField;
            }
            set {
                if ((value == null)) {
                    this.DeliveryOptionField = null;
                }
                else {
                    if ((this.DeliveryOptionField == null)) {
                        this.DeliveryOptionField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DeliveryOptionXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DeliveryOptionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<LayerType> Layer {
            get {
                if ((this.LayerField == null)) {
                    this.LayerField = new XTypedList<LayerType>(this, LinqToXsdTypeManager.Instance, LayerXName);
                }
                return this.LayerField;
            }
            set {
                if ((value == null)) {
                    this.LayerField = null;
                }
                else {
                    if ((this.LayerField == null)) {
                        this.LayerField = XTypedList<LayerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LayerXName);
                    }
                    else {
                        XTypedServices.SetList<LayerType>(this.LayerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<StyleType> AvailableStyle {
            get {
                if ((this.AvailableStyleField == null)) {
                    this.AvailableStyleField = new XTypedList<StyleType>(this, LinqToXsdTypeManager.Instance, AvailableStyleXName);
                }
                return this.AvailableStyleField;
            }
            set {
                if ((value == null)) {
                    this.AvailableStyleField = null;
                }
                else {
                    if ((this.AvailableStyleField == null)) {
                        this.AvailableStyleField = XTypedList<StyleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvailableStyleXName);
                    }
                    else {
                        XTypedServices.SetList<StyleType>(this.AvailableStyleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<OpenGis.Ows.WGS84BoundingBoxType> WGS84BoundingBox {
            get {
                if ((this.WGS84BoundingBoxField == null)) {
                    this.WGS84BoundingBoxField = new XTypedList<OpenGis.Ows.WGS84BoundingBoxType>(this, LinqToXsdTypeManager.Instance, WGS84BoundingBoxXName);
                }
                return this.WGS84BoundingBoxField;
            }
            set {
                if ((value == null)) {
                    this.WGS84BoundingBoxField = null;
                }
                else {
                    if ((this.WGS84BoundingBoxField == null)) {
                        this.WGS84BoundingBoxField = XTypedList<OpenGis.Ows.WGS84BoundingBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WGS84BoundingBoxXName);
                    }
                    else {
                        XTypedServices.SetList<OpenGis.Ows.WGS84BoundingBoxType>(this.WGS84BoundingBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<OpenGis.Ows.MetadataType> Metadata {
            get {
                if ((this.MetadataField == null)) {
                    this.MetadataField = new XTypedList<OpenGis.Ows.MetadataType>(this, LinqToXsdTypeManager.Instance, MetadataXName);
                }
                return this.MetadataField;
            }
            set {
                if ((value == null)) {
                    this.MetadataField = null;
                }
                else {
                    if ((this.MetadataField == null)) {
                        this.MetadataField = XTypedList<OpenGis.Ows.MetadataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MetadataXName);
                    }
                    else {
                        XTypedServices.SetList<OpenGis.Ows.MetadataType>(this.MetadataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier, AvailableCRS+, AvailableLOD*, DeliveryOption*, Layer*, AvailableStyle*, WGS84BoundingBox*, Metadata*, BoundingBox*)
        /// </para>
        /// </summary>
        public virtual IList<OpenGis.Ows.BoundingBoxType> BoundingBox {
            get {
                if ((this.BoundingBoxField == null)) {
                    this.BoundingBoxField = new XTypedList<OpenGis.Ows.BoundingBoxType>(this, LinqToXsdTypeManager.Instance, BoundingBoxXName);
                }
                return this.BoundingBoxField;
            }
            set {
                if ((value == null)) {
                    this.BoundingBoxField = null;
                }
                else {
                    if ((this.BoundingBoxField == null)) {
                        this.BoundingBoxField = XTypedList<OpenGis.Ows.BoundingBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BoundingBoxXName);
                    }
                    else {
                        XTypedServices.SetList<OpenGis.Ows.BoundingBoxType>(this.BoundingBoxField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LayerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
            localElementDictionary.Add(AvailableCRSXName, typeof(System.Uri));
            localElementDictionary.Add(AvailableLODXName, typeof(string));
            localElementDictionary.Add(DeliveryOptionXName, typeof(string));
            localElementDictionary.Add(LayerXName, typeof(LayerType));
            localElementDictionary.Add(AvailableStyleXName, typeof(StyleType));
            localElementDictionary.Add(WGS84BoundingBoxXName, typeof(OpenGis.Ows.WGS84BoundingBoxType));
            localElementDictionary.Add(MetadataXName, typeof(OpenGis.Ows.MetadataType));
            localElementDictionary.Add(BoundingBoxXName, typeof(OpenGis.Ows.BoundingBoxType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ResourceID, OutputFormat)
    /// </para>
    /// </summary>
    public partial class GetResourceByIdType : global::OpenGis.ThreeDps.Core.RequestBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourceIDXName = System.Xml.Linq.XName.Get("ResourceID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutputFormatXName = System.Xml.Linq.XName.Get("OutputFormat", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetResourceByIdType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GetResourceByIdType(XElement xe) { return XTypedServices.ToXTypedElement<GetResourceByIdType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GetResourceByIdType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ResourceIDXName), new NamedContentModelEntity(OutputFormatXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ResourceID, OutputFormat)
        /// </para>
        /// </summary>
        public GetResourceByIdType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID, OutputFormat)
        /// </para>
        /// </summary>
        public virtual System.Uri ResourceID {
            get {
                XElement x = this.GetElement(ResourceIDXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(ResourceIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ResourceID, OutputFormat)
        /// </para>
        /// </summary>
        public virtual string OutputFormat {
            get {
                XElement x = this.GetElement(OutputFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(OutputFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetResourceByIdType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ResourceIDXName, typeof(System.Uri));
            localElementDictionary.Add(OutputFormatXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (X1, X2, X3)
    /// </para>
    /// </summary>
    public partial class Position3DType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName X1XName = System.Xml.Linq.XName.Get("X1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName X2XName = System.Xml.Linq.XName.Get("X2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName X3XName = System.Xml.Linq.XName.Get("X3", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Position3DType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Position3DType(XElement xe) { return XTypedServices.ToXTypedElement<Position3DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Position3DType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(X1XName), new NamedContentModelEntity(X2XName), new NamedContentModelEntity(X3XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (X1, X2, X3)
        /// </para>
        /// </summary>
        public Position3DType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (X1, X2, X3)
        /// </para>
        /// </summary>
        public virtual double X1 {
            get {
                XElement x = this.GetElement(X1XName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(X1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (X1, X2, X3)
        /// </para>
        /// </summary>
        public virtual double X2 {
            get {
                XElement x = this.GetElement(X2XName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(X2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (X1, X2, X3)
        /// </para>
        /// </summary>
        public virtual double X3 {
            get {
                XElement x = this.GetElement(X3XName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(X3XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Position3DType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(X1XName, typeof(double));
            localElementDictionary.Add(X2XName, typeof(double));
            localElementDictionary.Add(X3XName, typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DatasetDescriptionSummary*, OtherSource*, (Layer*)?)
    /// </para>
    /// </summary>
    public partial class ContentsType : global::OpenGis.ThreeDps.Core.OWSContentsBaseRestrictionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LayerXName = System.Xml.Linq.XName.Get("Layer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LayerType> LayerField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentsType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContentsType(XElement xe) { return XTypedServices.ToXTypedElement<ContentsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DatasetDescriptionSummaryXName), new NamedContentModelEntity(OtherSourceXName), new SequenceContentModelEntity(new NamedContentModelEntity(LayerXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*, (Layer*)?)
        /// </para>
        /// </summary>
        public ContentsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*, (Layer*)?)
        /// </para>
        /// </summary>
        public virtual IList<LayerType> Layer {
            get {
                if ((this.LayerField == null)) {
                    this.LayerField = new XTypedList<LayerType>(this, LinqToXsdTypeManager.Instance, LayerXName);
                }
                return this.LayerField;
            }
            set {
                if ((value == null)) {
                    this.LayerField = null;
                }
                else {
                    if ((this.LayerField == null)) {
                        this.LayerField = XTypedList<LayerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LayerXName);
                    }
                    else {
                        XTypedServices.SetList<LayerType>(this.LayerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DatasetDescriptionSummaryXName, typeof(OpenGis.Ows.DatasetDescriptionSummary));
            localElementDictionary.Add(OtherSourceXName, typeof(OpenGis.Ows.OtherSource));
            localElementDictionary.Add(LayerXName, typeof(LayerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
    /// </para>
    /// </summary>
    public partial class GetCapabilitiesType : global::OpenGis.Ows.GetCapabilitiesType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serviceXName = System.Xml.Linq.XName.Get("service", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetCapabilitiesType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GetCapabilitiesType(XElement xe) { return XTypedServices.ToXTypedElement<GetCapabilitiesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GetCapabilitiesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AcceptVersionsXName), new NamedContentModelEntity(SectionsXName), new NamedContentModelEntity(AcceptFormatsXName), new NamedContentModelEntity(AcceptLanguagesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AcceptVersions?, Sections?, AcceptFormats?, AcceptLanguages?)
        /// </para>
        /// </summary>
        public GetCapabilitiesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string service {
            get {
                XAttribute x = this.Attribute(serviceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serviceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetCapabilitiesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AcceptVersionsXName, typeof(OpenGis.Ows.AcceptVersionsType));
            localElementDictionary.Add(SectionsXName, typeof(OpenGis.Ows.SectionsType));
            localElementDictionary.Add(AcceptFormatsXName, typeof(OpenGis.Ows.AcceptFormatsType));
            localElementDictionary.Add(AcceptLanguagesXName, typeof(void));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
    /// </para>
    /// </summary>
    public partial class OverallStyleType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverallStyleType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OverallStyleType(XElement xe) { return XTypedServices.ToXTypedElement<OverallStyleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OverallStyleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public OverallStyleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverallStyleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
    /// </para>
    /// </summary>
    public partial class BackgroundType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BackgroundType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BackgroundType(XElement xe) { return XTypedServices.ToXTypedElement<BackgroundType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BackgroundType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public BackgroundType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BackgroundType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
    /// </para>
    /// </summary>
    public partial class StyleType : global::OpenGis.Ows.DescriptionType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "http://www.opengis.net/ows/2.0");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StyleType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StyleType(XElement xe) { return XTypedServices.ToXTypedElement<StyleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StyleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(AbstractXName), new NamedContentModelEntity(KeywordsXName), new NamedContentModelEntity(IdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public StyleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title*, Abstract*, Keywords*, Identifier)
        /// </para>
        /// </summary>
        public virtual OpenGis.Ows.Identifier Identifier {
            get {
                XElement x = this.GetElement(IdentifierXName);
                return ((OpenGis.Ows.Identifier)(x));
            }
            set {
                this.SetElement(IdentifierXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StyleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(OpenGis.Ows.Title));
            localElementDictionary.Add(AbstractXName, typeof(OpenGis.Ows.Abstract));
            localElementDictionary.Add(KeywordsXName, typeof(OpenGis.Ows.Keywords));
            localElementDictionary.Add(IdentifierXName, typeof(OpenGis.Ows.Identifier));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (X1, X2)
    /// </para>
    /// </summary>
    public partial class Position2DType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName X1XName = System.Xml.Linq.XName.Get("X1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName X2XName = System.Xml.Linq.XName.Get("X2", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Position2DType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Position2DType(XElement xe) { return XTypedServices.ToXTypedElement<Position2DType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Position2DType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(X1XName), new NamedContentModelEntity(X2XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (X1, X2)
        /// </para>
        /// </summary>
        public Position2DType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (X1, X2)
        /// </para>
        /// </summary>
        public virtual double X1 {
            get {
                XElement x = this.GetElement(X1XName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(X1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (X1, X2)
        /// </para>
        /// </summary>
        public virtual double X2 {
            get {
                XElement x = this.GetElement(X2XName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(X2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Position2DType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(X1XName, typeof(double));
            localElementDictionary.Add(X2XName, typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
    /// </para>
    /// </summary>
    public partial class OWSContentsBaseRestrictionType : global::OpenGis.Ows.ContentsBaseType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OWSContentsBaseRestrictionType", "http://www.opengis.net/3dps/1.0/core");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OWSContentsBaseRestrictionType(XElement xe) { return XTypedServices.ToXTypedElement<OWSContentsBaseRestrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OWSContentsBaseRestrictionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DatasetDescriptionSummaryXName), new NamedContentModelEntity(OtherSourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DatasetDescriptionSummary*, OtherSource*)
        /// </para>
        /// </summary>
        public OWSContentsBaseRestrictionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OWSContentsBaseRestrictionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DatasetDescriptionSummaryXName, typeof(OpenGis.Ows.DatasetDescriptionSummary));
            localElementDictionary.Add(OtherSourceXName, typeof(OpenGis.Ows.OtherSource));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}
