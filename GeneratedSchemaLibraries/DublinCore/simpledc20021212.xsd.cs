//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W3C.XmlNs2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using Purl.SimpleDc.Elements;
    
    
    public sealed class lang {
        
        private lang() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
    }
}
namespace Purl.SimpleDc.Elements {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using W3C.XmlNs2;
    
    
    public partial class elementType : XTypedElement, IXMetaData {
        
		public static explicit operator elementType(XElement xe) { return XTypedServices.ToXTypedElement<elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<elementType>(this);
        }
        
        public elementType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseUnionValue(x, global::W3C.XmlNs2.lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, langXName, global::W3C.XmlNs2.lang.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementType", "http://purl.org/dc/elements/1.1/");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class title : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static title Load(string xmlFile) {
            return XTypedServices.Load<title, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<title, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static title Parse(string xml) {
            return XTypedServices.Parse<title, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator title(XElement xe) { return XTypedServices.ToXTypedElement<title, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new title(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public title() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public title(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("title", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class creator : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static creator Load(string xmlFile) {
            return XTypedServices.Load<creator, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static creator Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<creator, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static creator Parse(string xml) {
            return XTypedServices.Parse<creator, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator creator(XElement xe) { return XTypedServices.ToXTypedElement<creator, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new creator(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public creator() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public creator(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("creator", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class subject : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static subject Load(string xmlFile) {
            return XTypedServices.Load<subject, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static subject Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<subject, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static subject Parse(string xml) {
            return XTypedServices.Parse<subject, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator subject(XElement xe) { return XTypedServices.ToXTypedElement<subject, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new subject(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public subject() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public subject(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subject", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class description : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static description Load(string xmlFile) {
            return XTypedServices.Load<description, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static description Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<description, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static description Parse(string xml) {
            return XTypedServices.Parse<description, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator description(XElement xe) { return XTypedServices.ToXTypedElement<description, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new description(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public description() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public description(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("description", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class publisher : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static publisher Load(string xmlFile) {
            return XTypedServices.Load<publisher, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static publisher Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<publisher, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static publisher Parse(string xml) {
            return XTypedServices.Parse<publisher, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator publisher(XElement xe) { return XTypedServices.ToXTypedElement<publisher, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new publisher(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public publisher() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public publisher(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("publisher", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class contributor : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static contributor Load(string xmlFile) {
            return XTypedServices.Load<contributor, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static contributor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<contributor, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static contributor Parse(string xml) {
            return XTypedServices.Parse<contributor, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator contributor(XElement xe) { return XTypedServices.ToXTypedElement<contributor, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new contributor(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public contributor() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public contributor(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contributor", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class date : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static date Load(string xmlFile) {
            return XTypedServices.Load<date, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static date Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<date, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static date Parse(string xml) {
            return XTypedServices.Parse<date, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator date(XElement xe) { return XTypedServices.ToXTypedElement<date, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new date(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public date() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public date(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("date", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class type : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static type Load(string xmlFile) {
            return XTypedServices.Load<type, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static type Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<type, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static type Parse(string xml) {
            return XTypedServices.Parse<type, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator type(XElement xe) { return XTypedServices.ToXTypedElement<type, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new type(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public type() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public type(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("type", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class format : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static format Load(string xmlFile) {
            return XTypedServices.Load<format, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static format Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<format, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static format Parse(string xml) {
            return XTypedServices.Parse<format, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator format(XElement xe) { return XTypedServices.ToXTypedElement<format, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new format(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public format() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public format(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("format", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class identifier : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static identifier Load(string xmlFile) {
            return XTypedServices.Load<identifier, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static identifier Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<identifier, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static identifier Parse(string xml) {
            return XTypedServices.Parse<identifier, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator identifier(XElement xe) { return XTypedServices.ToXTypedElement<identifier, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new identifier(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public identifier() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public identifier(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("identifier", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class source : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static source Load(string xmlFile) {
            return XTypedServices.Load<source, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static source Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<source, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static source Parse(string xml) {
            return XTypedServices.Parse<source, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator source(XElement xe) { return XTypedServices.ToXTypedElement<source, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new source(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public source() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public source(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("source", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class language : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static language Load(string xmlFile) {
            return XTypedServices.Load<language, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static language Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<language, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static language Parse(string xml) {
            return XTypedServices.Parse<language, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator language(XElement xe) { return XTypedServices.ToXTypedElement<language, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new language(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public language() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public language(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("language", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class relation : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static relation Load(string xmlFile) {
            return XTypedServices.Load<relation, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static relation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<relation, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static relation Parse(string xml) {
            return XTypedServices.Parse<relation, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator relation(XElement xe) { return XTypedServices.ToXTypedElement<relation, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new relation(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public relation() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public relation(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("relation", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class coverage : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static coverage Load(string xmlFile) {
            return XTypedServices.Load<coverage, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static coverage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<coverage, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static coverage Parse(string xml) {
            return XTypedServices.Parse<coverage, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator coverage(XElement xe) { return XTypedServices.ToXTypedElement<coverage, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new coverage(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public coverage() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public coverage(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("coverage", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class rights : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static rights Load(string xmlFile) {
            return XTypedServices.Load<rights, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static rights Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<rights, elementType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static rights Parse(string xml) {
            return XTypedServices.Parse<rights, elementType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator rights(XElement xe) { return XTypedServices.ToXTypedElement<rights, elementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new rights(((elementType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementType ContentField;
        
        public rights() {
            SetInnerType(new elementType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(elementType ContentField) {
            this.ContentField = ((elementType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public rights(elementType content) {
            SetInnerType(content);
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rights", "http://purl.org/dc/elements/1.1/");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private LinqToXsdTypeManager() {
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("elementType", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.elementType));
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("title", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("creator", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.creator));
            elementDictionary.Add(System.Xml.Linq.XName.Get("subject", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.subject));
            elementDictionary.Add(System.Xml.Linq.XName.Get("description", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.description));
            elementDictionary.Add(System.Xml.Linq.XName.Get("publisher", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.publisher));
            elementDictionary.Add(System.Xml.Linq.XName.Get("contributor", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.contributor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("date", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.date));
            elementDictionary.Add(System.Xml.Linq.XName.Get("type", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.type));
            elementDictionary.Add(System.Xml.Linq.XName.Get("format", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.format));
            elementDictionary.Add(System.Xml.Linq.XName.Get("identifier", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.identifier));
            elementDictionary.Add(System.Xml.Linq.XName.Get("source", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.source));
            elementDictionary.Add(System.Xml.Linq.XName.Get("language", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.language));
            elementDictionary.Add(System.Xml.Linq.XName.Get("relation", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.relation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("coverage", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.coverage));
            elementDictionary.Add(System.Xml.Linq.XName.Get("rights", "http://purl.org/dc/elements/1.1/"), typeof(global::Purl.SimpleDc.Elements.rights));
        }
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.title), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.creator), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.subject), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.description), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.publisher), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.contributor), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.date), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.type), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.format), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.identifier), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.source), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.language), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.relation), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.coverage), typeof(global::Purl.SimpleDc.Elements.elementType));
            wrapperDictionary.Add(typeof(Purl.SimpleDc.Elements.rights), typeof(global::Purl.SimpleDc.Elements.elementType));
        }
        
        private static XmlSchemaSet schemaSet;
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("title", "http://purl.org/dc/elements/1.1/")];
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public title title {  get {return rootObject as title; } }
        
        public XRootNamespace(creator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public creator creator {  get {return rootObject as creator; } }
        
        public XRootNamespace(subject root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public subject subject {  get {return rootObject as subject; } }
        
        public XRootNamespace(description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public description description {  get {return rootObject as description; } }
        
        public XRootNamespace(publisher root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public publisher publisher {  get {return rootObject as publisher; } }
        
        public XRootNamespace(contributor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public contributor contributor {  get {return rootObject as contributor; } }
        
        public XRootNamespace(date root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public date date {  get {return rootObject as date; } }
        
        public XRootNamespace(type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public type type {  get {return rootObject as type; } }
        
        public XRootNamespace(format root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public format format {  get {return rootObject as format; } }
        
        public XRootNamespace(identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public identifier identifier {  get {return rootObject as identifier; } }
        
        public XRootNamespace(source root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public source source {  get {return rootObject as source; } }
        
        public XRootNamespace(language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public language language {  get {return rootObject as language; } }
        
        public XRootNamespace(relation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public relation relation {  get {return rootObject as relation; } }
        
        public XRootNamespace(coverage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public coverage coverage {  get {return rootObject as coverage; } }
        
        public XRootNamespace(rights root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public rights rights {  get {return rootObject as rights; } }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRoot() {
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRoot(global::Purl.SimpleDc.Elements.title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.title title {  get {return rootObject as global::Purl.SimpleDc.Elements.title; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.creator root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.creator creator {  get {return rootObject as global::Purl.SimpleDc.Elements.creator; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.subject root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.subject subject {  get {return rootObject as global::Purl.SimpleDc.Elements.subject; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.description description {  get {return rootObject as global::Purl.SimpleDc.Elements.description; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.publisher root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.publisher publisher {  get {return rootObject as global::Purl.SimpleDc.Elements.publisher; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.contributor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.contributor contributor {  get {return rootObject as global::Purl.SimpleDc.Elements.contributor; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.date root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.date date {  get {return rootObject as global::Purl.SimpleDc.Elements.date; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.type type {  get {return rootObject as global::Purl.SimpleDc.Elements.type; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.format root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.format format {  get {return rootObject as global::Purl.SimpleDc.Elements.format; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.identifier identifier {  get {return rootObject as global::Purl.SimpleDc.Elements.identifier; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.source root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.source source {  get {return rootObject as global::Purl.SimpleDc.Elements.source; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.language language {  get {return rootObject as global::Purl.SimpleDc.Elements.language; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.relation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.relation relation {  get {return rootObject as global::Purl.SimpleDc.Elements.relation; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.coverage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.coverage coverage {  get {return rootObject as global::Purl.SimpleDc.Elements.coverage; } }
        
        public XRoot(global::Purl.SimpleDc.Elements.rights root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::Purl.SimpleDc.Elements.rights rights {  get {return rootObject as global::Purl.SimpleDc.Elements.rights; } }
    }
}
