//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PubMed.Eutils {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (MedlineCitation*, DeleteCitation?)
    /// </para>
    /// </summary>
    public partial class MedlineCitationSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MedlineCitationType> MedlineCitationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MedlineCitationSet(XElement xe) { return XTypedServices.ToXTypedElement<MedlineCitationSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MedlineCitationSet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DeleteCitation", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MedlineCitation*, DeleteCitation?)
        /// </para>
        /// </summary>
        public MedlineCitationSet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MedlineCitation*, DeleteCitation?)
        /// </para>
        /// </summary>
        public virtual IList<MedlineCitationType> MedlineCitation {
            get {
                if ((this.MedlineCitationField == null)) {
                    this.MedlineCitationField = new XTypedList<MedlineCitationType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.MedlineCitationField;
            }
            set {
                if ((value == null)) {
                    this.MedlineCitationField = null;
                }
                else {
                    if ((this.MedlineCitationField == null)) {
                        this.MedlineCitationField = XTypedList<MedlineCitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<MedlineCitationType>(this.MedlineCitationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MedlineCitation*, DeleteCitation?)
        /// </para>
        /// </summary>
        public virtual DeleteCitationType DeleteCitation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DeleteCitation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DeleteCitationType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DeleteCitation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlineCitationSet", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MedlineCitationSet Load(string xmlFile) {
            return XTypedServices.Load<MedlineCitationSet>(xmlFile);
        }
        
        public static MedlineCitationSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MedlineCitationSet>(xmlFile);
        }
        
        public static MedlineCitationSet Parse(string xml) {
            return XTypedServices.Parse<MedlineCitationSet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlineCitationSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlineCitationType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DeleteCitation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DeleteCitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PubmedArticle*)
    /// </para>
    /// </summary>
    public partial class PubmedArticleSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PubmedArticleType> PubmedArticleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PubmedArticleSet(XElement xe) { return XTypedServices.ToXTypedElement<PubmedArticleSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PubmedArticleSet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PubmedArticle", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PubmedArticle*)
        /// </para>
        /// </summary>
        public PubmedArticleSet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PubmedArticle*)
        /// </para>
        /// </summary>
        public virtual IList<PubmedArticleType> PubmedArticle {
            get {
                if ((this.PubmedArticleField == null)) {
                    this.PubmedArticleField = new XTypedList<PubmedArticleType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("PubmedArticle", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.PubmedArticleField;
            }
            set {
                if ((value == null)) {
                    this.PubmedArticleField = null;
                }
                else {
                    if ((this.PubmedArticleField == null)) {
                        this.PubmedArticleField = XTypedList<PubmedArticleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("PubmedArticle", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<PubmedArticleType>(this.PubmedArticleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PubmedArticleSet", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PubmedArticleSet Load(string xmlFile) {
            return XTypedServices.Load<PubmedArticleSet>(xmlFile);
        }
        
        public static PubmedArticleSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PubmedArticleSet>(xmlFile);
        }
        
        public static PubmedArticleSet Parse(string xml) {
            return XTypedServices.Parse<PubmedArticleSet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PubmedArticleSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PubmedArticle", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PubmedArticleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class URL : XTypedElement, IXMetaData {
        
		public static explicit operator URL(XElement xe) { return XTypedServices.ToXTypedElement<URL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public URL() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual URL.langEnum lang {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lang", ""));
                return ((URL.langEnum)(Enum.Parse(typeof(URL.langEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("lang", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual URL.TypeEnum Type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Type", ""));
                return ((URL.TypeEnum)(Enum.Parse(typeof(URL.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Type", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("URL", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static URL Load(string xmlFile) {
            return XTypedServices.Load<URL>(xmlFile);
        }
        
        public static URL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<URL>(xmlFile);
        }
        
        public static URL Parse(string xml) {
            return XTypedServices.Parse<URL>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<URL>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum langEnum {
            
            AF,
            
            AR,
            
            AZ,
            
            BG,
            
            CS,
            
            DA,
            
            DE,
            
            EN,
            
            EL,
            
            ES,
            
            FA,
            
            FI,
            
            FR,
            
            HE,
            
            HU,
            
            HY,
            
            IN,
            
            IS,
            
            IT,
            
            IW,
            
            JA,
            
            KA,
            
            KO,
            
            LT,
            
            MK,
            
            ML,
            
            NL,
            
            NO,
            
            PL,
            
            PT,
            
            PS,
            
            RO,
            
            RU,
            
            SL,
            
            SK,
            
            SQ,
            
            SR,
            
            SV,
            
            SW,
            
            TH,
            
            TR,
            
            UK,
            
            VI,
            
            ZH,
        }
        
        public enum TypeEnum {
            
            FullText,
            
            Summary,
            
            fulltext,
            
            summary,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AbstractText, CopyrightInformation?)
    /// </para>
    /// </summary>
    public partial class AbstractType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbstractType(XElement xe) { return XTypedServices.ToXTypedElement<AbstractType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbstractType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public AbstractType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public virtual AbstractText AbstractText {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((AbstractText)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public virtual CopyrightInformation CopyrightInformation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((CopyrightInformation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AbstractType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AbstractType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AbstractText));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CopyrightInformation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AccessionNumber+)
    /// </para>
    /// </summary>
    public partial class AccessionNumberListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<AccessionNumber> AccessionNumberField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AccessionNumberListType(XElement xe) { return XTypedServices.ToXTypedElement<AccessionNumberListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AccessionNumberListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AccessionNumber+)
        /// </para>
        /// </summary>
        public AccessionNumberListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AccessionNumber+)
        /// </para>
        /// </summary>
        public virtual IList<AccessionNumber> AccessionNumber {
            get {
                if ((this.AccessionNumberField == null)) {
                    this.AccessionNumberField = new XSimpleList<AccessionNumber>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.AccessionNumberField;
            }
            set {
                if ((value == null)) {
                    this.AccessionNumberField = null;
                }
                else {
                    if ((this.AccessionNumberField == null)) {
                        this.AccessionNumberField = XSimpleList<AccessionNumber>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<AccessionNumber>(this.AccessionNumberField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AccessionNumberListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AccessionNumberListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AccessionNumber));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
    /// </para>
    /// </summary>
    public partial class ArticleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ELocationIDType> ELocationIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<Language> LanguageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ArticleDateType> ArticleDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ArticleType(XElement xe) { return XTypedServices.ToXTypedElement<ArticleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArticleType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public ArticleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual JournalType Journal {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Journal", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((JournalType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Journal", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual ArticleTitle ArticleTitle {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ArticleTitle", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ArticleTitle)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ArticleTitle", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual PaginationType Pagination {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Pagination", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PaginationType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Pagination", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual IList<ELocationIDType> ELocationID {
            get {
                if ((this.ELocationIDField == null)) {
                    this.ELocationIDField = new XTypedList<ELocationIDType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ELocationID", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ELocationIDField;
            }
            set {
                if ((value == null)) {
                    this.ELocationIDField = null;
                }
                else {
                    if ((this.ELocationIDField == null)) {
                        this.ELocationIDField = XTypedList<ELocationIDType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ELocationID", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ELocationIDType>(this.ELocationIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual AbstractType Abstract {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Abstract", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((AbstractType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Abstract", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual Affiliation Affiliation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Affiliation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual AuthorListType AuthorList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AuthorList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((AuthorListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AuthorList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual IList<Language> Language {
            get {
                if ((this.LanguageField == null)) {
                    this.LanguageField = new XSimpleList<Language>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("Language", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.LanguageField;
            }
            set {
                if ((value == null)) {
                    this.LanguageField = null;
                }
                else {
                    if ((this.LanguageField == null)) {
                        this.LanguageField = XSimpleList<Language>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("Language", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<Language>(this.LanguageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual DataBankListType DataBankList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DataBankList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DataBankListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DataBankList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual GrantListType GrantList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("GrantList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((GrantListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("GrantList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual PublicationTypeListType PublicationTypeList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PublicationTypeList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PublicationTypeListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PublicationTypeList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual VernacularTitle VernacularTitle {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("VernacularTitle", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((VernacularTitle)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("VernacularTitle", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Journal, ArticleTitle, ((Pagination, ELocationID*)|ELocationID+), Abstract?, Affiliation?, AuthorList?, Language+, DataBankList?, GrantList?, PublicationTypeList, VernacularTitle?, ArticleDate*)
        /// </para>
        /// </summary>
        public virtual IList<ArticleDateType> ArticleDate {
            get {
                if ((this.ArticleDateField == null)) {
                    this.ArticleDateField = new XTypedList<ArticleDateType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ArticleDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ArticleDateField;
            }
            set {
                if ((value == null)) {
                    this.ArticleDateField = null;
                }
                else {
                    if ((this.ArticleDateField == null)) {
                        this.ArticleDateField = XTypedList<ArticleDateType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ArticleDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ArticleDateType>(this.ArticleDateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string PubModel {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("PubModel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("PubModel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ArticleType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArticleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Journal", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(JournalType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ArticleTitle", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ArticleTitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Pagination", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PaginationType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ELocationID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ELocationIDType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Abstract", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AbstractType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Affiliation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AuthorList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AuthorListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Language", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Language));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DataBankList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DataBankListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("GrantList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GrantListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PublicationTypeList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PublicationTypeListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("VernacularTitle", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(VernacularTitle));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ArticleDate", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ArticleDateType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Year, Month, Day)
    /// </para>
    /// </summary>
    public partial class ArticleDateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string DateTypeFixedValue = "Electronic";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ArticleDateType(XElement xe) { return XTypedServices.ToXTypedElement<ArticleDateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArticleDateType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public ArticleDateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DateType {
            get {
                return DateTypeFixedValue;
            }
            set {
                if (value.Equals(DateTypeFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, DateTypeFixedValue);
                }
                this.SetAttribute(System.Xml.Linq.XName.Get("DateType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ArticleDateType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArticleDateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ArticleIdType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string IdTypeDefaultValue = "pubmed";
        
		public static explicit operator ArticleIdType(XElement xe) { return XTypedServices.ToXTypedElement<ArticleIdType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ArticleIdType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual ArticleIdType.IdTypeEnum IdType {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("IdType", ""));
                return ((ArticleIdType.IdTypeEnum)(Enum.Parse(typeof(ArticleIdType.IdTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, IdTypeDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("IdType", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ArticleIdType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArticleIdType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IdTypeEnum {
            
            doi,
            
            pii,
            
            pmcpid,
            
            pmpid,
            
            pmc,
            
            mid,
            
            sici,
            
            pubmed,
            
            medline,
            
            pmcid,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArticleId+)
    /// </para>
    /// </summary>
    public partial class ArticleIdListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ArticleIdType> ArticleIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ArticleIdListType(XElement xe) { return XTypedServices.ToXTypedElement<ArticleIdListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArticleIdListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("ArticleId", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArticleId+)
        /// </para>
        /// </summary>
        public ArticleIdListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ArticleId+)
        /// </para>
        /// </summary>
        public virtual IList<ArticleIdType> ArticleId {
            get {
                if ((this.ArticleIdField == null)) {
                    this.ArticleIdField = new XTypedList<ArticleIdType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("ArticleId", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ArticleIdField;
            }
            set {
                if ((value == null)) {
                    this.ArticleIdField = null;
                }
                else {
                    if ((this.ArticleIdField == null)) {
                        this.ArticleIdField = XTypedList<ArticleIdType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("ArticleId", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ArticleIdType>(this.ArticleIdField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ArticleIdListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArticleIdListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ArticleId", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ArticleIdType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
    /// </para>
    /// </summary>
    public partial class AuthorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NameIDType> NameIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ValidYNDefaultValue = "Y";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator AuthorType(XElement xe) { return XTypedServices.ToXTypedElement<AuthorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuthorType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public AuthorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual LastName LastName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((LastName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual ForeName ForeName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ForeName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual Initials Initials {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Initials)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual Suffix Suffix {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Suffix)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual IList<NameIDType> NameID {
            get {
                if ((this.NameIDField == null)) {
                    this.NameIDField = new XTypedList<NameIDType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.NameIDField;
            }
            set {
                if ((value == null)) {
                    this.NameIDField = null;
                }
                else {
                    if ((this.NameIDField == null)) {
                        this.NameIDField = XTypedList<NameIDType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<NameIDType>(this.NameIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((LastName, ForeName?, Initials?, Suffix?, NameID*)|(CollectiveName, NameID*))
        /// </para>
        /// </summary>
        public virtual CollectiveName CollectiveName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("CollectiveName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((CollectiveName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("CollectiveName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.AuthorType.ValidYNEnum ValidYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ValidYN", ""));
                return ((PubMed.Eutils.AuthorType.ValidYNEnum)(Enum.Parse(typeof(PubMed.Eutils.AuthorType.ValidYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, ValidYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ValidYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AuthorType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuthorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(LastName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ForeName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Initials));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Suffix));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(NameIDType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CollectiveName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CollectiveName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum ValidYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Author+)
    /// </para>
    /// </summary>
    public partial class AuthorListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AuthorType> AuthorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string CompleteYNDefaultValue = "Y";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AuthorListType(XElement xe) { return XTypedServices.ToXTypedElement<AuthorListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuthorListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Author", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Author+)
        /// </para>
        /// </summary>
        public AuthorListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Author+)
        /// </para>
        /// </summary>
        public virtual IList<AuthorType> Author {
            get {
                if ((this.AuthorField == null)) {
                    this.AuthorField = new XTypedList<AuthorType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Author", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.AuthorField;
            }
            set {
                if ((value == null)) {
                    this.AuthorField = null;
                }
                else {
                    if ((this.AuthorField == null)) {
                        this.AuthorField = XTypedList<AuthorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Author", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<AuthorType>(this.AuthorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.AuthorListType.CompleteYNEnum CompleteYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("CompleteYN", ""));
                return ((PubMed.Eutils.AuthorListType.CompleteYNEnum)(Enum.Parse(typeof(PubMed.Eutils.AuthorListType.CompleteYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, CompleteYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("CompleteYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AuthorListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuthorListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Author", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AuthorType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum CompleteYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RegistryNumber, NameOfSubstance)
    /// </para>
    /// </summary>
    public partial class ChemicalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ChemicalType(XElement xe) { return XTypedServices.ToXTypedElement<ChemicalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ChemicalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegistryNumber, NameOfSubstance)
        /// </para>
        /// </summary>
        public ChemicalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RegistryNumber, NameOfSubstance)
        /// </para>
        /// </summary>
        public virtual RegistryNumber RegistryNumber {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((RegistryNumber)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RegistryNumber, NameOfSubstance)
        /// </para>
        /// </summary>
        public virtual NameOfSubstance NameOfSubstance {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((NameOfSubstance)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ChemicalType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ChemicalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(RegistryNumber));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(NameOfSubstance));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Chemical+)
    /// </para>
    /// </summary>
    public partial class ChemicalListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ChemicalType> ChemicalField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ChemicalListType(XElement xe) { return XTypedServices.ToXTypedElement<ChemicalListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ChemicalListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Chemical", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Chemical+)
        /// </para>
        /// </summary>
        public ChemicalListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Chemical+)
        /// </para>
        /// </summary>
        public virtual IList<ChemicalType> Chemical {
            get {
                if ((this.ChemicalField == null)) {
                    this.ChemicalField = new XTypedList<ChemicalType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Chemical", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ChemicalField;
            }
            set {
                if ((value == null)) {
                    this.ChemicalField = null;
                }
                else {
                    if ((this.ChemicalField == null)) {
                        this.ChemicalField = XTypedList<ChemicalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Chemical", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ChemicalType>(this.ChemicalField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ChemicalListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ChemicalListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Chemical", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ChemicalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RefSource, PMID?, Note?)
    /// </para>
    /// </summary>
    public partial class CommentsCorrectionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommentsCorrectionsType(XElement xe) { return XTypedServices.ToXTypedElement<CommentsCorrectionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommentsCorrectionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RefSource, PMID?, Note?)
        /// </para>
        /// </summary>
        public CommentsCorrectionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RefSource, PMID?, Note?)
        /// </para>
        /// </summary>
        public virtual RefSource RefSource {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((RefSource)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RefSource, PMID?, Note?)
        /// </para>
        /// </summary>
        public virtual PMID PMID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PMID)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RefSource, PMID?, Note?)
        /// </para>
        /// </summary>
        public virtual Note Note {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Note)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.CommentsCorrectionsType.RefTypeEnum RefType {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("RefType", ""));
                return ((PubMed.Eutils.CommentsCorrectionsType.RefTypeEnum)(Enum.Parse(typeof(PubMed.Eutils.CommentsCorrectionsType.RefTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("RefType", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CommentsCorrectionsType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommentsCorrectionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(RefSource));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PMID));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Note));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum RefTypeEnum {
            
            CommentOn,
            
            CommentIn,
            
            ErratumIn,
            
            ErratumFor,
            
            PartialRetractionIn,
            
            PartialRetractionOf,
            
            RepublishedFrom,
            
            RepublishedIn,
            
            RetractionOf,
            
            RetractionIn,
            
            UpdateIn,
            
            UpdateOf,
            
            SummaryForPatientsIn,
            
            OriginalReportIn,
            
            ReprintOf,
            
            ReprintIn,
            
            Cites,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommentsCorrections+)
    /// </para>
    /// </summary>
    public partial class CommentsCorrectionsListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommentsCorrectionsType> CommentsCorrectionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommentsCorrectionsListType(XElement xe) { return XTypedServices.ToXTypedElement<CommentsCorrectionsListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommentsCorrectionsListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("CommentsCorrections", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommentsCorrections+)
        /// </para>
        /// </summary>
        public CommentsCorrectionsListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommentsCorrections+)
        /// </para>
        /// </summary>
        public virtual IList<CommentsCorrectionsType> CommentsCorrections {
            get {
                if ((this.CommentsCorrectionsField == null)) {
                    this.CommentsCorrectionsField = new XTypedList<CommentsCorrectionsType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("CommentsCorrections", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.CommentsCorrectionsField;
            }
            set {
                if ((value == null)) {
                    this.CommentsCorrectionsField = null;
                }
                else {
                    if ((this.CommentsCorrectionsField == null)) {
                        this.CommentsCorrectionsField = XTypedList<CommentsCorrectionsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("CommentsCorrections", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<CommentsCorrectionsType>(this.CommentsCorrectionsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CommentsCorrectionsListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommentsCorrectionsListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CommentsCorrections", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CommentsCorrectionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DataBankName, AccessionNumberList?)
    /// </para>
    /// </summary>
    public partial class DataBankType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataBankType(XElement xe) { return XTypedServices.ToXTypedElement<DataBankType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataBankType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("AccessionNumberList", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DataBankName, AccessionNumberList?)
        /// </para>
        /// </summary>
        public DataBankType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DataBankName, AccessionNumberList?)
        /// </para>
        /// </summary>
        public virtual DataBankName DataBankName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DataBankName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DataBankName, AccessionNumberList?)
        /// </para>
        /// </summary>
        public virtual AccessionNumberListType AccessionNumberList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AccessionNumberList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((AccessionNumberListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AccessionNumberList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DataBankType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataBankType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DataBankName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AccessionNumberList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AccessionNumberListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DataBank+)
    /// </para>
    /// </summary>
    public partial class DataBankListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataBankType> DataBankField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string CompleteYNDefaultValue = "Y";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataBankListType(XElement xe) { return XTypedServices.ToXTypedElement<DataBankListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataBankListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("DataBank", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DataBank+)
        /// </para>
        /// </summary>
        public DataBankListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataBank+)
        /// </para>
        /// </summary>
        public virtual IList<DataBankType> DataBank {
            get {
                if ((this.DataBankField == null)) {
                    this.DataBankField = new XTypedList<DataBankType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("DataBank", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.DataBankField;
            }
            set {
                if ((value == null)) {
                    this.DataBankField = null;
                }
                else {
                    if ((this.DataBankField == null)) {
                        this.DataBankField = XTypedList<DataBankType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("DataBank", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<DataBankType>(this.DataBankField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.DataBankListType.CompleteYNEnum CompleteYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("CompleteYN", ""));
                return ((PubMed.Eutils.DataBankListType.CompleteYNEnum)(Enum.Parse(typeof(PubMed.Eutils.DataBankListType.CompleteYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, CompleteYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("CompleteYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DataBankListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataBankListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DataBank", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DataBankType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum CompleteYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Year, Month, Day)
    /// </para>
    /// </summary>
    public partial class DateCompletedType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DateCompletedType(XElement xe) { return XTypedServices.ToXTypedElement<DateCompletedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DateCompletedType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public DateCompletedType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DateCompletedType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DateCompletedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Year, Month, Day)
    /// </para>
    /// </summary>
    public partial class DateCreatedType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DateCreatedType(XElement xe) { return XTypedServices.ToXTypedElement<DateCreatedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DateCreatedType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public DateCreatedType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DateCreatedType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DateCreatedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Year, Month, Day)
    /// </para>
    /// </summary>
    public partial class DateRevisedType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DateRevisedType(XElement xe) { return XTypedServices.ToXTypedElement<DateRevisedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DateRevisedType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public DateRevisedType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DateRevisedType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DateRevisedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PMID+)
    /// </para>
    /// </summary>
    public partial class DeleteCitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<PMID> PMIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeleteCitationType(XElement xe) { return XTypedServices.ToXTypedElement<DeleteCitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeleteCitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PMID+)
        /// </para>
        /// </summary>
        public DeleteCitationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID+)
        /// </para>
        /// </summary>
        public virtual IList<PMID> PMID {
            get {
                if ((this.PMIDField == null)) {
                    this.PMIDField = new XSimpleList<PMID>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.PMIDField;
            }
            set {
                if ((value == null)) {
                    this.PMIDField = null;
                }
                else {
                    if ((this.PMIDField == null)) {
                        this.PMIDField = XSimpleList<PMID>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<PMID>(this.PMIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DeleteCitationType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeleteCitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PMID));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DescriptorNameType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string MajorTopicYNDefaultValue = "N";
        
		public static explicit operator DescriptorNameType(XElement xe) { return XTypedServices.ToXTypedElement<DescriptorNameType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DescriptorNameType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DescriptorNameType.MajorTopicYNEnum MajorTopicYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""));
                return ((DescriptorNameType.MajorTopicYNEnum)(Enum.Parse(typeof(DescriptorNameType.MajorTopicYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, MajorTopicYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DescriptorNameType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DescriptorNameType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum MajorTopicYNEnum {
            
            Y,
            
            N,
        }
    }
    
    public partial class ELocationIDType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ValidYNDefaultValue = "Y";
        
		public static explicit operator ELocationIDType(XElement xe) { return XTypedServices.ToXTypedElement<ELocationIDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ELocationIDType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual ELocationIDType.EIdTypeEnum EIdType {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("EIdType", ""));
                return ((ELocationIDType.EIdTypeEnum)(Enum.Parse(typeof(ELocationIDType.EIdTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("EIdType", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual ELocationIDType.ValidYNEnum ValidYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ValidYN", ""));
                return ((ELocationIDType.ValidYNEnum)(Enum.Parse(typeof(ELocationIDType.ValidYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, ValidYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ValidYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ELocationIDType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ELocationIDType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum EIdTypeEnum {
            
            doi,
            
            pii,
        }
        
        public enum ValidYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GeneSymbol+)
    /// </para>
    /// </summary>
    public partial class GeneSymbolListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<GeneSymbol> GeneSymbolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GeneSymbolListType(XElement xe) { return XTypedServices.ToXTypedElement<GeneSymbolListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GeneSymbolListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GeneSymbol+)
        /// </para>
        /// </summary>
        public GeneSymbolListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GeneSymbol+)
        /// </para>
        /// </summary>
        public virtual IList<GeneSymbol> GeneSymbol {
            get {
                if ((this.GeneSymbolField == null)) {
                    this.GeneSymbolField = new XSimpleList<GeneSymbol>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.GeneSymbolField;
            }
            set {
                if ((value == null)) {
                    this.GeneSymbolField = null;
                }
                else {
                    if ((this.GeneSymbolField == null)) {
                        this.GeneSymbolField = XSimpleList<GeneSymbol>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<GeneSymbol>(this.GeneSymbolField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GeneSymbolListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeneSymbolListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GeneSymbol));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class GeneralNoteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string OwnerDefaultValue = "NLM";
        
		public static explicit operator GeneralNoteType(XElement xe) { return XTypedServices.ToXTypedElement<GeneralNoteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GeneralNoteType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual GeneralNoteType.OwnerEnum Owner {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Owner", ""));
                return ((GeneralNoteType.OwnerEnum)(Enum.Parse(typeof(GeneralNoteType.OwnerEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, OwnerDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Owner", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GeneralNoteType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeneralNoteType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum OwnerEnum {
            
            NLM,
            
            NASA,
            
            PIP,
            
            KIE,
            
            HSR,
            
            HMD,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GrantID?, Acronym?, Agency, Country)
    /// </para>
    /// </summary>
    public partial class GrantType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GrantType(XElement xe) { return XTypedServices.ToXTypedElement<GrantType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GrantType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GrantID?, Acronym?, Agency, Country)
        /// </para>
        /// </summary>
        public GrantType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GrantID?, Acronym?, Agency, Country)
        /// </para>
        /// </summary>
        public virtual GrantID GrantID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((GrantID)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GrantID?, Acronym?, Agency, Country)
        /// </para>
        /// </summary>
        public virtual Acronym Acronym {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Acronym)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GrantID?, Acronym?, Agency, Country)
        /// </para>
        /// </summary>
        public virtual Agency Agency {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Agency)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GrantID?, Acronym?, Agency, Country)
        /// </para>
        /// </summary>
        public virtual Country Country {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Country)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GrantType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GrantType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GrantID));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Acronym));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Agency));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Country));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Grant+)
    /// </para>
    /// </summary>
    public partial class GrantListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GrantType> GrantField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string CompleteYNDefaultValue = "Y";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GrantListType(XElement xe) { return XTypedServices.ToXTypedElement<GrantListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GrantListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Grant", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Grant+)
        /// </para>
        /// </summary>
        public GrantListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Grant+)
        /// </para>
        /// </summary>
        public virtual IList<GrantType> Grant {
            get {
                if ((this.GrantField == null)) {
                    this.GrantField = new XTypedList<GrantType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Grant", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.GrantField;
            }
            set {
                if ((value == null)) {
                    this.GrantField = null;
                }
                else {
                    if ((this.GrantField == null)) {
                        this.GrantField = XTypedList<GrantType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Grant", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<GrantType>(this.GrantField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.GrantListType.CompleteYNEnum CompleteYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("CompleteYN", ""));
                return ((PubMed.Eutils.GrantListType.CompleteYNEnum)(Enum.Parse(typeof(PubMed.Eutils.GrantListType.CompleteYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, CompleteYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("CompleteYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GrantListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GrantListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Grant", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GrantType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum CompleteYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PubMedPubDate+)
    /// </para>
    /// </summary>
    public partial class HistoryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PubMedPubDateType> PubMedPubDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HistoryType(XElement xe) { return XTypedServices.ToXTypedElement<HistoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HistoryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PubMedPubDate", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PubMedPubDate+)
        /// </para>
        /// </summary>
        public HistoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PubMedPubDate+)
        /// </para>
        /// </summary>
        public virtual IList<PubMedPubDateType> PubMedPubDate {
            get {
                if ((this.PubMedPubDateField == null)) {
                    this.PubMedPubDateField = new XTypedList<PubMedPubDateType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("PubMedPubDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.PubMedPubDateField;
            }
            set {
                if ((value == null)) {
                    this.PubMedPubDateField = null;
                }
                else {
                    if ((this.PubMedPubDateField == null)) {
                        this.PubMedPubDateField = XTypedList<PubMedPubDateType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("PubMedPubDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<PubMedPubDateType>(this.PubMedPubDateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("HistoryType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HistoryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PubMedPubDate", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PubMedPubDateType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ISSNType : XTypedElement, IXMetaData {
        
		public static explicit operator ISSNType(XElement xe) { return XTypedServices.ToXTypedElement<ISSNType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ISSNType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual ISSNType.IssnTypeEnum IssnType1 {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("IssnType", ""));
                return ((ISSNType.IssnTypeEnum)(Enum.Parse(typeof(ISSNType.IssnTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("IssnType", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ISSNType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ISSNType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum IssnTypeEnum {
            
            Electronic,
            
            Print,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
    /// </para>
    /// </summary>
    public partial class InvestigatorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NameIDType> NameIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string ValidYNDefaultValue = "Y";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InvestigatorType(XElement xe) { return XTypedServices.ToXTypedElement<InvestigatorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InvestigatorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public InvestigatorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual LastName LastName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((LastName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual ForeName ForeName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ForeName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual Initials Initials {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Initials)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual Suffix Suffix {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Suffix)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual IList<NameIDType> NameID {
            get {
                if ((this.NameIDField == null)) {
                    this.NameIDField = new XTypedList<NameIDType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.NameIDField;
            }
            set {
                if ((value == null)) {
                    this.NameIDField = null;
                }
                else {
                    if ((this.NameIDField == null)) {
                        this.NameIDField = XTypedList<NameIDType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<NameIDType>(this.NameIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?, NameID*, Affiliation?)
        /// </para>
        /// </summary>
        public virtual Affiliation Affiliation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Affiliation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.InvestigatorType.ValidYNEnum ValidYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ValidYN", ""));
                return ((PubMed.Eutils.InvestigatorType.ValidYNEnum)(Enum.Parse(typeof(PubMed.Eutils.InvestigatorType.ValidYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, ValidYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ValidYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("InvestigatorType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InvestigatorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(LastName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ForeName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Initials));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Suffix));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NameID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(NameIDType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Affiliation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum ValidYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Investigator+)
    /// </para>
    /// </summary>
    public partial class InvestigatorListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InvestigatorType> InvestigatorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InvestigatorListType(XElement xe) { return XTypedServices.ToXTypedElement<InvestigatorListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InvestigatorListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Investigator", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Investigator+)
        /// </para>
        /// </summary>
        public InvestigatorListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Investigator+)
        /// </para>
        /// </summary>
        public virtual IList<InvestigatorType> Investigator {
            get {
                if ((this.InvestigatorField == null)) {
                    this.InvestigatorField = new XTypedList<InvestigatorType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Investigator", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.InvestigatorField;
            }
            set {
                if ((value == null)) {
                    this.InvestigatorField = null;
                }
                else {
                    if ((this.InvestigatorField == null)) {
                        this.InvestigatorField = XTypedList<InvestigatorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Investigator", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<InvestigatorType>(this.InvestigatorField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("InvestigatorListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InvestigatorListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Investigator", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(InvestigatorType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
    /// </para>
    /// </summary>
    public partial class JournalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator JournalType(XElement xe) { return XTypedServices.ToXTypedElement<JournalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static JournalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("ISSN", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("JournalIssue", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
        /// </para>
        /// </summary>
        public JournalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
        /// </para>
        /// </summary>
        public virtual ISSNType ISSN {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ISSN", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ISSNType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ISSN", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
        /// </para>
        /// </summary>
        public virtual JournalIssueType JournalIssue {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("JournalIssue", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((JournalIssueType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("JournalIssue", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
        /// </para>
        /// </summary>
        public virtual Title Title {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Title)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ISSN?, JournalIssue, Title?, ISOAbbreviation?)
        /// </para>
        /// </summary>
        public virtual ISOAbbreviation ISOAbbreviation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ISOAbbreviation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("JournalType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<JournalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ISSN", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ISSNType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("JournalIssue", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(JournalIssueType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Title));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ISOAbbreviation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Volume?, Issue?, PubDate)
    /// </para>
    /// </summary>
    public partial class JournalIssueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator JournalIssueType(XElement xe) { return XTypedServices.ToXTypedElement<JournalIssueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static JournalIssueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PubDate", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Volume?, Issue?, PubDate)
        /// </para>
        /// </summary>
        public JournalIssueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Volume?, Issue?, PubDate)
        /// </para>
        /// </summary>
        public virtual Volume Volume {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Volume)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Volume?, Issue?, PubDate)
        /// </para>
        /// </summary>
        public virtual Issue Issue {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Issue)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Volume?, Issue?, PubDate)
        /// </para>
        /// </summary>
        public virtual PubDateType PubDate {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PubDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PubDateType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PubDate", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.JournalIssueType.CitedMediumEnum CitedMedium {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("CitedMedium", ""));
                return ((PubMed.Eutils.JournalIssueType.CitedMediumEnum)(Enum.Parse(typeof(PubMed.Eutils.JournalIssueType.CitedMediumEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("CitedMedium", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("JournalIssueType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<JournalIssueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Volume));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Issue));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PubDate", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PubDateType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum CitedMediumEnum {
            
            Internet,
            
            Print,
        }
    }
    
    public partial class KeywordType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string MajorTopicYNDefaultValue = "N";
        
		public static explicit operator KeywordType(XElement xe) { return XTypedServices.ToXTypedElement<KeywordType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public KeywordType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual KeywordType.MajorTopicYNEnum MajorTopicYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""));
                return ((KeywordType.MajorTopicYNEnum)(Enum.Parse(typeof(KeywordType.MajorTopicYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, MajorTopicYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("KeywordType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeywordType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum MajorTopicYNEnum {
            
            Y,
            
            N,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Keyword+)
    /// </para>
    /// </summary>
    public partial class KeywordListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeywordType> KeywordField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string OwnerDefaultValue = "NLM";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KeywordListType(XElement xe) { return XTypedServices.ToXTypedElement<KeywordListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KeywordListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Keyword", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Keyword+)
        /// </para>
        /// </summary>
        public KeywordListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Keyword+)
        /// </para>
        /// </summary>
        public virtual IList<KeywordType> Keyword {
            get {
                if ((this.KeywordField == null)) {
                    this.KeywordField = new XTypedList<KeywordType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Keyword", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.KeywordField;
            }
            set {
                if ((value == null)) {
                    this.KeywordField = null;
                }
                else {
                    if ((this.KeywordField == null)) {
                        this.KeywordField = XTypedList<KeywordType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Keyword", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<KeywordType>(this.KeywordField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.KeywordListType.OwnerEnum Owner {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Owner", ""));
                return ((PubMed.Eutils.KeywordListType.OwnerEnum)(Enum.Parse(typeof(PubMed.Eutils.KeywordListType.OwnerEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, OwnerDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Owner", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("KeywordListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KeywordListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Keyword", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(KeywordType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum OwnerEnum {
            
            NLM,
            
            NASA,
            
            PIP,
            
            KIE,
            
            NOTNLM,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
    /// </para>
    /// </summary>
    public partial class MedlineCitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<CitationSubset> CitationSubsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OtherIDType> OtherIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OtherAbstractType> OtherAbstractField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<KeywordListType> KeywordListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<SpaceFlightMission> SpaceFlightMissionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GeneralNoteType> GeneralNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string OwnerDefaultValue = "NLM";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MedlineCitationType(XElement xe) { return XTypedServices.ToXTypedElement<MedlineCitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MedlineCitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DateCreated", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DateCompleted", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("DateRevised", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Article", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MedlineJournalInfo", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ChemicalList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CommentsCorrectionsList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("GeneSymbolList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MeshHeadingList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PersonalNameSubjectList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("OtherID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("OtherAbstract", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("KeywordList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("InvestigatorList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("GeneralNote", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public MedlineCitationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual PMID PMID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PMID)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual DateCreatedType DateCreated {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DateCreated", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DateCreatedType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DateCreated", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual DateCompletedType DateCompleted {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DateCompleted", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DateCompletedType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DateCompleted", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual DateRevisedType DateRevised {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DateRevised", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DateRevisedType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DateRevised", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual ArticleType Article {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Article", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ArticleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Article", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual MedlineJournalInfoType MedlineJournalInfo {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MedlineJournalInfo", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((MedlineJournalInfoType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MedlineJournalInfo", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual ChemicalListType ChemicalList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ChemicalList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ChemicalListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ChemicalList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<CitationSubset> CitationSubset {
            get {
                if ((this.CitationSubsetField == null)) {
                    this.CitationSubsetField = new XSimpleList<CitationSubset>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.CitationSubsetField;
            }
            set {
                if ((value == null)) {
                    this.CitationSubsetField = null;
                }
                else {
                    if ((this.CitationSubsetField == null)) {
                        this.CitationSubsetField = XSimpleList<CitationSubset>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<CitationSubset>(this.CitationSubsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual CommentsCorrectionsListType CommentsCorrectionsList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("CommentsCorrectionsList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((CommentsCorrectionsListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("CommentsCorrectionsList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual GeneSymbolListType GeneSymbolList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("GeneSymbolList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((GeneSymbolListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("GeneSymbolList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual MeshHeadingListType MeshHeadingList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MeshHeadingList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((MeshHeadingListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MeshHeadingList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual NumberOfReferences NumberOfReferences {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((NumberOfReferences)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual PersonalNameSubjectListType PersonalNameSubjectList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PersonalNameSubjectList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PersonalNameSubjectListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PersonalNameSubjectList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<OtherIDType> OtherID {
            get {
                if ((this.OtherIDField == null)) {
                    this.OtherIDField = new XTypedList<OtherIDType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("OtherID", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.OtherIDField;
            }
            set {
                if ((value == null)) {
                    this.OtherIDField = null;
                }
                else {
                    if ((this.OtherIDField == null)) {
                        this.OtherIDField = XTypedList<OtherIDType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("OtherID", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<OtherIDType>(this.OtherIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<OtherAbstractType> OtherAbstract {
            get {
                if ((this.OtherAbstractField == null)) {
                    this.OtherAbstractField = new XTypedList<OtherAbstractType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("OtherAbstract", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.OtherAbstractField;
            }
            set {
                if ((value == null)) {
                    this.OtherAbstractField = null;
                }
                else {
                    if ((this.OtherAbstractField == null)) {
                        this.OtherAbstractField = XTypedList<OtherAbstractType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("OtherAbstract", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<OtherAbstractType>(this.OtherAbstractField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<KeywordListType> KeywordList {
            get {
                if ((this.KeywordListField == null)) {
                    this.KeywordListField = new XTypedList<KeywordListType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("KeywordList", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.KeywordListField;
            }
            set {
                if ((value == null)) {
                    this.KeywordListField = null;
                }
                else {
                    if ((this.KeywordListField == null)) {
                        this.KeywordListField = XTypedList<KeywordListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("KeywordList", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<KeywordListType>(this.KeywordListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<SpaceFlightMission> SpaceFlightMission {
            get {
                if ((this.SpaceFlightMissionField == null)) {
                    this.SpaceFlightMissionField = new XSimpleList<SpaceFlightMission>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.SpaceFlightMissionField;
            }
            set {
                if ((value == null)) {
                    this.SpaceFlightMissionField = null;
                }
                else {
                    if ((this.SpaceFlightMissionField == null)) {
                        this.SpaceFlightMissionField = XSimpleList<SpaceFlightMission>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<SpaceFlightMission>(this.SpaceFlightMissionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual InvestigatorListType InvestigatorList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("InvestigatorList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((InvestigatorListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("InvestigatorList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PMID, DateCreated, DateCompleted?, DateRevised?, Article, MedlineJournalInfo, ChemicalList?, CitationSubset*, CommentsCorrectionsList?, GeneSymbolList?, MeshHeadingList?, NumberOfReferences?, PersonalNameSubjectList?, OtherID*, OtherAbstract*, KeywordList*, SpaceFlightMission*, InvestigatorList?, GeneralNote*)
        /// </para>
        /// </summary>
        public virtual IList<GeneralNoteType> GeneralNote {
            get {
                if ((this.GeneralNoteField == null)) {
                    this.GeneralNoteField = new XTypedList<GeneralNoteType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("GeneralNote", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.GeneralNoteField;
            }
            set {
                if ((value == null)) {
                    this.GeneralNoteField = null;
                }
                else {
                    if ((this.GeneralNoteField == null)) {
                        this.GeneralNoteField = XTypedList<GeneralNoteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("GeneralNote", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<GeneralNoteType>(this.GeneralNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.MedlineCitationType.OwnerEnum Owner {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Owner", ""));
                return ((PubMed.Eutils.MedlineCitationType.OwnerEnum)(Enum.Parse(typeof(PubMed.Eutils.MedlineCitationType.OwnerEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, OwnerDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Owner", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Status {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Status", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlineCitationType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlineCitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PMID));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DateCreated", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DateCreatedType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DateCompleted", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DateCompletedType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DateRevised", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DateRevisedType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Article", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ArticleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlineJournalInfo", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlineJournalInfoType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ChemicalList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ChemicalListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CitationSubset));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CommentsCorrectionsList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CommentsCorrectionsListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("GeneSymbolList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GeneSymbolListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MeshHeadingList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MeshHeadingListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(NumberOfReferences));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PersonalNameSubjectList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PersonalNameSubjectListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("OtherID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(OtherIDType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("OtherAbstract", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(OtherAbstractType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("KeywordList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(KeywordListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(SpaceFlightMission));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("InvestigatorList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(InvestigatorListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("GeneralNote", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(GeneralNoteType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum OwnerEnum {
            
            NLM,
            
            NASA,
            
            PIP,
            
            KIE,
            
            HSR,
            
            HMD,
            
            NOTNLM,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
    /// </para>
    /// </summary>
    public partial class MedlineJournalInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MedlineJournalInfoType(XElement xe) { return XTypedServices.ToXTypedElement<MedlineJournalInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MedlineJournalInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
        /// </para>
        /// </summary>
        public MedlineJournalInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
        /// </para>
        /// </summary>
        public virtual Country Country {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Country)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
        /// </para>
        /// </summary>
        public virtual MedlineTA MedlineTA {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((MedlineTA)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
        /// </para>
        /// </summary>
        public virtual NlmUniqueID NlmUniqueID {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((NlmUniqueID)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Country?, MedlineTA, NlmUniqueID?, ISSNLinking?)
        /// </para>
        /// </summary>
        public virtual ISSNLinking ISSNLinking {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ISSNLinking)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlineJournalInfoType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlineJournalInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Country));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlineTA));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(NlmUniqueID));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ISSNLinking));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DescriptorName, QualifierName*)
    /// </para>
    /// </summary>
    public partial class MeshHeadingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QualifierNameType> QualifierNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MeshHeadingType(XElement xe) { return XTypedServices.ToXTypedElement<MeshHeadingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MeshHeadingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("DescriptorName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("QualifierName", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DescriptorName, QualifierName*)
        /// </para>
        /// </summary>
        public MeshHeadingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DescriptorName, QualifierName*)
        /// </para>
        /// </summary>
        public virtual DescriptorNameType DescriptorName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("DescriptorName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((DescriptorNameType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("DescriptorName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DescriptorName, QualifierName*)
        /// </para>
        /// </summary>
        public virtual IList<QualifierNameType> QualifierName {
            get {
                if ((this.QualifierNameField == null)) {
                    this.QualifierNameField = new XTypedList<QualifierNameType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("QualifierName", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.QualifierNameField;
            }
            set {
                if ((value == null)) {
                    this.QualifierNameField = null;
                }
                else {
                    if ((this.QualifierNameField == null)) {
                        this.QualifierNameField = XTypedList<QualifierNameType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("QualifierName", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<QualifierNameType>(this.QualifierNameField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MeshHeadingType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MeshHeadingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("DescriptorName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(DescriptorNameType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("QualifierName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(QualifierNameType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MeshHeading+)
    /// </para>
    /// </summary>
    public partial class MeshHeadingListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MeshHeadingType> MeshHeadingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MeshHeadingListType(XElement xe) { return XTypedServices.ToXTypedElement<MeshHeadingListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MeshHeadingListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("MeshHeading", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MeshHeading+)
        /// </para>
        /// </summary>
        public MeshHeadingListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MeshHeading+)
        /// </para>
        /// </summary>
        public virtual IList<MeshHeadingType> MeshHeading {
            get {
                if ((this.MeshHeadingField == null)) {
                    this.MeshHeadingField = new XTypedList<MeshHeadingType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("MeshHeading", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.MeshHeadingField;
            }
            set {
                if ((value == null)) {
                    this.MeshHeadingField = null;
                }
                else {
                    if ((this.MeshHeadingField == null)) {
                        this.MeshHeadingField = XTypedList<MeshHeadingType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("MeshHeading", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<MeshHeadingType>(this.MeshHeadingField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MeshHeadingListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MeshHeadingListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MeshHeading", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MeshHeadingType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class NameIDType : XTypedElement, IXMetaData {
        
		public static explicit operator NameIDType(XElement xe) { return XTypedServices.ToXTypedElement<NameIDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NameIDType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual NameIDType.SourceEnum Source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Source", ""));
                return ((NameIDType.SourceEnum)(Enum.Parse(typeof(NameIDType.SourceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Source", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NameIDType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NameIDType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum SourceEnum {
            
            NCBI,
            
            Publisher,
            
            NISO,
            
            ISO,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Param)*
    /// </para>
    /// </summary>
    public partial class ObjectType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParamType> ParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ObjectType(XElement xe) { return XTypedServices.ToXTypedElement<ObjectType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObjectType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Param)*
        /// </para>
        /// </summary>
        public ObjectType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Param)*
        /// </para>
        /// </summary>
        public virtual IList<ParamType> Param {
            get {
                if ((this.ParamField == null)) {
                    this.ParamField = new XTypedList<ParamType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Param", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ParamField;
            }
            set {
                if ((value == null)) {
                    this.ParamField = null;
                }
                else {
                    if ((this.ParamField == null)) {
                        this.ParamField = XTypedList<ParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Param", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ParamType>(this.ParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ObjectType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObjectType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Param", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Object)+
    /// </para>
    /// </summary>
    public partial class ObjectListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObjectType> ObjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ObjectListType(XElement xe) { return XTypedServices.ToXTypedElement<ObjectListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObjectListType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Object)+
        /// </para>
        /// </summary>
        public ObjectListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Object)+
        /// </para>
        /// </summary>
        public virtual IList<ObjectType> Object {
            get {
                if ((this.ObjectField == null)) {
                    this.ObjectField = new XTypedList<ObjectType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("Object", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.ObjectField;
            }
            set {
                if ((value == null)) {
                    this.ObjectField = null;
                }
                else {
                    if ((this.ObjectField == null)) {
                        this.ObjectField = XTypedList<ObjectType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("Object", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<ObjectType>(this.ObjectField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ObjectListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObjectListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Object", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ObjectType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AbstractText, CopyrightInformation?)
    /// </para>
    /// </summary>
    public partial class OtherAbstractType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OtherAbstractType(XElement xe) { return XTypedServices.ToXTypedElement<OtherAbstractType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OtherAbstractType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public OtherAbstractType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public virtual AbstractText AbstractText {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((AbstractText)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbstractText, CopyrightInformation?)
        /// </para>
        /// </summary>
        public virtual CopyrightInformation CopyrightInformation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((CopyrightInformation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual PubMed.Eutils.OtherAbstractType.TypeEnum Type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Type", ""));
                return ((PubMed.Eutils.OtherAbstractType.TypeEnum)(Enum.Parse(typeof(PubMed.Eutils.OtherAbstractType.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Type", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("OtherAbstractType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OtherAbstractType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(AbstractText));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(CopyrightInformation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public enum TypeEnum {
            
            AAMC,
            
            AIDS,
            
            KIE,
            
            PIP,
            
            NASA,
            
            Publisher,
        }
    }
    
    public partial class OtherIDType : XTypedElement, IXMetaData {
        
		public static explicit operator OtherIDType(XElement xe) { return XTypedServices.ToXTypedElement<OtherIDType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OtherIDType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual OtherIDType.SourceEnum Source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Source", ""));
                return ((OtherIDType.SourceEnum)(Enum.Parse(typeof(OtherIDType.SourceEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Source", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("OtherIDType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OtherIDType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum SourceEnum {
            
            NASA,
            
            KIE,
            
            PIP,
            
            POP,
            
            ARPL,
            
            CPC,
            
            IND,
            
            CPFH,
            
            CLML,
            
            NRCBL,
            
            NLM,
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((StartPage, EndPage?, MedlinePgn?)|MedlinePgn)
    /// </para>
    /// </summary>
    public partial class PaginationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<MedlinePgn> MedlinePgnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator PaginationType(XElement xe) { return XTypedServices.ToXTypedElement<PaginationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PaginationType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((StartPage, EndPage?, MedlinePgn?)|MedlinePgn)
        /// </para>
        /// </summary>
        public PaginationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartPage, EndPage?, MedlinePgn?)|MedlinePgn)
        /// </para>
        /// </summary>
        public virtual StartPage StartPage {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("StartPage", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((StartPage)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("StartPage", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartPage, EndPage?, MedlinePgn?)|MedlinePgn)
        /// </para>
        /// </summary>
        public virtual EndPage EndPage {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("EndPage", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((EndPage)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("EndPage", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((StartPage, EndPage?, MedlinePgn?)|MedlinePgn)
        /// </para>
        /// </summary>
        public virtual IList<MedlinePgn> MedlinePgn {
            get {
                if ((this.MedlinePgnField == null)) {
                    this.MedlinePgnField = new XSimpleList<MedlinePgn>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("MedlinePgn", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.MedlinePgnField;
            }
            set {
                if ((value == null)) {
                    this.MedlinePgnField = null;
                }
                else {
                    if ((this.MedlinePgnField == null)) {
                        this.MedlinePgnField = XSimpleList<MedlinePgn>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("MedlinePgn", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<MedlinePgn>(this.MedlinePgnField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PaginationType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PaginationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("StartPage", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(StartPage));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("EndPage", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(EndPage));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlinePgn", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlinePgn));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ParamType : XTypedElement, IXMetaData {
        
		public static explicit operator ParamType(XElement xe) { return XTypedServices.ToXTypedElement<ParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ParamType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ParamType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParamType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
    /// </para>
    /// </summary>
    public partial class PersonalNameSubjectType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonalNameSubjectType(XElement xe) { return XTypedServices.ToXTypedElement<PersonalNameSubjectType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonalNameSubjectType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
        /// </para>
        /// </summary>
        public PersonalNameSubjectType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
        /// </para>
        /// </summary>
        public virtual LastName LastName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((LastName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
        /// </para>
        /// </summary>
        public virtual ForeName ForeName {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ForeName)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
        /// </para>
        /// </summary>
        public virtual Initials Initials {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Initials)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LastName, ForeName?, Initials?, Suffix?)
        /// </para>
        /// </summary>
        public virtual Suffix Suffix {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Suffix)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PersonalNameSubjectType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonalNameSubjectType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(LastName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ForeName));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Initials));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Suffix));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PersonalNameSubject+)
    /// </para>
    /// </summary>
    public partial class PersonalNameSubjectListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PersonalNameSubjectType> PersonalNameSubjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonalNameSubjectListType(XElement xe) { return XTypedServices.ToXTypedElement<PersonalNameSubjectListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonalNameSubjectListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PersonalNameSubject", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PersonalNameSubject+)
        /// </para>
        /// </summary>
        public PersonalNameSubjectListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PersonalNameSubject+)
        /// </para>
        /// </summary>
        public virtual IList<PersonalNameSubjectType> PersonalNameSubject {
            get {
                if ((this.PersonalNameSubjectField == null)) {
                    this.PersonalNameSubjectField = new XTypedList<PersonalNameSubjectType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("PersonalNameSubject", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.PersonalNameSubjectField;
            }
            set {
                if ((value == null)) {
                    this.PersonalNameSubjectField = null;
                }
                else {
                    if ((this.PersonalNameSubjectField == null)) {
                        this.PersonalNameSubjectField = XTypedList<PersonalNameSubjectType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("PersonalNameSubject", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<PersonalNameSubjectType>(this.PersonalNameSubjectField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PersonalNameSubjectListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonalNameSubjectListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PersonalNameSubject", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PersonalNameSubjectType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
    /// </para>
    /// </summary>
    public partial class PubDateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator PubDateType(XElement xe) { return XTypedServices.ToXTypedElement<PubDateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PubDateType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public PubDateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public virtual Season Season {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Season", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Season)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Season", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: ((Year, ((Month, Day?)|Season)?)|MedlineDate)
        /// </para>
        /// </summary>
        public virtual MedlineDate MedlineDate {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MedlineDate", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((MedlineDate)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MedlineDate", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PubDateType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PubDateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Season", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Season));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlineDate", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlineDate));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
    /// </para>
    /// </summary>
    public partial class PubMedPubDateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator PubMedPubDateType(XElement xe) { return XTypedServices.ToXTypedElement<PubMedPubDateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PubMedPubDateType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public PubMedPubDateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Year Year {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Year)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Month Month {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Month)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Day Day {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Day)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Hour Hour {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Hour", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Hour)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Hour", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Minute Minute {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Minute", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Minute)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Minute", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Year, Month, Day, (Hour, (Minute, Second?)?)?)
        /// </para>
        /// </summary>
        public virtual Second Second {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("Second", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((Second)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("Second", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string PubStatus {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("PubStatus", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("PubStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PubMedPubDateType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PubMedPubDateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Year));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Month));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Day));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Hour", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Hour));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Minute", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Minute));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("Second", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(Second));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PublicationType+)
    /// </para>
    /// </summary>
    public partial class PublicationTypeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<PublicationType> PublicationTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PublicationTypeListType(XElement xe) { return XTypedServices.ToXTypedElement<PublicationTypeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PublicationTypeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PublicationType+)
        /// </para>
        /// </summary>
        public PublicationTypeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PublicationType+)
        /// </para>
        /// </summary>
        public virtual IList<PublicationType> PublicationType {
            get {
                if ((this.PublicationTypeField == null)) {
                    this.PublicationTypeField = new XSimpleList<PublicationType>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils"));
                }
                return this.PublicationTypeField;
            }
            set {
                if ((value == null)) {
                    this.PublicationTypeField = null;
                }
                else {
                    if ((this.PublicationTypeField == null)) {
                        this.PublicationTypeField = XSimpleList<PublicationType>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils"));
                    }
                    else {
                        XTypedServices.SetList<PublicationType>(this.PublicationTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PublicationTypeListType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PublicationTypeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PublicationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MedlineCitation?, PubmedData?)
    /// </para>
    /// </summary>
    public partial class PubmedArticleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PubmedArticleType(XElement xe) { return XTypedServices.ToXTypedElement<PubmedArticleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PubmedArticleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PubmedData", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MedlineCitation?, PubmedData?)
        /// </para>
        /// </summary>
        public PubmedArticleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MedlineCitation?, PubmedData?)
        /// </para>
        /// </summary>
        public virtual MedlineCitationType MedlineCitation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((MedlineCitationType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MedlineCitation?, PubmedData?)
        /// </para>
        /// </summary>
        public virtual PubmedDataType PubmedData {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PubmedData", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PubmedDataType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PubmedData", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PubmedArticleType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PubmedArticleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("MedlineCitation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(MedlineCitationType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PubmedData", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PubmedDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
    /// </para>
    /// </summary>
    public partial class PubmedDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PubmedDataType(XElement xe) { return XTypedServices.ToXTypedElement<PubmedDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PubmedDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("History", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ArticleIdList", "http://www.ncbi.nlm.nih.gov/eutils")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("ObjectList", "http://www.ncbi.nlm.nih.gov/eutils")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
        /// </para>
        /// </summary>
        public PubmedDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
        /// </para>
        /// </summary>
        public virtual HistoryType History {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("History", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((HistoryType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("History", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
        /// </para>
        /// </summary>
        public virtual PublicationStatus PublicationStatus {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((PublicationStatus)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
        /// </para>
        /// </summary>
        public virtual ArticleIdListType ArticleIdList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ArticleIdList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ArticleIdListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ArticleIdList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (History?, PublicationStatus, ArticleIdList, ObjectList?)
        /// </para>
        /// </summary>
        public virtual ObjectListType ObjectList {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("ObjectList", "http://www.ncbi.nlm.nih.gov/eutils"));
                return ((ObjectListType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("ObjectList", "http://www.ncbi.nlm.nih.gov/eutils"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PubmedDataType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PubmedDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("History", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(HistoryType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(PublicationStatus));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ArticleIdList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ArticleIdListType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("ObjectList", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(ObjectListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class QualifierNameType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string MajorTopicYNDefaultValue = "N";
        
		public static explicit operator QualifierNameType(XElement xe) { return XTypedServices.ToXTypedElement<QualifierNameType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QualifierNameType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual QualifierNameType.MajorTopicYNEnum MajorTopicYN {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""));
                return ((QualifierNameType.MajorTopicYNEnum)(Enum.Parse(typeof(QualifierNameType.MajorTopicYNEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, MajorTopicYNDefaultValue))));
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("MajorTopicYN", ""), value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("QualifierNameType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QualifierNameType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum MajorTopicYNEnum {
            
            Y,
            
            N,
        }
    }
    
    public partial class AbstractText : XTypedElement, IXMetaData {
        
		public static explicit operator AbstractText(XElement xe) { return XTypedServices.ToXTypedElement<AbstractText>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AbstractText() {
        }
        
        public AbstractText(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AbstractText Load(string xmlFile) {
            return XTypedServices.Load<AbstractText>(xmlFile);
        }
        
        public static AbstractText Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AbstractText>(xmlFile);
        }
        
        public static AbstractText Parse(string xml) {
            return XTypedServices.Parse<AbstractText>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AbstractText>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AccessionNumber : XTypedElement, IXMetaData {
        
		public static explicit operator AccessionNumber(XElement xe) { return XTypedServices.ToXTypedElement<AccessionNumber>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AccessionNumber() {
        }
        
        public AccessionNumber(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AccessionNumber Load(string xmlFile) {
            return XTypedServices.Load<AccessionNumber>(xmlFile);
        }
        
        public static AccessionNumber Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AccessionNumber>(xmlFile);
        }
        
        public static AccessionNumber Parse(string xml) {
            return XTypedServices.Parse<AccessionNumber>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AccessionNumber>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Acronym : XTypedElement, IXMetaData {
        
		public static explicit operator Acronym(XElement xe) { return XTypedServices.ToXTypedElement<Acronym>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Acronym() {
        }
        
        public Acronym(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Acronym Load(string xmlFile) {
            return XTypedServices.Load<Acronym>(xmlFile);
        }
        
        public static Acronym Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Acronym>(xmlFile);
        }
        
        public static Acronym Parse(string xml) {
            return XTypedServices.Parse<Acronym>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Acronym>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Affiliation : XTypedElement, IXMetaData {
        
		public static explicit operator Affiliation(XElement xe) { return XTypedServices.ToXTypedElement<Affiliation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Affiliation() {
        }
        
        public Affiliation(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Affiliation Load(string xmlFile) {
            return XTypedServices.Load<Affiliation>(xmlFile);
        }
        
        public static Affiliation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Affiliation>(xmlFile);
        }
        
        public static Affiliation Parse(string xml) {
            return XTypedServices.Parse<Affiliation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Affiliation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Agency : XTypedElement, IXMetaData {
        
		public static explicit operator Agency(XElement xe) { return XTypedServices.ToXTypedElement<Agency>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Agency() {
        }
        
        public Agency(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Agency Load(string xmlFile) {
            return XTypedServices.Load<Agency>(xmlFile);
        }
        
        public static Agency Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Agency>(xmlFile);
        }
        
        public static Agency Parse(string xml) {
            return XTypedServices.Parse<Agency>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Agency>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ArticleTitle : XTypedElement, IXMetaData {
        
		public static explicit operator ArticleTitle(XElement xe) { return XTypedServices.ToXTypedElement<ArticleTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ArticleTitle() {
        }
        
        public ArticleTitle(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ArticleTitle", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ArticleTitle Load(string xmlFile) {
            return XTypedServices.Load<ArticleTitle>(xmlFile);
        }
        
        public static ArticleTitle Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ArticleTitle>(xmlFile);
        }
        
        public static ArticleTitle Parse(string xml) {
            return XTypedServices.Parse<ArticleTitle>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArticleTitle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CitationSubset : XTypedElement, IXMetaData {
        
		public static explicit operator CitationSubset(XElement xe) { return XTypedServices.ToXTypedElement<CitationSubset>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CitationSubset() {
        }
        
        public CitationSubset(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CitationSubset Load(string xmlFile) {
            return XTypedServices.Load<CitationSubset>(xmlFile);
        }
        
        public static CitationSubset Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CitationSubset>(xmlFile);
        }
        
        public static CitationSubset Parse(string xml) {
            return XTypedServices.Parse<CitationSubset>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CitationSubset>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CollectiveName : XTypedElement, IXMetaData {
        
		public static explicit operator CollectiveName(XElement xe) { return XTypedServices.ToXTypedElement<CollectiveName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CollectiveName() {
        }
        
        public CollectiveName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CollectiveName", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CollectiveName Load(string xmlFile) {
            return XTypedServices.Load<CollectiveName>(xmlFile);
        }
        
        public static CollectiveName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CollectiveName>(xmlFile);
        }
        
        public static CollectiveName Parse(string xml) {
            return XTypedServices.Parse<CollectiveName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CollectiveName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CopyrightInformation : XTypedElement, IXMetaData {
        
		public static explicit operator CopyrightInformation(XElement xe) { return XTypedServices.ToXTypedElement<CopyrightInformation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CopyrightInformation() {
        }
        
        public CopyrightInformation(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CopyrightInformation Load(string xmlFile) {
            return XTypedServices.Load<CopyrightInformation>(xmlFile);
        }
        
        public static CopyrightInformation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CopyrightInformation>(xmlFile);
        }
        
        public static CopyrightInformation Parse(string xml) {
            return XTypedServices.Parse<CopyrightInformation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CopyrightInformation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Country : XTypedElement, IXMetaData {
        
		public static explicit operator Country(XElement xe) { return XTypedServices.ToXTypedElement<Country>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Country() {
        }
        
        public Country(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Country Load(string xmlFile) {
            return XTypedServices.Load<Country>(xmlFile);
        }
        
        public static Country Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Country>(xmlFile);
        }
        
        public static Country Parse(string xml) {
            return XTypedServices.Parse<Country>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Country>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class DataBankName : XTypedElement, IXMetaData {
        
		public static explicit operator DataBankName(XElement xe) { return XTypedServices.ToXTypedElement<DataBankName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DataBankName() {
        }
        
        public DataBankName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataBankName Load(string xmlFile) {
            return XTypedServices.Load<DataBankName>(xmlFile);
        }
        
        public static DataBankName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataBankName>(xmlFile);
        }
        
        public static DataBankName Parse(string xml) {
            return XTypedServices.Parse<DataBankName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataBankName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Day : XTypedElement, IXMetaData {
        
		public static explicit operator Day(XElement xe) { return XTypedServices.ToXTypedElement<Day>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Day() {
        }
        
        public Day(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Day Load(string xmlFile) {
            return XTypedServices.Load<Day>(xmlFile);
        }
        
        public static Day Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Day>(xmlFile);
        }
        
        public static Day Parse(string xml) {
            return XTypedServices.Parse<Day>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Day>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EndPage : XTypedElement, IXMetaData {
        
		public static explicit operator EndPage(XElement xe) { return XTypedServices.ToXTypedElement<EndPage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EndPage() {
        }
        
        public EndPage(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("EndPage", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EndPage Load(string xmlFile) {
            return XTypedServices.Load<EndPage>(xmlFile);
        }
        
        public static EndPage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EndPage>(xmlFile);
        }
        
        public static EndPage Parse(string xml) {
            return XTypedServices.Parse<EndPage>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EndPage>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ForeName : XTypedElement, IXMetaData {
        
		public static explicit operator ForeName(XElement xe) { return XTypedServices.ToXTypedElement<ForeName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ForeName() {
        }
        
        public ForeName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ForeName Load(string xmlFile) {
            return XTypedServices.Load<ForeName>(xmlFile);
        }
        
        public static ForeName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ForeName>(xmlFile);
        }
        
        public static ForeName Parse(string xml) {
            return XTypedServices.Parse<ForeName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForeName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GeneSymbol : XTypedElement, IXMetaData {
        
		public static explicit operator GeneSymbol(XElement xe) { return XTypedServices.ToXTypedElement<GeneSymbol>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GeneSymbol() {
        }
        
        public GeneSymbol(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GeneSymbol Load(string xmlFile) {
            return XTypedServices.Load<GeneSymbol>(xmlFile);
        }
        
        public static GeneSymbol Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GeneSymbol>(xmlFile);
        }
        
        public static GeneSymbol Parse(string xml) {
            return XTypedServices.Parse<GeneSymbol>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeneSymbol>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GrantID : XTypedElement, IXMetaData {
        
		public static explicit operator GrantID(XElement xe) { return XTypedServices.ToXTypedElement<GrantID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GrantID() {
        }
        
        public GrantID(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GrantID Load(string xmlFile) {
            return XTypedServices.Load<GrantID>(xmlFile);
        }
        
        public static GrantID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GrantID>(xmlFile);
        }
        
        public static GrantID Parse(string xml) {
            return XTypedServices.Parse<GrantID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GrantID>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Hour : XTypedElement, IXMetaData {
        
		public static explicit operator Hour(XElement xe) { return XTypedServices.ToXTypedElement<Hour>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Hour() {
        }
        
        public Hour(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Hour", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Hour Load(string xmlFile) {
            return XTypedServices.Load<Hour>(xmlFile);
        }
        
        public static Hour Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Hour>(xmlFile);
        }
        
        public static Hour Parse(string xml) {
            return XTypedServices.Parse<Hour>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Hour>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ISOAbbreviation : XTypedElement, IXMetaData {
        
		public static explicit operator ISOAbbreviation(XElement xe) { return XTypedServices.ToXTypedElement<ISOAbbreviation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ISOAbbreviation() {
        }
        
        public ISOAbbreviation(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ISOAbbreviation Load(string xmlFile) {
            return XTypedServices.Load<ISOAbbreviation>(xmlFile);
        }
        
        public static ISOAbbreviation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ISOAbbreviation>(xmlFile);
        }
        
        public static ISOAbbreviation Parse(string xml) {
            return XTypedServices.Parse<ISOAbbreviation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ISOAbbreviation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ISSNLinking : XTypedElement, IXMetaData {
        
		public static explicit operator ISSNLinking(XElement xe) { return XTypedServices.ToXTypedElement<ISSNLinking>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ISSNLinking() {
        }
        
        public ISSNLinking(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ISSNLinking Load(string xmlFile) {
            return XTypedServices.Load<ISSNLinking>(xmlFile);
        }
        
        public static ISSNLinking Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ISSNLinking>(xmlFile);
        }
        
        public static ISSNLinking Parse(string xml) {
            return XTypedServices.Parse<ISSNLinking>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ISSNLinking>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Initials : XTypedElement, IXMetaData {
        
		public static explicit operator Initials(XElement xe) { return XTypedServices.ToXTypedElement<Initials>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Initials() {
        }
        
        public Initials(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Initials Load(string xmlFile) {
            return XTypedServices.Load<Initials>(xmlFile);
        }
        
        public static Initials Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Initials>(xmlFile);
        }
        
        public static Initials Parse(string xml) {
            return XTypedServices.Parse<Initials>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Initials>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Issue : XTypedElement, IXMetaData {
        
		public static explicit operator Issue(XElement xe) { return XTypedServices.ToXTypedElement<Issue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Issue() {
        }
        
        public Issue(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Issue Load(string xmlFile) {
            return XTypedServices.Load<Issue>(xmlFile);
        }
        
        public static Issue Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Issue>(xmlFile);
        }
        
        public static Issue Parse(string xml) {
            return XTypedServices.Parse<Issue>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Issue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Language : XTypedElement, IXMetaData {
        
		public static explicit operator Language(XElement xe) { return XTypedServices.ToXTypedElement<Language>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Language() {
        }
        
        public Language(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Language", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Language Load(string xmlFile) {
            return XTypedServices.Load<Language>(xmlFile);
        }
        
        public static Language Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Language>(xmlFile);
        }
        
        public static Language Parse(string xml) {
            return XTypedServices.Parse<Language>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Language>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LastName : XTypedElement, IXMetaData {
        
		public static explicit operator LastName(XElement xe) { return XTypedServices.ToXTypedElement<LastName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LastName() {
        }
        
        public LastName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LastName Load(string xmlFile) {
            return XTypedServices.Load<LastName>(xmlFile);
        }
        
        public static LastName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LastName>(xmlFile);
        }
        
        public static LastName Parse(string xml) {
            return XTypedServices.Parse<LastName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LastName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MedlineDate : XTypedElement, IXMetaData {
        
		public static explicit operator MedlineDate(XElement xe) { return XTypedServices.ToXTypedElement<MedlineDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MedlineDate() {
        }
        
        public MedlineDate(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlineDate", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MedlineDate Load(string xmlFile) {
            return XTypedServices.Load<MedlineDate>(xmlFile);
        }
        
        public static MedlineDate Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MedlineDate>(xmlFile);
        }
        
        public static MedlineDate Parse(string xml) {
            return XTypedServices.Parse<MedlineDate>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlineDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MedlinePgn : XTypedElement, IXMetaData {
        
		public static explicit operator MedlinePgn(XElement xe) { return XTypedServices.ToXTypedElement<MedlinePgn>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MedlinePgn() {
        }
        
        public MedlinePgn(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlinePgn", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MedlinePgn Load(string xmlFile) {
            return XTypedServices.Load<MedlinePgn>(xmlFile);
        }
        
        public static MedlinePgn Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MedlinePgn>(xmlFile);
        }
        
        public static MedlinePgn Parse(string xml) {
            return XTypedServices.Parse<MedlinePgn>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlinePgn>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MedlineTA : XTypedElement, IXMetaData {
        
		public static explicit operator MedlineTA(XElement xe) { return XTypedServices.ToXTypedElement<MedlineTA>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MedlineTA() {
        }
        
        public MedlineTA(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MedlineTA Load(string xmlFile) {
            return XTypedServices.Load<MedlineTA>(xmlFile);
        }
        
        public static MedlineTA Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MedlineTA>(xmlFile);
        }
        
        public static MedlineTA Parse(string xml) {
            return XTypedServices.Parse<MedlineTA>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MedlineTA>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Minute : XTypedElement, IXMetaData {
        
		public static explicit operator Minute(XElement xe) { return XTypedServices.ToXTypedElement<Minute>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Minute() {
        }
        
        public Minute(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Minute", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Minute Load(string xmlFile) {
            return XTypedServices.Load<Minute>(xmlFile);
        }
        
        public static Minute Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Minute>(xmlFile);
        }
        
        public static Minute Parse(string xml) {
            return XTypedServices.Parse<Minute>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Minute>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Month : XTypedElement, IXMetaData {
        
		public static explicit operator Month(XElement xe) { return XTypedServices.ToXTypedElement<Month>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Month() {
        }
        
        public Month(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Month Load(string xmlFile) {
            return XTypedServices.Load<Month>(xmlFile);
        }
        
        public static Month Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Month>(xmlFile);
        }
        
        public static Month Parse(string xml) {
            return XTypedServices.Parse<Month>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Month>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NameOfSubstance : XTypedElement, IXMetaData {
        
		public static explicit operator NameOfSubstance(XElement xe) { return XTypedServices.ToXTypedElement<NameOfSubstance>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NameOfSubstance() {
        }
        
        public NameOfSubstance(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NameOfSubstance Load(string xmlFile) {
            return XTypedServices.Load<NameOfSubstance>(xmlFile);
        }
        
        public static NameOfSubstance Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NameOfSubstance>(xmlFile);
        }
        
        public static NameOfSubstance Parse(string xml) {
            return XTypedServices.Parse<NameOfSubstance>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NameOfSubstance>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NlmUniqueID : XTypedElement, IXMetaData {
        
		public static explicit operator NlmUniqueID(XElement xe) { return XTypedServices.ToXTypedElement<NlmUniqueID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NlmUniqueID() {
        }
        
        public NlmUniqueID(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NlmUniqueID Load(string xmlFile) {
            return XTypedServices.Load<NlmUniqueID>(xmlFile);
        }
        
        public static NlmUniqueID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NlmUniqueID>(xmlFile);
        }
        
        public static NlmUniqueID Parse(string xml) {
            return XTypedServices.Parse<NlmUniqueID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NlmUniqueID>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Note : XTypedElement, IXMetaData {
        
		public static explicit operator Note(XElement xe) { return XTypedServices.ToXTypedElement<Note>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Note() {
        }
        
        public Note(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Note Load(string xmlFile) {
            return XTypedServices.Load<Note>(xmlFile);
        }
        
        public static Note Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Note>(xmlFile);
        }
        
        public static Note Parse(string xml) {
            return XTypedServices.Parse<Note>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Note>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class NumberOfReferences : XTypedElement, IXMetaData {
        
		public static explicit operator NumberOfReferences(XElement xe) { return XTypedServices.ToXTypedElement<NumberOfReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NumberOfReferences() {
        }
        
        public NumberOfReferences(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NumberOfReferences Load(string xmlFile) {
            return XTypedServices.Load<NumberOfReferences>(xmlFile);
        }
        
        public static NumberOfReferences Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NumberOfReferences>(xmlFile);
        }
        
        public static NumberOfReferences Parse(string xml) {
            return XTypedServices.Parse<NumberOfReferences>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NumberOfReferences>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PMID : XTypedElement, IXMetaData {
        
		public static explicit operator PMID(XElement xe) { return XTypedServices.ToXTypedElement<PMID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PMID() {
        }
        
        public PMID(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PMID Load(string xmlFile) {
            return XTypedServices.Load<PMID>(xmlFile);
        }
        
        public static PMID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PMID>(xmlFile);
        }
        
        public static PMID Parse(string xml) {
            return XTypedServices.Parse<PMID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PMID>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PublicationStatus : XTypedElement, IXMetaData {
        
		public static explicit operator PublicationStatus(XElement xe) { return XTypedServices.ToXTypedElement<PublicationStatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PublicationStatus() {
        }
        
        public PublicationStatus(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PublicationStatus Load(string xmlFile) {
            return XTypedServices.Load<PublicationStatus>(xmlFile);
        }
        
        public static PublicationStatus Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PublicationStatus>(xmlFile);
        }
        
        public static PublicationStatus Parse(string xml) {
            return XTypedServices.Parse<PublicationStatus>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PublicationStatus>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PublicationType : XTypedElement, IXMetaData {
        
		public static explicit operator PublicationType(XElement xe) { return XTypedServices.ToXTypedElement<PublicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PublicationType() {
        }
        
        public PublicationType(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PublicationType Load(string xmlFile) {
            return XTypedServices.Load<PublicationType>(xmlFile);
        }
        
        public static PublicationType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PublicationType>(xmlFile);
        }
        
        public static PublicationType Parse(string xml) {
            return XTypedServices.Parse<PublicationType>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PublicationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RefSource : XTypedElement, IXMetaData {
        
		public static explicit operator RefSource(XElement xe) { return XTypedServices.ToXTypedElement<RefSource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RefSource() {
        }
        
        public RefSource(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RefSource Load(string xmlFile) {
            return XTypedServices.Load<RefSource>(xmlFile);
        }
        
        public static RefSource Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RefSource>(xmlFile);
        }
        
        public static RefSource Parse(string xml) {
            return XTypedServices.Parse<RefSource>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RefSource>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RegistryNumber : XTypedElement, IXMetaData {
        
		public static explicit operator RegistryNumber(XElement xe) { return XTypedServices.ToXTypedElement<RegistryNumber>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RegistryNumber() {
        }
        
        public RegistryNumber(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RegistryNumber Load(string xmlFile) {
            return XTypedServices.Load<RegistryNumber>(xmlFile);
        }
        
        public static RegistryNumber Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RegistryNumber>(xmlFile);
        }
        
        public static RegistryNumber Parse(string xml) {
            return XTypedServices.Parse<RegistryNumber>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RegistryNumber>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Season : XTypedElement, IXMetaData {
        
		public static explicit operator Season(XElement xe) { return XTypedServices.ToXTypedElement<Season>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Season() {
        }
        
        public Season(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Season", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Season Load(string xmlFile) {
            return XTypedServices.Load<Season>(xmlFile);
        }
        
        public static Season Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Season>(xmlFile);
        }
        
        public static Season Parse(string xml) {
            return XTypedServices.Parse<Season>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Season>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Second : XTypedElement, IXMetaData {
        
		public static explicit operator Second(XElement xe) { return XTypedServices.ToXTypedElement<Second>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Second() {
        }
        
        public Second(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Second", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Second Load(string xmlFile) {
            return XTypedServices.Load<Second>(xmlFile);
        }
        
        public static Second Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Second>(xmlFile);
        }
        
        public static Second Parse(string xml) {
            return XTypedServices.Parse<Second>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Second>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SpaceFlightMission : XTypedElement, IXMetaData {
        
		public static explicit operator SpaceFlightMission(XElement xe) { return XTypedServices.ToXTypedElement<SpaceFlightMission>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SpaceFlightMission() {
        }
        
        public SpaceFlightMission(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SpaceFlightMission Load(string xmlFile) {
            return XTypedServices.Load<SpaceFlightMission>(xmlFile);
        }
        
        public static SpaceFlightMission Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SpaceFlightMission>(xmlFile);
        }
        
        public static SpaceFlightMission Parse(string xml) {
            return XTypedServices.Parse<SpaceFlightMission>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpaceFlightMission>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class StartPage : XTypedElement, IXMetaData {
        
		public static explicit operator StartPage(XElement xe) { return XTypedServices.ToXTypedElement<StartPage>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public StartPage() {
        }
        
        public StartPage(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("StartPage", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static StartPage Load(string xmlFile) {
            return XTypedServices.Load<StartPage>(xmlFile);
        }
        
        public static StartPage Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<StartPage>(xmlFile);
        }
        
        public static StartPage Parse(string xml) {
            return XTypedServices.Parse<StartPage>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StartPage>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Suffix : XTypedElement, IXMetaData {
        
		public static explicit operator Suffix(XElement xe) { return XTypedServices.ToXTypedElement<Suffix>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Suffix() {
        }
        
        public Suffix(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Suffix Load(string xmlFile) {
            return XTypedServices.Load<Suffix>(xmlFile);
        }
        
        public static Suffix Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Suffix>(xmlFile);
        }
        
        public static Suffix Parse(string xml) {
            return XTypedServices.Parse<Suffix>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Suffix>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Title : XTypedElement, IXMetaData {
        
		public static explicit operator Title(XElement xe) { return XTypedServices.ToXTypedElement<Title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Title() {
        }
        
        public Title(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Title Load(string xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Parse(string xml) {
            return XTypedServices.Parse<Title>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Title>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VernacularTitle : XTypedElement, IXMetaData {
        
		public static explicit operator VernacularTitle(XElement xe) { return XTypedServices.ToXTypedElement<VernacularTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VernacularTitle() {
        }
        
        public VernacularTitle(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("VernacularTitle", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VernacularTitle Load(string xmlFile) {
            return XTypedServices.Load<VernacularTitle>(xmlFile);
        }
        
        public static VernacularTitle Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VernacularTitle>(xmlFile);
        }
        
        public static VernacularTitle Parse(string xml) {
            return XTypedServices.Parse<VernacularTitle>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VernacularTitle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Volume : XTypedElement, IXMetaData {
        
		public static explicit operator Volume(XElement xe) { return XTypedServices.ToXTypedElement<Volume>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Volume() {
        }
        
        public Volume(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Volume Load(string xmlFile) {
            return XTypedServices.Load<Volume>(xmlFile);
        }
        
        public static Volume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Volume>(xmlFile);
        }
        
        public static Volume Parse(string xml) {
            return XTypedServices.Parse<Volume>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Volume>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Year : XTypedElement, IXMetaData {
        
		public static explicit operator Year(XElement xe) { return XTypedServices.ToXTypedElement<Year>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Year() {
        }
        
        public Year(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Year Load(string xmlFile) {
            return XTypedServices.Load<Year>(xmlFile);
        }
        
        public static Year Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Year>(xmlFile);
        }
        
        public static Year Parse(string xml) {
            return XTypedServices.Parse<Year>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Year>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AbstractType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AccessionNumberListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AccessionNumberListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ArticleType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ArticleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ArticleDateType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ArticleDateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ArticleIdType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ArticleIdType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ArticleIdListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ArticleIdListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuthorType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AuthorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuthorListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AuthorListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ChemicalType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ChemicalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ChemicalListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ChemicalListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommentsCorrectionsType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.CommentsCorrectionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommentsCorrectionsListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.CommentsCorrectionsListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataBankType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DataBankType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataBankListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DataBankListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DateCompletedType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DateCompletedType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DateCreatedType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DateCreatedType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DateRevisedType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DateRevisedType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeleteCitationType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DeleteCitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DescriptorNameType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DescriptorNameType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ELocationIDType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ELocationIDType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeneSymbolListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GeneSymbolListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeneralNoteType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GeneralNoteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GrantType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GrantType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GrantListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GrantListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HistoryType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.HistoryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ISSNType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ISSNType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InvestigatorType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.InvestigatorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InvestigatorListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.InvestigatorListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("JournalType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.JournalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("JournalIssueType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.JournalIssueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KeywordType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.KeywordType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KeywordListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.KeywordListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MedlineCitationType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlineCitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MedlineJournalInfoType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlineJournalInfoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MeshHeadingType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MeshHeadingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MeshHeadingListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MeshHeadingListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NameIDType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.NameIDType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObjectType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ObjectType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObjectListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ObjectListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OtherAbstractType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.OtherAbstractType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OtherIDType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.OtherIDType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PaginationType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PaginationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParamType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonalNameSubjectType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PersonalNameSubjectType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonalNameSubjectListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PersonalNameSubjectListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PubDateType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PubDateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PubMedPubDateType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PubMedPubDateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PublicationTypeListType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PublicationTypeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PubmedArticleType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PubmedArticleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PubmedDataType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PubmedDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QualifierNameType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.QualifierNameType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("MedlineCitationSet", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlineCitationSet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PubmedArticleSet", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PubmedArticleSet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("URL", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.URL));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AbstractText", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AbstractText));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AccessionNumber", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.AccessionNumber));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Acronym", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Acronym));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Affiliation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Affiliation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Agency", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Agency));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ArticleTitle", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ArticleTitle));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CitationSubset", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.CitationSubset));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CollectiveName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.CollectiveName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CopyrightInformation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.CopyrightInformation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Country", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Country));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DataBankName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.DataBankName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Day", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Day));
            elementDictionary.Add(System.Xml.Linq.XName.Get("EndPage", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.EndPage));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ForeName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ForeName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GeneSymbol", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GeneSymbol));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GrantID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.GrantID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Hour", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Hour));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ISOAbbreviation", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ISOAbbreviation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ISSNLinking", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.ISSNLinking));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Initials", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Initials));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Issue", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Issue));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Language", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Language));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LastName", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.LastName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MedlineDate", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlineDate));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MedlinePgn", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlinePgn));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MedlineTA", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.MedlineTA));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Minute", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Minute));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Month", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Month));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NameOfSubstance", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.NameOfSubstance));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NlmUniqueID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.NlmUniqueID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Note", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Note));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NumberOfReferences", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.NumberOfReferences));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PMID", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PMID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PublicationStatus", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PublicationStatus));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PublicationType", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.PublicationType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RefSource", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.RefSource));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RegistryNumber", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.RegistryNumber));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Season", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Season));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Second", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Second));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SpaceFlightMission", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.SpaceFlightMission));
            elementDictionary.Add(System.Xml.Linq.XName.Get("StartPage", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.StartPage));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Suffix", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Suffix));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Title", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("VernacularTitle", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.VernacularTitle));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Volume", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Volume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Year", "http://www.ncbi.nlm.nih.gov/eutils"), typeof(global::PubMed.Eutils.Year));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("MedlineCitationSet", "http://www.ncbi.nlm.nih.gov/eutils")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public MedlineCitationSet MedlineCitationSet {  get {return rootObject as MedlineCitationSet; } }

		public PubmedArticleSet PubmedArticleSet {  get {return rootObject as PubmedArticleSet; } }

		public URL URL {  get {return rootObject as URL; } }

		public AbstractText AbstractText {  get {return rootObject as AbstractText; } }

		public AccessionNumber AccessionNumber {  get {return rootObject as AccessionNumber; } }

		public Acronym Acronym {  get {return rootObject as Acronym; } }

		public Affiliation Affiliation {  get {return rootObject as Affiliation; } }

		public Agency Agency {  get {return rootObject as Agency; } }

		public ArticleTitle ArticleTitle {  get {return rootObject as ArticleTitle; } }

		public CitationSubset CitationSubset {  get {return rootObject as CitationSubset; } }

		public CollectiveName CollectiveName {  get {return rootObject as CollectiveName; } }

		public CopyrightInformation CopyrightInformation {  get {return rootObject as CopyrightInformation; } }

		public Country Country {  get {return rootObject as Country; } }

		public DataBankName DataBankName {  get {return rootObject as DataBankName; } }

		public Day Day {  get {return rootObject as Day; } }

		public EndPage EndPage {  get {return rootObject as EndPage; } }

		public ForeName ForeName {  get {return rootObject as ForeName; } }

		public GeneSymbol GeneSymbol {  get {return rootObject as GeneSymbol; } }

		public GrantID GrantID {  get {return rootObject as GrantID; } }

		public Hour Hour {  get {return rootObject as Hour; } }

		public ISOAbbreviation ISOAbbreviation {  get {return rootObject as ISOAbbreviation; } }

		public ISSNLinking ISSNLinking {  get {return rootObject as ISSNLinking; } }

		public Initials Initials {  get {return rootObject as Initials; } }

		public Issue Issue {  get {return rootObject as Issue; } }

		public Language Language {  get {return rootObject as Language; } }

		public LastName LastName {  get {return rootObject as LastName; } }

		public MedlineDate MedlineDate {  get {return rootObject as MedlineDate; } }

		public MedlinePgn MedlinePgn {  get {return rootObject as MedlinePgn; } }

		public MedlineTA MedlineTA {  get {return rootObject as MedlineTA; } }

		public Minute Minute {  get {return rootObject as Minute; } }

		public Month Month {  get {return rootObject as Month; } }

		public NameOfSubstance NameOfSubstance {  get {return rootObject as NameOfSubstance; } }

		public NlmUniqueID NlmUniqueID {  get {return rootObject as NlmUniqueID; } }

		public Note Note {  get {return rootObject as Note; } }

		public NumberOfReferences NumberOfReferences {  get {return rootObject as NumberOfReferences; } }

		public PMID PMID {  get {return rootObject as PMID; } }

		public PublicationStatus PublicationStatus {  get {return rootObject as PublicationStatus; } }

		public PublicationType PublicationType {  get {return rootObject as PublicationType; } }

		public RefSource RefSource {  get {return rootObject as RefSource; } }

		public RegistryNumber RegistryNumber {  get {return rootObject as RegistryNumber; } }

		public Season Season {  get {return rootObject as Season; } }

		public Second Second {  get {return rootObject as Second; } }

		public SpaceFlightMission SpaceFlightMission {  get {return rootObject as SpaceFlightMission; } }

		public StartPage StartPage {  get {return rootObject as StartPage; } }

		public Suffix Suffix {  get {return rootObject as Suffix; } }

		public Title Title {  get {return rootObject as Title; } }

		public VernacularTitle VernacularTitle {  get {return rootObject as VernacularTitle; } }

		public Volume Volume {  get {return rootObject as Volume; } }

		public Year Year {  get {return rootObject as Year; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(MedlineCitationSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PubmedArticleSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(URL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AbstractText root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AccessionNumber root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Acronym root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Affiliation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Agency root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ArticleTitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CitationSubset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CollectiveName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CopyrightInformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Country root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DataBankName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Day root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(EndPage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ForeName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GeneSymbol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GrantID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Hour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ISOAbbreviation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ISSNLinking root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Initials root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Issue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LastName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MedlineDate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MedlinePgn root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MedlineTA root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Minute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Month root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NameOfSubstance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NlmUniqueID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Note root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NumberOfReferences root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PMID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PublicationStatus root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PublicationType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RefSource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RegistryNumber root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Season root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Second root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SpaceFlightMission root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(StartPage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Suffix root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VernacularTitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Volume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Year root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::PubMed.Eutils.MedlineCitationSet MedlineCitationSet {  get {return rootObject as global::PubMed.Eutils.MedlineCitationSet; } }

		public global::PubMed.Eutils.PubmedArticleSet PubmedArticleSet {  get {return rootObject as global::PubMed.Eutils.PubmedArticleSet; } }

		public global::PubMed.Eutils.URL URL {  get {return rootObject as global::PubMed.Eutils.URL; } }

		public global::PubMed.Eutils.AbstractText AbstractText {  get {return rootObject as global::PubMed.Eutils.AbstractText; } }

		public global::PubMed.Eutils.AccessionNumber AccessionNumber {  get {return rootObject as global::PubMed.Eutils.AccessionNumber; } }

		public global::PubMed.Eutils.Acronym Acronym {  get {return rootObject as global::PubMed.Eutils.Acronym; } }

		public global::PubMed.Eutils.Affiliation Affiliation {  get {return rootObject as global::PubMed.Eutils.Affiliation; } }

		public global::PubMed.Eutils.Agency Agency {  get {return rootObject as global::PubMed.Eutils.Agency; } }

		public global::PubMed.Eutils.ArticleTitle ArticleTitle {  get {return rootObject as global::PubMed.Eutils.ArticleTitle; } }

		public global::PubMed.Eutils.CitationSubset CitationSubset {  get {return rootObject as global::PubMed.Eutils.CitationSubset; } }

		public global::PubMed.Eutils.CollectiveName CollectiveName {  get {return rootObject as global::PubMed.Eutils.CollectiveName; } }

		public global::PubMed.Eutils.CopyrightInformation CopyrightInformation {  get {return rootObject as global::PubMed.Eutils.CopyrightInformation; } }

		public global::PubMed.Eutils.Country Country {  get {return rootObject as global::PubMed.Eutils.Country; } }

		public global::PubMed.Eutils.DataBankName DataBankName {  get {return rootObject as global::PubMed.Eutils.DataBankName; } }

		public global::PubMed.Eutils.Day Day {  get {return rootObject as global::PubMed.Eutils.Day; } }

		public global::PubMed.Eutils.EndPage EndPage {  get {return rootObject as global::PubMed.Eutils.EndPage; } }

		public global::PubMed.Eutils.ForeName ForeName {  get {return rootObject as global::PubMed.Eutils.ForeName; } }

		public global::PubMed.Eutils.GeneSymbol GeneSymbol {  get {return rootObject as global::PubMed.Eutils.GeneSymbol; } }

		public global::PubMed.Eutils.GrantID GrantID {  get {return rootObject as global::PubMed.Eutils.GrantID; } }

		public global::PubMed.Eutils.Hour Hour {  get {return rootObject as global::PubMed.Eutils.Hour; } }

		public global::PubMed.Eutils.ISOAbbreviation ISOAbbreviation {  get {return rootObject as global::PubMed.Eutils.ISOAbbreviation; } }

		public global::PubMed.Eutils.ISSNLinking ISSNLinking {  get {return rootObject as global::PubMed.Eutils.ISSNLinking; } }

		public global::PubMed.Eutils.Initials Initials {  get {return rootObject as global::PubMed.Eutils.Initials; } }

		public global::PubMed.Eutils.Issue Issue {  get {return rootObject as global::PubMed.Eutils.Issue; } }

		public global::PubMed.Eutils.Language Language {  get {return rootObject as global::PubMed.Eutils.Language; } }

		public global::PubMed.Eutils.LastName LastName {  get {return rootObject as global::PubMed.Eutils.LastName; } }

		public global::PubMed.Eutils.MedlineDate MedlineDate {  get {return rootObject as global::PubMed.Eutils.MedlineDate; } }

		public global::PubMed.Eutils.MedlinePgn MedlinePgn {  get {return rootObject as global::PubMed.Eutils.MedlinePgn; } }

		public global::PubMed.Eutils.MedlineTA MedlineTA {  get {return rootObject as global::PubMed.Eutils.MedlineTA; } }

		public global::PubMed.Eutils.Minute Minute {  get {return rootObject as global::PubMed.Eutils.Minute; } }

		public global::PubMed.Eutils.Month Month {  get {return rootObject as global::PubMed.Eutils.Month; } }

		public global::PubMed.Eutils.NameOfSubstance NameOfSubstance {  get {return rootObject as global::PubMed.Eutils.NameOfSubstance; } }

		public global::PubMed.Eutils.NlmUniqueID NlmUniqueID {  get {return rootObject as global::PubMed.Eutils.NlmUniqueID; } }

		public global::PubMed.Eutils.Note Note {  get {return rootObject as global::PubMed.Eutils.Note; } }

		public global::PubMed.Eutils.NumberOfReferences NumberOfReferences {  get {return rootObject as global::PubMed.Eutils.NumberOfReferences; } }

		public global::PubMed.Eutils.PMID PMID {  get {return rootObject as global::PubMed.Eutils.PMID; } }

		public global::PubMed.Eutils.PublicationStatus PublicationStatus {  get {return rootObject as global::PubMed.Eutils.PublicationStatus; } }

		public global::PubMed.Eutils.PublicationType PublicationType {  get {return rootObject as global::PubMed.Eutils.PublicationType; } }

		public global::PubMed.Eutils.RefSource RefSource {  get {return rootObject as global::PubMed.Eutils.RefSource; } }

		public global::PubMed.Eutils.RegistryNumber RegistryNumber {  get {return rootObject as global::PubMed.Eutils.RegistryNumber; } }

		public global::PubMed.Eutils.Season Season {  get {return rootObject as global::PubMed.Eutils.Season; } }

		public global::PubMed.Eutils.Second Second {  get {return rootObject as global::PubMed.Eutils.Second; } }

		public global::PubMed.Eutils.SpaceFlightMission SpaceFlightMission {  get {return rootObject as global::PubMed.Eutils.SpaceFlightMission; } }

		public global::PubMed.Eutils.StartPage StartPage {  get {return rootObject as global::PubMed.Eutils.StartPage; } }

		public global::PubMed.Eutils.Suffix Suffix {  get {return rootObject as global::PubMed.Eutils.Suffix; } }

		public global::PubMed.Eutils.Title Title {  get {return rootObject as global::PubMed.Eutils.Title; } }

		public global::PubMed.Eutils.VernacularTitle VernacularTitle {  get {return rootObject as global::PubMed.Eutils.VernacularTitle; } }

		public global::PubMed.Eutils.Volume Volume {  get {return rootObject as global::PubMed.Eutils.Volume; } }

		public global::PubMed.Eutils.Year Year {  get {return rootObject as global::PubMed.Eutils.Year; } }
        
        private XRoot() {
        }
        
        public XRoot(global::PubMed.Eutils.MedlineCitationSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.PubmedArticleSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.URL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.AbstractText root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.AccessionNumber root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Acronym root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Affiliation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Agency root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.ArticleTitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.CitationSubset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.CollectiveName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.CopyrightInformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Country root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.DataBankName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Day root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.EndPage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.ForeName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.GeneSymbol root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.GrantID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Hour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.ISOAbbreviation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.ISSNLinking root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Initials root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Issue root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Language root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.LastName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.MedlineDate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.MedlinePgn root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.MedlineTA root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Minute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Month root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.NameOfSubstance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.NlmUniqueID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Note root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.NumberOfReferences root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.PMID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.PublicationStatus root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.PublicationType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.RefSource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.RegistryNumber root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Season root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Second root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.SpaceFlightMission root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.StartPage root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Suffix root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.VernacularTitle root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Volume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.Eutils.Year root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
