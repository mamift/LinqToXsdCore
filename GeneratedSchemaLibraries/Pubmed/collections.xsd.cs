//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PubMed.MyCollections {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentSummary+)
    /// </para>
    /// </summary>
    public partial class DocumentSummarySet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentSummaryXName = System.Xml.Linq.XName.Get("DocumentSummary", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentSummary> DocumentSummaryField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentSummarySet", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DocumentSummarySet(XElement xe) { return XTypedServices.ToXTypedElement<DocumentSummarySet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentSummarySet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocumentSummaryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentSummary+)
        /// </para>
        /// </summary>
        public DocumentSummarySet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocumentSummary+)
        /// </para>
        /// </summary>
        public virtual IList<DocumentSummary> DocumentSummary {
            get {
                if ((this.DocumentSummaryField == null)) {
                    this.DocumentSummaryField = new XTypedList<DocumentSummary>(this, LinqToXsdTypeManager.Instance, DocumentSummaryXName);
                }
                return this.DocumentSummaryField;
            }
            set {
                if ((value == null)) {
                    this.DocumentSummaryField = null;
                }
                else {
                    if ((this.DocumentSummaryField == null)) {
                        this.DocumentSummaryField = XTypedList<DocumentSummary>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocumentSummaryXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentSummary>(this.DocumentSummaryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DocumentSummarySet Load(string xmlFile) {
            return XTypedServices.Load<DocumentSummarySet>(xmlFile);
        }
        
        public static DocumentSummarySet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DocumentSummarySet>(xmlFile);
        }
        
        public static DocumentSummarySet Parse(string xml) {
            return XTypedServices.Parse<DocumentSummarySet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentSummarySet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocumentSummaryXName, typeof(DocumentSummary));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
    /// </para>
    /// </summary>
    public partial class Item : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLXName = System.Xml.Linq.XName.Get("URL", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DetailsXName = System.Xml.Linq.XName.Get("Details", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortDetailsXName = System.Xml.Linq.XName.Get("ShortDetails", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourceXName = System.Xml.Linq.XName.Get("Resource", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifiersXName = System.Xml.Linq.XName.Get("Identifiers", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntrezUIDXName = System.Xml.Linq.XName.Get("EntrezUID", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertiesXName = System.Xml.Linq.XName.Get("Properties", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Item", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Item(XElement xe) { return XTypedServices.ToXTypedElement<Item>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Item() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(DescriptionXName), new NamedContentModelEntity(DetailsXName), new NamedContentModelEntity(ShortDetailsXName), new NamedContentModelEntity(ResourceXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(IdentifiersXName), new NamedContentModelEntity(EntrezUIDXName), new NamedContentModelEntity(PropertiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public Item() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Title Title {
            get {
                XElement x = this.GetElement(TitleXName);
                return ((Title)(x));
            }
            set {
                this.SetElement(TitleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual URL URL {
            get {
                XElement x = this.GetElement(URLXName);
                return ((URL)(x));
            }
            set {
                this.SetElement(URLXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Description Description {
            get {
                XElement x = this.GetElement(DescriptionXName);
                return ((Description)(x));
            }
            set {
                this.SetElement(DescriptionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Details Details {
            get {
                XElement x = this.GetElement(DetailsXName);
                return ((Details)(x));
            }
            set {
                this.SetElement(DetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual ShortDetails ShortDetails {
            get {
                XElement x = this.GetElement(ShortDetailsXName);
                return ((ShortDetails)(x));
            }
            set {
                this.SetElement(ShortDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Resource Resource {
            get {
                XElement x = this.GetElement(ResourceXName);
                return ((Resource)(x));
            }
            set {
                this.SetElement(ResourceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual object Type {
            get {
                XElement x = this.GetElement(TypeXName);
                return ((object)(x));
            }
            set {
                this.SetElement(TypeXName, value.ToString());
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Identifiers Identifiers {
            get {
                XElement x = this.GetElement(IdentifiersXName);
                return ((Identifiers)(x));
            }
            set {
                this.SetElement(IdentifiersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual EntrezUID EntrezUID {
            get {
                XElement x = this.GetElement(EntrezUIDXName);
                return ((EntrezUID)(x));
            }
            set {
                this.SetElement(EntrezUIDXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, URL, Description, Details, ShortDetails?, Resource, Type, Identifiers, EntrezUID, Properties)
        /// </para>
        /// </summary>
        public virtual Properties Properties {
            get {
                XElement x = this.GetElement(PropertiesXName);
                return ((Properties)(x));
            }
            set {
                this.SetElement(PropertiesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Item Load(string xmlFile) {
            return XTypedServices.Load<Item>(xmlFile);
        }
        
        public static Item Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Item>(xmlFile);
        }
        
        public static Item Parse(string xml) {
            return XTypedServices.Parse<Item>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Item>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(URLXName, typeof(URL));
            localElementDictionary.Add(DescriptionXName, typeof(Description));
            localElementDictionary.Add(DetailsXName, typeof(Details));
            localElementDictionary.Add(ShortDetailsXName, typeof(ShortDetails));
            localElementDictionary.Add(ResourceXName, typeof(Resource));
            localElementDictionary.Add(TypeXName, typeof(Type));
            localElementDictionary.Add(IdentifiersXName, typeof(Identifiers));
            localElementDictionary.Add(EntrezUIDXName, typeof(EntrezUID));
            localElementDictionary.Add(PropertiesXName, typeof(Properties));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Type : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Type", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Type(XElement xe) { return XTypedServices.ToXTypedElement<Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Type() {
        }
        
        public virtual PubMed.MyCollections.Type1LocalType TypedValue {
            get {
                XElement x = this.Untyped;
                return ((PubMed.MyCollections.Type1LocalType)(Enum.Parse(typeof(PubMed.MyCollections.Type1LocalType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", Type1LocalTypeValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Type Load(string xmlFile) {
            return XTypedServices.Load<Type>(xmlFile);
        }
        
        public static Type Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Type>(xmlFile);
        }
        
        public static Type Parse(string xml) {
            return XTypedServices.Parse<Type>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Type>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum Type1LocalType {
            
            citation,
            
            article,
        }
        
        private class Type1LocalTypeValidator {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "citation",
                            "article"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Type1LocalTypeValidator() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Identifier+)
    /// </para>
    /// </summary>
    public partial class Identifiers : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentifierXName = System.Xml.Linq.XName.Get("Identifier", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Identifier> IdentifierField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Identifiers", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Identifiers(XElement xe) { return XTypedServices.ToXTypedElement<Identifiers>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Identifiers() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IdentifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Identifier+)
        /// </para>
        /// </summary>
        public Identifiers() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Identifier+)
        /// </para>
        /// </summary>
        public virtual IList<Identifier> Identifier {
            get {
                if ((this.IdentifierField == null)) {
                    this.IdentifierField = new XTypedList<Identifier>(this, LinqToXsdTypeManager.Instance, IdentifierXName);
                }
                return this.IdentifierField;
            }
            set {
                if ((value == null)) {
                    this.IdentifierField = null;
                }
                else {
                    if ((this.IdentifierField == null)) {
                        this.IdentifierField = XTypedList<Identifier>.Initialize(this, LinqToXsdTypeManager.Instance, value, IdentifierXName);
                    }
                    else {
                        XTypedServices.SetList<Identifier>(this.IdentifierField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Identifiers Load(string xmlFile) {
            return XTypedServices.Load<Identifiers>(xmlFile);
        }
        
        public static Identifiers Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Identifiers>(xmlFile);
        }
        
        public static Identifiers Parse(string xml) {
            return XTypedServices.Parse<Identifiers>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Identifiers>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentifierXName, typeof(Identifier));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Identifier : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Identifier", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Identifier(XElement xe) { return XTypedServices.ToXTypedElement<Identifier>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Identifier() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Identifier Load(string xmlFile) {
            return XTypedServices.Load<Identifier>(xmlFile);
        }
        
        public static Identifier Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Identifier>(xmlFile);
        }
        
        public static Identifier Parse(string xml) {
            return XTypedServices.Parse<Identifier>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Identifier>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EntrezUID : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dbXName = System.Xml.Linq.XName.Get("db", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EntrezUID", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator EntrezUID(XElement xe) { return XTypedServices.ToXTypedElement<EntrezUID>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EntrezUID() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string db {
            get {
                XAttribute x = this.Attribute(dbXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(dbXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EntrezUID Load(string xmlFile) {
            return XTypedServices.Load<EntrezUID>(xmlFile);
        }
        
        public static EntrezUID Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EntrezUID>(xmlFile);
        }
        
        public static EntrezUID Parse(string xml) {
            return XTypedServices.Parse<EntrezUID>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EntrezUID>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+)
    /// </para>
    /// </summary>
    public partial class Properties : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Property> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Properties", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Properties(XElement xe) { return XTypedServices.ToXTypedElement<Properties>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Properties() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public Properties() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public virtual IList<Property> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<Property>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<Property>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<Property>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Properties Load(string xmlFile) {
            return XTypedServices.Load<Properties>(xmlFile);
        }
        
        public static Properties Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Properties>(xmlFile);
        }
        
        public static Properties Parse(string xml) {
            return XTypedServices.Parse<Properties>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Properties>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(Property));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Property : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Property(XElement xe) { return XTypedServices.ToXTypedElement<Property>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Property() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Property Load(string xmlFile) {
            return XTypedServices.Load<Property>(xmlFile);
        }
        
        public static Property Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Property>(xmlFile);
        }
        
        public static Property Parse(string xml) {
            return XTypedServices.Parse<Property>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Property>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Item)
    /// </para>
    /// </summary>
    public partial class DocumentSummaryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ItemXName = System.Xml.Linq.XName.Get("Item", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resourceXName = System.Xml.Linq.XName.Get("resource", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentSummaryType", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DocumentSummaryType(XElement xe) { return XTypedServices.ToXTypedElement<DocumentSummaryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentSummaryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Item)
        /// </para>
        /// </summary>
        public DocumentSummaryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Item)
        /// </para>
        /// </summary>
        public virtual Item Item {
            get {
                XElement x = this.GetElement(ItemXName);
                return ((Item)(x));
            }
            set {
                this.SetElement(ItemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string resource {
            get {
                XAttribute x = this.Attribute(resourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(resourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentSummaryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ItemXName, typeof(Item));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DocumentSummary : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DocumentSummaryType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentSummary", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator DocumentSummary(XElement xe) { return XTypedServices.ToXTypedElement<DocumentSummary, DocumentSummaryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocumentSummary() {
            SetInnerType(new DocumentSummaryType());
        }
        
        public DocumentSummary(DocumentSummaryType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DocumentSummaryType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Item)
        /// </para>
        /// </summary>
        public virtual Item Item {
            get {
                return this.ContentField.Item;
            }
            set {
                this.ContentField.Item = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string resource {
            get {
                return this.ContentField.resource;
            }
            set {
                this.ContentField.resource = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DocumentSummary Load(string xmlFile) {
            return XTypedServices.Load<DocumentSummary, DocumentSummaryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocumentSummary Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DocumentSummary, DocumentSummaryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocumentSummary Parse(string xml) {
            return XTypedServices.Parse<DocumentSummary, DocumentSummaryType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new DocumentSummary(((DocumentSummaryType)(this.Content.Clone())));
        }
        
        private void SetInnerType(DocumentSummaryType ContentField) {
            this.ContentField = ((DocumentSummaryType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Title", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Title(XElement xe) { return XTypedServices.ToXTypedElement<Title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Title() {
        }
        
        public Title(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Title Load(string xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Parse(string xml) {
            return XTypedServices.Parse<Title>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Title>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class URL : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("URL", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator URL(XElement xe) { return XTypedServices.ToXTypedElement<URL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public URL() {
        }
        
        public URL(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static URL Load(string xmlFile) {
            return XTypedServices.Load<URL>(xmlFile);
        }
        
        public static URL Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<URL>(xmlFile);
        }
        
        public static URL Parse(string xml) {
            return XTypedServices.Parse<URL>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<URL>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Description : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Description", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Description(XElement xe) { return XTypedServices.ToXTypedElement<Description>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Description() {
        }
        
        public Description(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Description Load(string xmlFile) {
            return XTypedServices.Load<Description>(xmlFile);
        }
        
        public static Description Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Description>(xmlFile);
        }
        
        public static Description Parse(string xml) {
            return XTypedServices.Parse<Description>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Description>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Details : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Details", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Details(XElement xe) { return XTypedServices.ToXTypedElement<Details>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Details() {
        }
        
        public Details(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Details Load(string xmlFile) {
            return XTypedServices.Load<Details>(xmlFile);
        }
        
        public static Details Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Details>(xmlFile);
        }
        
        public static Details Parse(string xml) {
            return XTypedServices.Parse<Details>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Details>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ShortDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ShortDetails", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator ShortDetails(XElement xe) { return XTypedServices.ToXTypedElement<ShortDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ShortDetails() {
        }
        
        public ShortDetails(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ShortDetails Load(string xmlFile) {
            return XTypedServices.Load<ShortDetails>(xmlFile);
        }
        
        public static ShortDetails Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ShortDetails>(xmlFile);
        }
        
        public static ShortDetails Parse(string xml) {
            return XTypedServices.Parse<ShortDetails>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ShortDetails>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Resource : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Resource", "https://www.ncbi.nlm.nih.gov/myncbi/collections/");
        
		public static explicit operator Resource(XElement xe) { return XTypedServices.ToXTypedElement<Resource>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Resource() {
        }
        
        public Resource(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Resource Load(string xmlFile) {
            return XTypedServices.Load<Resource>(xmlFile);
        }
        
        public static Resource Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Resource>(xmlFile);
        }
        
        public static Resource Parse(string xml) {
            return XTypedServices.Parse<Resource>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Resource>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentSummaryType", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.DocumentSummaryType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("DocumentSummarySet", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.DocumentSummarySet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Item", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Item));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Type", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Type));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Identifiers", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Identifiers));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Identifier", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Identifier));
            elementDictionary.Add(System.Xml.Linq.XName.Get("EntrezUID", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.EntrezUID));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Properties", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Properties));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Property", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Property));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DocumentSummary", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.DocumentSummary));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Title", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("URL", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.URL));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Description", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Description));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Details", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Details));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ShortDetails", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.ShortDetails));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Resource", "https://www.ncbi.nlm.nih.gov/myncbi/collections/"), typeof(global::PubMed.MyCollections.Resource));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(PubMed.MyCollections.DocumentSummary), typeof(global::PubMed.MyCollections.DocumentSummaryType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("DocumentSummarySet", "https://www.ncbi.nlm.nih.gov/myncbi/collections/")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public DocumentSummarySet DocumentSummarySet {  get {return rootObject as DocumentSummarySet; } }

		public Item Item {  get {return rootObject as Item; } }

		public Type Type {  get {return rootObject as Type; } }

		public Identifiers Identifiers {  get {return rootObject as Identifiers; } }

		public Identifier Identifier {  get {return rootObject as Identifier; } }

		public EntrezUID EntrezUID {  get {return rootObject as EntrezUID; } }

		public Properties Properties {  get {return rootObject as Properties; } }

		public Property Property {  get {return rootObject as Property; } }

		public DocumentSummary DocumentSummary {  get {return rootObject as DocumentSummary; } }

		public Title Title {  get {return rootObject as Title; } }

		public URL URL {  get {return rootObject as URL; } }

		public Description Description {  get {return rootObject as Description; } }

		public Details Details {  get {return rootObject as Details; } }

		public ShortDetails ShortDetails {  get {return rootObject as ShortDetails; } }

		public Resource Resource {  get {return rootObject as Resource; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(DocumentSummarySet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Item root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Identifiers root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(EntrezUID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Properties root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DocumentSummary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(URL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Details root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ShortDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::PubMed.MyCollections.DocumentSummarySet DocumentSummarySet {  get {return rootObject as global::PubMed.MyCollections.DocumentSummarySet; } }

		public global::PubMed.MyCollections.Item Item {  get {return rootObject as global::PubMed.MyCollections.Item; } }

		public global::PubMed.MyCollections.Type Type {  get {return rootObject as global::PubMed.MyCollections.Type; } }

		public global::PubMed.MyCollections.Identifiers Identifiers {  get {return rootObject as global::PubMed.MyCollections.Identifiers; } }

		public global::PubMed.MyCollections.Identifier Identifier {  get {return rootObject as global::PubMed.MyCollections.Identifier; } }

		public global::PubMed.MyCollections.EntrezUID EntrezUID {  get {return rootObject as global::PubMed.MyCollections.EntrezUID; } }

		public global::PubMed.MyCollections.Properties Properties {  get {return rootObject as global::PubMed.MyCollections.Properties; } }

		public global::PubMed.MyCollections.Property Property {  get {return rootObject as global::PubMed.MyCollections.Property; } }

		public global::PubMed.MyCollections.DocumentSummary DocumentSummary {  get {return rootObject as global::PubMed.MyCollections.DocumentSummary; } }

		public global::PubMed.MyCollections.Title Title {  get {return rootObject as global::PubMed.MyCollections.Title; } }

		public global::PubMed.MyCollections.URL URL {  get {return rootObject as global::PubMed.MyCollections.URL; } }

		public global::PubMed.MyCollections.Description Description {  get {return rootObject as global::PubMed.MyCollections.Description; } }

		public global::PubMed.MyCollections.Details Details {  get {return rootObject as global::PubMed.MyCollections.Details; } }

		public global::PubMed.MyCollections.ShortDetails ShortDetails {  get {return rootObject as global::PubMed.MyCollections.ShortDetails; } }

		public global::PubMed.MyCollections.Resource Resource {  get {return rootObject as global::PubMed.MyCollections.Resource; } }
        
        private XRoot() {
        }
        
        public XRoot(global::PubMed.MyCollections.DocumentSummarySet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Item root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Identifiers root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Identifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.EntrezUID root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Properties root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.DocumentSummary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.URL root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Description root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Details root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.ShortDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::PubMed.MyCollections.Resource root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
