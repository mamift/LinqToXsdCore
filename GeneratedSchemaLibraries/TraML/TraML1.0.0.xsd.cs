//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace psi.hupo.org.ms.traml {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Container for the HUPO PSI TraML format for encoding selected reaction monitoring transitions and other target lists
    /// </para>
    /// <para>
    /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
    /// </para>
    /// </summary>
    public partial class TraMLType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvListXName = System.Xml.Linq.XName.Get("cvList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceFileListXName = System.Xml.Linq.XName.Get("SourceFileList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactListXName = System.Xml.Linq.XName.Get("ContactList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PublicationListXName = System.Xml.Linq.XName.Get("PublicationList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentListXName = System.Xml.Linq.XName.Get("InstrumentList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SoftwareListXName = System.Xml.Linq.XName.Get("SoftwareList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinListXName = System.Xml.Linq.XName.Get("ProteinList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompoundListXName = System.Xml.Linq.XName.Get("CompoundList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransitionListXName = System.Xml.Linq.XName.Get("TransitionList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetListXName = System.Xml.Linq.XName.Get("TargetList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TraMLType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TraMLType(XElement xe) { return XTypedServices.ToXTypedElement<TraMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TraMLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvListXName), new NamedContentModelEntity(SourceFileListXName), new NamedContentModelEntity(ContactListXName), new NamedContentModelEntity(PublicationListXName), new NamedContentModelEntity(InstrumentListXName), new NamedContentModelEntity(SoftwareListXName), new NamedContentModelEntity(ProteinListXName), new NamedContentModelEntity(CompoundListXName), new NamedContentModelEntity(TransitionListXName), new NamedContentModelEntity(TargetListXName));
        }
        
        /// <summary>
        /// <para>
        /// Container for the HUPO PSI TraML format for encoding selected reaction monitoring transitions and other target lists
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public TraMLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual cvListType cvList {
            get {
                XElement x = this.GetElement(cvListXName);
                return ((cvListType)(x));
            }
            set {
                this.SetElement(cvListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual SourceFileListType SourceFileList {
            get {
                XElement x = this.GetElement(SourceFileListXName);
                return ((SourceFileListType)(x));
            }
            set {
                this.SetElement(SourceFileListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual ContactListType ContactList {
            get {
                XElement x = this.GetElement(ContactListXName);
                return ((ContactListType)(x));
            }
            set {
                this.SetElement(ContactListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual PublicationListType PublicationList {
            get {
                XElement x = this.GetElement(PublicationListXName);
                return ((PublicationListType)(x));
            }
            set {
                this.SetElement(PublicationListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual InstrumentListType InstrumentList {
            get {
                XElement x = this.GetElement(InstrumentListXName);
                return ((InstrumentListType)(x));
            }
            set {
                this.SetElement(InstrumentListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual SoftwareListType SoftwareList {
            get {
                XElement x = this.GetElement(SoftwareListXName);
                return ((SoftwareListType)(x));
            }
            set {
                this.SetElement(SoftwareListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual ProteinListType ProteinList {
            get {
                XElement x = this.GetElement(ProteinListXName);
                return ((ProteinListType)(x));
            }
            set {
                this.SetElement(ProteinListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual CompoundListType CompoundList {
            get {
                XElement x = this.GetElement(CompoundListXName);
                return ((CompoundListType)(x));
            }
            set {
                this.SetElement(CompoundListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual TransitionListType TransitionList {
            get {
                XElement x = this.GetElement(TransitionListXName);
                return ((TransitionListType)(x));
            }
            set {
                this.SetElement(TransitionListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual TargetListType TargetList {
            get {
                XElement x = this.GetElement(TargetListXName);
                return ((TargetListType)(x));
            }
            set {
                this.SetElement(TargetListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional id for the TraML document used for referencing from external files. It is recommended to use LSIDs when possible.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Version of the TraML format used by this document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TraMLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvListXName, typeof(cvListType));
            localElementDictionary.Add(SourceFileListXName, typeof(SourceFileListType));
            localElementDictionary.Add(ContactListXName, typeof(ContactListType));
            localElementDictionary.Add(PublicationListXName, typeof(PublicationListType));
            localElementDictionary.Add(InstrumentListXName, typeof(InstrumentListType));
            localElementDictionary.Add(SoftwareListXName, typeof(SoftwareListType));
            localElementDictionary.Add(ProteinListXName, typeof(ProteinListType));
            localElementDictionary.Add(CompoundListXName, typeof(CompoundListType));
            localElementDictionary.Add(TransitionListXName, typeof(TransitionListType));
            localElementDictionary.Add(TargetListXName, typeof(TargetListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Chemical compound other than a peptide for which one or more transitions 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, RetentionTimeList*)
    /// </para>
    /// </summary>
    public partial class CompoundType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetentionTimeListXName = System.Xml.Linq.XName.Get("RetentionTimeList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RetentionTimeListType> RetentionTimeListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CompoundType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CompoundType(XElement xe) { return XTypedServices.ToXTypedElement<CompoundType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CompoundType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(RetentionTimeListXName));
        }
        
        /// <summary>
        /// <para>
        /// Chemical compound other than a peptide for which one or more transitions 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, RetentionTimeList*)
        /// </para>
        /// </summary>
        public CompoundType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, RetentionTimeList*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, RetentionTimeList*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, RetentionTimeList*)
        /// </para>
        /// </summary>
        public virtual IList<RetentionTimeListType> RetentionTimeList {
            get {
                if ((this.RetentionTimeListField == null)) {
                    this.RetentionTimeListField = new XTypedList<RetentionTimeListType>(this, LinqToXsdTypeManager.Instance, RetentionTimeListXName);
                }
                return this.RetentionTimeListField;
            }
            set {
                if ((value == null)) {
                    this.RetentionTimeListField = null;
                }
                else {
                    if ((this.RetentionTimeListField == null)) {
                        this.RetentionTimeListField = XTypedList<RetentionTimeListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RetentionTimeListXName);
                    }
                    else {
                        XTypedServices.SetList<RetentionTimeListType>(this.RetentionTimeListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the compound to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CompoundType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(RetentionTimeListXName, typeof(RetentionTimeListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of compounds (including peptides) for which one or more transitions are intended to identify
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
    /// </para>
    /// </summary>
    public partial class CompoundListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideXName = System.Xml.Linq.XName.Get("Peptide", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeptideType> PeptideField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompoundXName = System.Xml.Linq.XName.Get("Compound", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CompoundType> CompoundField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CompoundListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CompoundListType(XElement xe) { return XTypedServices.ToXTypedElement<CompoundListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CompoundListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(PeptideXName), new NamedContentModelEntity(CompoundXName));
        }
        
        /// <summary>
        /// <para>
        /// List of compounds (including peptides) for which one or more transitions are intended to identify
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
        /// </para>
        /// </summary>
        public CompoundListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
        /// </para>
        /// </summary>
        public virtual IList<PeptideType> Peptide {
            get {
                if ((this.PeptideField == null)) {
                    this.PeptideField = new XTypedList<PeptideType>(this, LinqToXsdTypeManager.Instance, PeptideXName);
                }
                return this.PeptideField;
            }
            set {
                if ((value == null)) {
                    this.PeptideField = null;
                }
                else {
                    if ((this.PeptideField == null)) {
                        this.PeptideField = XTypedList<PeptideType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeptideXName);
                    }
                    else {
                        XTypedServices.SetList<PeptideType>(this.PeptideField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Peptide*, Compound*)
        /// </para>
        /// </summary>
        public virtual IList<CompoundType> Compound {
            get {
                if ((this.CompoundField == null)) {
                    this.CompoundField = new XTypedList<CompoundType>(this, LinqToXsdTypeManager.Instance, CompoundXName);
                }
                return this.CompoundField;
            }
            set {
                if ((value == null)) {
                    this.CompoundField = null;
                }
                else {
                    if ((this.CompoundField == null)) {
                        this.CompoundField = XTypedList<CompoundType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CompoundXName);
                    }
                    else {
                        XTypedServices.SetList<CompoundType>(this.CompoundField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CompoundListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(PeptideXName, typeof(PeptideType));
            localElementDictionary.Add(CompoundXName, typeof(CompoundType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Instrument configuration used in the testing, validation or optimization of the transitions
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, ValidationStatus*)
    /// </para>
    /// </summary>
    public partial class ConfigurationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValidationStatusXName = System.Xml.Linq.XName.Get("ValidationStatus", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValidationStatusType> ValidationStatusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contactRefXName = System.Xml.Linq.XName.Get("contactRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName instrumentRefXName = System.Xml.Linq.XName.Get("instrumentRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConfigurationType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConfigurationType(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(ValidationStatusXName));
        }
        
        /// <summary>
        /// <para>
        /// Instrument configuration used in the testing, validation or optimization of the transitions
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ValidationStatus*)
        /// </para>
        /// </summary>
        public ConfigurationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ValidationStatus*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ValidationStatus*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ValidationStatus*)
        /// </para>
        /// </summary>
        public virtual IList<ValidationStatusType> ValidationStatus {
            get {
                if ((this.ValidationStatusField == null)) {
                    this.ValidationStatusField = new XTypedList<ValidationStatusType>(this, LinqToXsdTypeManager.Instance, ValidationStatusXName);
                }
                return this.ValidationStatusField;
            }
            set {
                if ((value == null)) {
                    this.ValidationStatusField = null;
                }
                else {
                    if ((this.ValidationStatusField == null)) {
                        this.ValidationStatusField = XTypedList<ValidationStatusType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValidationStatusXName);
                    }
                    else {
                        XTypedServices.SetList<ValidationStatusType>(this.ValidationStatusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a contact person originating this information
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string contactRef {
            get {
                XAttribute x = this.Attribute(contactRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(contactRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to an instrument for which this configuration information is appropriate
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string instrumentRef {
            get {
                XAttribute x = this.Attribute(instrumentRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(instrumentRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(ValidationStatusXName, typeof(ValidationStatusType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of insutrument configurations used in the validation or optimization of the transitions
    /// </para>
    /// <para>
    /// Regular expression: (Configuration+)
    /// </para>
    /// </summary>
    public partial class ConfigurationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationXName = System.Xml.Linq.XName.Get("Configuration", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConfigurationType> ConfigurationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConfigurationListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConfigurationListType(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConfigurationXName));
        }
        
        /// <summary>
        /// <para>
        /// List of insutrument configurations used in the validation or optimization of the transitions
        /// </para>
        /// <para>
        /// Regular expression: (Configuration+)
        /// </para>
        /// </summary>
        public ConfigurationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Configuration+)
        /// </para>
        /// </summary>
        public virtual IList<ConfigurationType> Configuration {
            get {
                if ((this.ConfigurationField == null)) {
                    this.ConfigurationField = new XTypedList<ConfigurationType>(this, LinqToXsdTypeManager.Instance, ConfigurationXName);
                }
                return this.ConfigurationField;
            }
            set {
                if ((value == null)) {
                    this.ConfigurationField = null;
                }
                else {
                    if ((this.ConfigurationField == null)) {
                        this.ConfigurationField = XTypedList<ConfigurationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConfigurationXName);
                    }
                    else {
                        XTypedServices.SetList<ConfigurationType>(this.ConfigurationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConfigurationXName, typeof(ConfigurationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contact person referenced in the generation or validation of transitions
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+, userParam*)
    /// </para>
    /// </summary>
    public partial class ContactType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContactType(XElement xe) { return XTypedServices.ToXTypedElement<ContactType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Contact person referenced in the generation or validation of transitions
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public ContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the contact to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of contacts referenced in the generation or validation of transitions
    /// </para>
    /// <para>
    /// Regular expression: (Contact+)
    /// </para>
    /// </summary>
    public partial class ContactListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactXName = System.Xml.Linq.XName.Get("Contact", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactType> ContactField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContactListType(XElement xe) { return XTypedServices.ToXTypedElement<ContactListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactXName));
        }
        
        /// <summary>
        /// <para>
        /// List of contacts referenced in the generation or validation of transitions
        /// </para>
        /// <para>
        /// Regular expression: (Contact+)
        /// </para>
        /// </summary>
        public ContactListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Contact+)
        /// </para>
        /// </summary>
        public virtual IList<ContactType> Contact {
            get {
                if ((this.ContactField == null)) {
                    this.ContactField = new XTypedList<ContactType>(this, LinqToXsdTypeManager.Instance, ContactXName);
                }
                return this.ContactField;
            }
            set {
                if ((value == null)) {
                    this.ContactField = null;
                }
                else {
                    if ((this.ContactField == null)) {
                        this.ContactField = XTypedList<ContactType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContactXName);
                    }
                    else {
                        XTypedServices.SetList<ContactType>(this.ContactField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactXName, typeof(ContactType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Controlled vocabulary used in a TraML document
    /// </para>
    /// </summary>
    public partial class cvType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIXName = System.Xml.Linq.XName.Get("URI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fullNameXName = System.Xml.Linq.XName.Get("fullName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvType", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator cvType(XElement xe) { return XTypedServices.ToXTypedElement<cvType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Controlled vocabulary used in a TraML document
        /// </para>
        /// </summary>
        public cvType() {
        }
        
        /// <summary>
        /// <para>
        /// Version of controlled vocabulary in use when the document was created
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Uniform Resource Identifier for the controlled vocabulary
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                XAttribute x = this.Attribute(URIXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(URIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Full name of the controlled vocabulary
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fullName {
            get {
                XAttribute x = this.Attribute(fullNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fullNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the controlled vocabulary to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cvType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of controlled vocabularies used in a TraML document
    /// </para>
    /// <para>
    /// Regular expression: (cv+)
    /// </para>
    /// </summary>
    public partial class cvListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvXName = System.Xml.Linq.XName.Get("cv", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvType> cvField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator cvListType(XElement xe) { return XTypedServices.ToXTypedElement<cvListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static cvListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvXName));
        }
        
        /// <summary>
        /// <para>
        /// List of controlled vocabularies used in a TraML document
        /// </para>
        /// <para>
        /// Regular expression: (cv+)
        /// </para>
        /// </summary>
        public cvListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cv+)
        /// </para>
        /// </summary>
        public virtual IList<cvType> cv {
            get {
                if ((this.cvField == null)) {
                    this.cvField = new XTypedList<cvType>(this, LinqToXsdTypeManager.Instance, cvXName);
                }
                return this.cvField;
            }
            set {
                if ((value == null)) {
                    this.cvField = null;
                }
                else {
                    if ((this.cvField == null)) {
                        this.cvField = XTypedList<cvType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvXName);
                    }
                    else {
                        XTypedServices.SetList<cvType>(this.cvField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cvListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvXName, typeof(cvType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Controlled vocabulary term adding information to the parent term
    /// </para>
    /// </summary>
    public partial class cvParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvRefXName = System.Xml.Linq.XName.Get("cvRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionXName = System.Xml.Linq.XName.Get("accession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitAccessionXName = System.Xml.Linq.XName.Get("unitAccession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitNameXName = System.Xml.Linq.XName.Get("unitName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitCvRefXName = System.Xml.Linq.XName.Get("unitCvRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvParamType", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator cvParamType(XElement xe) { return XTypedServices.ToXTypedElement<cvParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Controlled vocabulary term adding information to the parent term
        /// </para>
        /// </summary>
        public cvParamType() {
        }
        
        /// <summary>
        /// <para>
        /// Reference to a controlled vocabulary for which this cvParam is 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cvRef {
            get {
                XAttribute x = this.Attribute(cvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(cvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name of the controlled vocabulary term referenced
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Accession number of the controlled vocabulary term referenced
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                XAttribute x = this.Attribute(accessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalar value qualifying the controlled vocabulary term referenced
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional CV accession number for the unit term associated with the value, if any (e.g., 'UO:0000266' for 'electron volt').
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                XAttribute x = this.Attribute(unitAccessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitAccessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional CV name for the unit accession number, if any (e.g., 'electron volt' for 'UO:0000266' ).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                XAttribute x = this.Attribute(unitNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this mzML file.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                XAttribute x = this.Attribute(unitCvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(unitCvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cvParamType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information about empirical mass spectrometer observations of the peptide
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+, userParam*)
    /// </para>
    /// </summary>
    public partial class EvidenceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EvidenceType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EvidenceType(XElement xe) { return XTypedServices.ToXTypedElement<EvidenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EvidenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Information about empirical mass spectrometer observations of the peptide
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public EvidenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EvidenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Instrument on which transitions are validated
    /// </para>
    /// <para>
    /// Regular expression: (cvParam, userParam*)
    /// </para>
    /// </summary>
    public partial class InstrumentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Instrument on which transitions are validated
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public InstrumentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public virtual cvParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((cvParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the instrument to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of instruments on which transitions are validated
    /// </para>
    /// <para>
    /// Regular expression: (Instrument+)
    /// </para>
    /// </summary>
    public partial class InstrumentListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentXName = System.Xml.Linq.XName.Get("Instrument", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentType> InstrumentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentListType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InstrumentXName));
        }
        
        /// <summary>
        /// <para>
        /// List of instruments on which transitions are validated
        /// </para>
        /// <para>
        /// Regular expression: (Instrument+)
        /// </para>
        /// </summary>
        public InstrumentListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Instrument+)
        /// </para>
        /// </summary>
        public virtual IList<InstrumentType> Instrument {
            get {
                if ((this.InstrumentField == null)) {
                    this.InstrumentField = new XTypedList<InstrumentType>(this, LinqToXsdTypeManager.Instance, InstrumentXName);
                }
                return this.InstrumentField;
            }
            set {
                if ((value == null)) {
                    this.InstrumentField = null;
                }
                else {
                    if ((this.InstrumentField == null)) {
                        this.InstrumentField = XTypedList<InstrumentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InstrumentXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentType>(this.InstrumentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InstrumentXName, typeof(InstrumentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A possible interpretation of the product ion for a transition
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class InterpretationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InterpretationType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InterpretationType(XElement xe) { return XTypedServices.ToXTypedElement<InterpretationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InterpretationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// A possible interpretation of the product ion for a transition
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public InterpretationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InterpretationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of possible interprations of fragment ions for a transition
    /// </para>
    /// <para>
    /// Regular expression: (Interpretation+)
    /// </para>
    /// </summary>
    public partial class InterpretationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterpretationXName = System.Xml.Linq.XName.Get("Interpretation", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InterpretationType> InterpretationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InterpretationListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InterpretationListType(XElement xe) { return XTypedServices.ToXTypedElement<InterpretationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InterpretationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InterpretationXName));
        }
        
        /// <summary>
        /// <para>
        /// List of possible interprations of fragment ions for a transition
        /// </para>
        /// <para>
        /// Regular expression: (Interpretation+)
        /// </para>
        /// </summary>
        public InterpretationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Interpretation+)
        /// </para>
        /// </summary>
        public virtual IList<InterpretationType> Interpretation {
            get {
                if ((this.InterpretationField == null)) {
                    this.InterpretationField = new XTypedList<InterpretationType>(this, LinqToXsdTypeManager.Instance, InterpretationXName);
                }
                return this.InterpretationField;
            }
            set {
                if ((value == null)) {
                    this.InterpretationField = null;
                }
                else {
                    if ((this.InterpretationField == null)) {
                        this.InterpretationField = XTypedList<InterpretationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InterpretationXName);
                    }
                    else {
                        XTypedServices.SetList<InterpretationType>(this.InterpretationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InterpretationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InterpretationXName, typeof(InterpretationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A molecule modification specification. If n modifications are present on the peptide, there should be n instances of the modification element. If multiple modifications are provided as cvParams, it is assumed the modification is ambiguous, i.e. one modification or the other. If no cvParams are provided it is assumed that the delta has not been matched to a known modification.
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class ModificationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName monoisotopicMassDeltaXName = System.Xml.Linq.XName.Get("monoisotopicMassDelta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName averageMassDeltaXName = System.Xml.Linq.XName.Get("averageMassDelta", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModificationType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModificationType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// A molecule modification specification. If n modifications are present on the peptide, there should be n instances of the modification element. If multiple modifications are provided as cvParams, it is assumed the modification is ambiguous, i.e. one modification or the other. If no cvParams are provided it is assumed that the delta has not been matched to a known modification.
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public ModificationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Location of the modification within the peptide sequence, counted from the N-terminus, starting at position 1. Specific modifications to the N-terminus should be given the location 0. Modification to the C-terminus should be given as peptide length + 1.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int location {
            get {
                XAttribute x = this.Attribute(locationXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta when assuming only the most common isotope of elements in Daltons.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? monoisotopicMassDelta {
            get {
                XAttribute x = this.Attribute(monoisotopicMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(monoisotopicMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta when considering the natural distribution of isotopes in Daltons.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? averageMassDelta {
            get {
                XAttribute x = this.Attribute(averageMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(averageMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Peptide for which one or more transitions are intended to identify
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
    /// </para>
    /// </summary>
    public partial class PeptideType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinRefXName = System.Xml.Linq.XName.Get("ProteinRef", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProteinRefType> ProteinRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModificationXName = System.Xml.Linq.XName.Get("Modification", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModificationType> ModificationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetentionTimeListXName = System.Xml.Linq.XName.Get("RetentionTimeList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EvidenceXName = System.Xml.Linq.XName.Get("Evidence", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceXName = System.Xml.Linq.XName.Get("sequence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeptideType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PeptideType(XElement xe) { return XTypedServices.ToXTypedElement<PeptideType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PeptideType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(ProteinRefXName), new NamedContentModelEntity(ModificationXName), new NamedContentModelEntity(RetentionTimeListXName), new NamedContentModelEntity(EvidenceXName));
        }
        
        /// <summary>
        /// <para>
        /// Peptide for which one or more transitions are intended to identify
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public PeptideType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual IList<ProteinRefType> ProteinRef {
            get {
                if ((this.ProteinRefField == null)) {
                    this.ProteinRefField = new XTypedList<ProteinRefType>(this, LinqToXsdTypeManager.Instance, ProteinRefXName);
                }
                return this.ProteinRefField;
            }
            set {
                if ((value == null)) {
                    this.ProteinRefField = null;
                }
                else {
                    if ((this.ProteinRefField == null)) {
                        this.ProteinRefField = XTypedList<ProteinRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProteinRefXName);
                    }
                    else {
                        XTypedServices.SetList<ProteinRefType>(this.ProteinRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual IList<ModificationType> Modification {
            get {
                if ((this.ModificationField == null)) {
                    this.ModificationField = new XTypedList<ModificationType>(this, LinqToXsdTypeManager.Instance, ModificationXName);
                }
                return this.ModificationField;
            }
            set {
                if ((value == null)) {
                    this.ModificationField = null;
                }
                else {
                    if ((this.ModificationField == null)) {
                        this.ModificationField = XTypedList<ModificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModificationXName);
                    }
                    else {
                        XTypedServices.SetList<ModificationType>(this.ModificationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual RetentionTimeListType RetentionTimeList {
            get {
                XElement x = this.GetElement(RetentionTimeListXName);
                return ((RetentionTimeListType)(x));
            }
            set {
                this.SetElement(RetentionTimeListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, ProteinRef*, Modification*, RetentionTimeList?, Evidence?)
        /// </para>
        /// </summary>
        public virtual EvidenceType Evidence {
            get {
                XElement x = this.GetElement(EvidenceXName);
                return ((EvidenceType)(x));
            }
            set {
                this.SetElement(EvidenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the peptide to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Amino acid sequence of the peptide being described
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string sequence {
            get {
                XAttribute x = this.Attribute(sequenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeptideType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(ProteinRefXName, typeof(ProteinRefType));
            localElementDictionary.Add(ModificationXName, typeof(ModificationType));
            localElementDictionary.Add(RetentionTimeListXName, typeof(RetentionTimeListType));
            localElementDictionary.Add(EvidenceXName, typeof(EvidenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Precursor (Q1) of the transition or target
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class PrecursorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PrecursorType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PrecursorType(XElement xe) { return XTypedServices.ToXTypedElement<PrecursorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PrecursorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Precursor (Q1) of the transition or target
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public PrecursorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PrecursorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Intermediate product ion information of the transition when using MS3 or above
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
    /// </para>
    /// </summary>
    public partial class IntermediateProductType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterpretationListXName = System.Xml.Linq.XName.Get("InterpretationList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationListXName = System.Xml.Linq.XName.Get("ConfigurationList", "http://psi.hupo.org/ms/traml");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IntermediateProductType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IntermediateProductType(XElement xe) { return XTypedServices.ToXTypedElement<IntermediateProductType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IntermediateProductType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(InterpretationListXName), new NamedContentModelEntity(ConfigurationListXName));
        }
        
        /// <summary>
        /// <para>
        /// Intermediate product ion information of the transition when using MS3 or above
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public IntermediateProductType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual InterpretationListType InterpretationList {
            get {
                XElement x = this.GetElement(InterpretationListXName);
                return ((InterpretationListType)(x));
            }
            set {
                this.SetElement(InterpretationListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual ConfigurationListType ConfigurationList {
            get {
                XElement x = this.GetElement(ConfigurationListXName);
                return ((ConfigurationListType)(x));
            }
            set {
                this.SetElement(ConfigurationListXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IntermediateProductType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(InterpretationListXName, typeof(InterpretationListType));
            localElementDictionary.Add(ConfigurationListXName, typeof(ConfigurationListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Product (Q3) of the transition
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
    /// </para>
    /// </summary>
    public partial class ProductType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InterpretationListXName = System.Xml.Linq.XName.Get("InterpretationList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationListXName = System.Xml.Linq.XName.Get("ConfigurationList", "http://psi.hupo.org/ms/traml");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProductType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProductType(XElement xe) { return XTypedServices.ToXTypedElement<ProductType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProductType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(InterpretationListXName), new NamedContentModelEntity(ConfigurationListXName));
        }
        
        /// <summary>
        /// <para>
        /// Product (Q3) of the transition
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public ProductType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual InterpretationListType InterpretationList {
            get {
                XElement x = this.GetElement(InterpretationListXName);
                return ((InterpretationListType)(x));
            }
            set {
                this.SetElement(InterpretationListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, InterpretationList?, ConfigurationList?)
        /// </para>
        /// </summary>
        public virtual ConfigurationListType ConfigurationList {
            get {
                XElement x = this.GetElement(ConfigurationListXName);
                return ((ConfigurationListType)(x));
            }
            set {
                this.SetElement(ConfigurationListXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProductType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(InterpretationListXName, typeof(InterpretationListType));
            localElementDictionary.Add(ConfigurationListXName, typeof(ConfigurationListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information about a prediction for a suitable transition using some software
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class PredictionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName softwareRefXName = System.Xml.Linq.XName.Get("softwareRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contactRefXName = System.Xml.Linq.XName.Get("contactRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PredictionType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PredictionType(XElement xe) { return XTypedServices.ToXTypedElement<PredictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PredictionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Information about a prediction for a suitable transition using some software
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public PredictionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a software package from which this prediction is derived
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string softwareRef {
            get {
                XAttribute x = this.Attribute(softwareRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(softwareRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a contact person that generated this prediction
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string contactRef {
            get {
                XAttribute x = this.Attribute(contactRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(contactRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PredictionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Protein for which one or more transitions are intended to identify
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, Sequence?)
    /// </para>
    /// </summary>
    public partial class ProteinType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(SequenceXName));
        }
        
        /// <summary>
        /// <para>
        /// Protein for which one or more transitions are intended to identify
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Sequence?)
        /// </para>
        /// </summary>
        public ProteinType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Sequence?)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Sequence?)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, Sequence?)
        /// </para>
        /// </summary>
        public virtual SequenceType Sequence {
            get {
                XElement x = this.GetElement(SequenceXName);
                return ((SequenceType)(x));
            }
            set {
                this.SetElement(SequenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the protein to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(SequenceXName, typeof(SequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of proteins for which one or more transitions are intended to identify
    /// </para>
    /// <para>
    /// Regular expression: (Protein+)
    /// </para>
    /// </summary>
    public partial class ProteinListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinXName = System.Xml.Linq.XName.Get("Protein", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProteinType> ProteinField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinListType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProteinXName));
        }
        
        /// <summary>
        /// <para>
        /// List of proteins for which one or more transitions are intended to identify
        /// </para>
        /// <para>
        /// Regular expression: (Protein+)
        /// </para>
        /// </summary>
        public ProteinListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Protein+)
        /// </para>
        /// </summary>
        public virtual IList<ProteinType> Protein {
            get {
                if ((this.ProteinField == null)) {
                    this.ProteinField = new XTypedList<ProteinType>(this, LinqToXsdTypeManager.Instance, ProteinXName);
                }
                return this.ProteinField;
            }
            set {
                if ((value == null)) {
                    this.ProteinField = null;
                }
                else {
                    if ((this.ProteinField == null)) {
                        this.ProteinField = XTypedList<ProteinType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProteinXName);
                    }
                    else {
                        XTypedServices.SetList<ProteinType>(this.ProteinField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProteinXName, typeof(ProteinType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference to a protein which this peptide is intended to identify
    /// </para>
    /// </summary>
    public partial class ProteinRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @refXName = System.Xml.Linq.XName.Get("ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinRefType", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator ProteinRefType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Reference to a protein which this peptide is intended to identify
        /// </para>
        /// </summary>
        public ProteinRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Reference to a protein which this peptide is intended to identify
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @ref {
            get {
                XAttribute x = this.Attribute(@refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(@refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference to a publication in which one or more transitions were published
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+, userParam*)
    /// </para>
    /// </summary>
    public partial class PublicationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PublicationType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PublicationType(XElement xe) { return XTypedServices.ToXTypedElement<PublicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PublicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Reference to a publication in which one or more transitions were published
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public PublicationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the publication to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PublicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of publications from which the transitions were collected or wherein they are published
    /// </para>
    /// <para>
    /// Regular expression: (Publication+)
    /// </para>
    /// </summary>
    public partial class PublicationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PublicationXName = System.Xml.Linq.XName.Get("Publication", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PublicationType> PublicationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PublicationListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PublicationListType(XElement xe) { return XTypedServices.ToXTypedElement<PublicationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PublicationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PublicationXName));
        }
        
        /// <summary>
        /// <para>
        /// List of publications from which the transitions were collected or wherein they are published
        /// </para>
        /// <para>
        /// Regular expression: (Publication+)
        /// </para>
        /// </summary>
        public PublicationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Publication+)
        /// </para>
        /// </summary>
        public virtual IList<PublicationType> Publication {
            get {
                if ((this.PublicationField == null)) {
                    this.PublicationField = new XTypedList<PublicationType>(this, LinqToXsdTypeManager.Instance, PublicationXName);
                }
                return this.PublicationField;
            }
            set {
                if ((value == null)) {
                    this.PublicationField = null;
                }
                else {
                    if ((this.PublicationField == null)) {
                        this.PublicationField = XTypedList<PublicationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PublicationXName);
                    }
                    else {
                        XTypedServices.SetList<PublicationType>(this.PublicationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PublicationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PublicationXName, typeof(PublicationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information about predicted or calibrated retention time
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+, userParam*)
    /// </para>
    /// </summary>
    public partial class RetentionTimeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName softwareRefXName = System.Xml.Linq.XName.Get("softwareRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RetentionTimeType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RetentionTimeType(XElement xe) { return XTypedServices.ToXTypedElement<RetentionTimeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RetentionTimeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Information about predicted or calibrated retention time
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public RetentionTimeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Software used to determine the retention time
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string softwareRef {
            get {
                XAttribute x = this.Attribute(softwareRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(softwareRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RetentionTimeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of retention time information entries
    /// </para>
    /// <para>
    /// Regular expression: (RetentionTime+)
    /// </para>
    /// </summary>
    public partial class RetentionTimeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetentionTimeXName = System.Xml.Linq.XName.Get("RetentionTime", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RetentionTimeType> RetentionTimeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RetentionTimeListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RetentionTimeListType(XElement xe) { return XTypedServices.ToXTypedElement<RetentionTimeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RetentionTimeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RetentionTimeXName));
        }
        
        /// <summary>
        /// <para>
        /// List of retention time information entries
        /// </para>
        /// <para>
        /// Regular expression: (RetentionTime+)
        /// </para>
        /// </summary>
        public RetentionTimeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RetentionTime+)
        /// </para>
        /// </summary>
        public virtual IList<RetentionTimeType> RetentionTime {
            get {
                if ((this.RetentionTimeField == null)) {
                    this.RetentionTimeField = new XTypedList<RetentionTimeType>(this, LinqToXsdTypeManager.Instance, RetentionTimeXName);
                }
                return this.RetentionTimeField;
            }
            set {
                if ((value == null)) {
                    this.RetentionTimeField = null;
                }
                else {
                    if ((this.RetentionTimeField == null)) {
                        this.RetentionTimeField = XTypedList<RetentionTimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RetentionTimeXName);
                    }
                    else {
                        XTypedServices.SetList<RetentionTimeType>(this.RetentionTimeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RetentionTimeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RetentionTimeXName, typeof(RetentionTimeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Amino acid sequence of the protein
    /// </para>
    /// </summary>
    public partial class SequenceType : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SequenceType", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator SequenceType(XElement xe) { return XTypedServices.ToXTypedElement<SequenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Amino acid sequence of the protein
        /// </para>
        /// </summary>
        public SequenceType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SequenceType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Description of a software package used in the generation of one or more transitions described in the document
    /// </para>
    /// <para>
    /// Regular expression: (cvParam, userParam*)
    /// </para>
    /// </summary>
    public partial class SoftwareType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SoftwareType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SoftwareType(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoftwareType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Description of a software package used in the generation of one or more transitions described in the document
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public SoftwareType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public virtual cvParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((cvParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the software to be used for referencing within a document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Version of the software program described
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of software packages used in the generation of one of more transitions described in the document
    /// </para>
    /// <para>
    /// Regular expression: (Software+)
    /// </para>
    /// </summary>
    public partial class SoftwareListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SoftwareXName = System.Xml.Linq.XName.Get("Software", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SoftwareType> SoftwareField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SoftwareListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SoftwareListType(XElement xe) { return XTypedServices.ToXTypedElement<SoftwareListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SoftwareListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SoftwareXName));
        }
        
        /// <summary>
        /// <para>
        /// List of software packages used in the generation of one of more transitions described in the document
        /// </para>
        /// <para>
        /// Regular expression: (Software+)
        /// </para>
        /// </summary>
        public SoftwareListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Software+)
        /// </para>
        /// </summary>
        public virtual IList<SoftwareType> Software {
            get {
                if ((this.SoftwareField == null)) {
                    this.SoftwareField = new XTypedList<SoftwareType>(this, LinqToXsdTypeManager.Instance, SoftwareXName);
                }
                return this.SoftwareField;
            }
            set {
                if ((value == null)) {
                    this.SoftwareField = null;
                }
                else {
                    if ((this.SoftwareField == null)) {
                        this.SoftwareField = XTypedList<SoftwareType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SoftwareXName);
                    }
                    else {
                        XTypedServices.SetList<SoftwareType>(this.SoftwareField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SoftwareListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SoftwareXName, typeof(SoftwareType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Description of the source file, including location and type.
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+, userParam*)
    /// </para>
    /// </summary>
    public partial class SourceFileType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SourceFileType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SourceFileType(XElement xe) { return XTypedServices.ToXTypedElement<SourceFileType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SourceFileType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Description of the source file, including location and type.
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public SourceFileType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Identifier for the sourceFile to be used for referencing within a document.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name of the source file, without reference to location (either URI or local path).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// URI-formatted location where the file was retrieved.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri location {
            get {
                XAttribute x = this.Attribute(locationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SourceFileType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List and descriptions of the source files this TraML document was generated or derived from
    /// </para>
    /// <para>
    /// Regular expression: (SourceFile+)
    /// </para>
    /// </summary>
    public partial class SourceFileListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceFileXName = System.Xml.Linq.XName.Get("SourceFile", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SourceFileType> SourceFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SourceFileListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SourceFileListType(XElement xe) { return XTypedServices.ToXTypedElement<SourceFileListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SourceFileListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SourceFileXName));
        }
        
        /// <summary>
        /// <para>
        /// List and descriptions of the source files this TraML document was generated or derived from
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile+)
        /// </para>
        /// </summary>
        public SourceFileListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile+)
        /// </para>
        /// </summary>
        public virtual IList<SourceFileType> SourceFile {
            get {
                if ((this.SourceFileField == null)) {
                    this.SourceFileField = new XTypedList<SourceFileType>(this, LinqToXsdTypeManager.Instance, SourceFileXName);
                }
                return this.SourceFileField;
            }
            set {
                if ((value == null)) {
                    this.SourceFileField = null;
                }
                else {
                    if ((this.SourceFileField == null)) {
                        this.SourceFileField = XTypedList<SourceFileType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SourceFileXName);
                    }
                    else {
                        XTypedServices.SetList<SourceFileType>(this.SourceFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SourceFileListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SourceFileXName, typeof(SourceFileType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A peptide or compound that is to be included or excluded from a target list of precursor m/z values.
    /// </para>
    /// <para>
    /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class TargetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrecursorXName = System.Xml.Linq.XName.Get("Precursor", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetentionTimeXName = System.Xml.Linq.XName.Get("RetentionTime", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationListXName = System.Xml.Linq.XName.Get("ConfigurationList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptideRefXName = System.Xml.Linq.XName.Get("peptideRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName compoundRefXName = System.Xml.Linq.XName.Get("compoundRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TargetType(XElement xe) { return XTypedServices.ToXTypedElement<TargetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrecursorXName), new NamedContentModelEntity(RetentionTimeXName), new NamedContentModelEntity(ConfigurationListXName), new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// A peptide or compound that is to be included or excluded from a target list of precursor m/z values.
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public TargetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual PrecursorType Precursor {
            get {
                XElement x = this.GetElement(PrecursorXName);
                return ((PrecursorType)(x));
            }
            set {
                this.SetElement(PrecursorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual RetentionTimeType RetentionTime {
            get {
                XElement x = this.GetElement(RetentionTimeXName);
                return ((RetentionTimeType)(x));
            }
            set {
                this.SetElement(RetentionTimeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual ConfigurationListType ConfigurationList {
            get {
                XElement x = this.GetElement(ConfigurationListXName);
                return ((ConfigurationListType)(x));
            }
            set {
                this.SetElement(ConfigurationListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, RetentionTime?, ConfigurationList?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// String label for this target
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a peptide for which this target is the trigger
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string peptideRef {
            get {
                XAttribute x = this.Attribute(peptideRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(peptideRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a compound for which this target is the trigger
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string compoundRef {
            get {
                XAttribute x = this.Attribute(compoundRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(compoundRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PrecursorXName, typeof(PrecursorType));
            localElementDictionary.Add(RetentionTimeXName, typeof(RetentionTimeType));
            localElementDictionary.Add(ConfigurationListXName, typeof(ConfigurationListType));
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of precursor m/z targets to exclude
    /// </para>
    /// <para>
    /// Regular expression: (Target+)
    /// </para>
    /// </summary>
    public partial class TargetExcludeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetXName = System.Xml.Linq.XName.Get("Target", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetType> TargetField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetExcludeListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TargetExcludeListType(XElement xe) { return XTypedServices.ToXTypedElement<TargetExcludeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetExcludeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetXName));
        }
        
        /// <summary>
        /// <para>
        /// List of precursor m/z targets to exclude
        /// </para>
        /// <para>
        /// Regular expression: (Target+)
        /// </para>
        /// </summary>
        public TargetExcludeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Target+)
        /// </para>
        /// </summary>
        public virtual IList<TargetType> Target {
            get {
                if ((this.TargetField == null)) {
                    this.TargetField = new XTypedList<TargetType>(this, LinqToXsdTypeManager.Instance, TargetXName);
                }
                return this.TargetField;
            }
            set {
                if ((value == null)) {
                    this.TargetField = null;
                }
                else {
                    if ((this.TargetField == null)) {
                        this.TargetField = XTypedList<TargetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetXName);
                    }
                    else {
                        XTypedServices.SetList<TargetType>(this.TargetField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetExcludeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetXName, typeof(TargetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of precursor m/z targets to include
    /// </para>
    /// <para>
    /// Regular expression: (Target+)
    /// </para>
    /// </summary>
    public partial class TargetIncludeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetXName = System.Xml.Linq.XName.Get("Target", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetType> TargetField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetIncludeListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TargetIncludeListType(XElement xe) { return XTypedServices.ToXTypedElement<TargetIncludeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetIncludeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetXName));
        }
        
        /// <summary>
        /// <para>
        /// List of precursor m/z targets to include
        /// </para>
        /// <para>
        /// Regular expression: (Target+)
        /// </para>
        /// </summary>
        public TargetIncludeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Target+)
        /// </para>
        /// </summary>
        public virtual IList<TargetType> Target {
            get {
                if ((this.TargetField == null)) {
                    this.TargetField = new XTypedList<TargetType>(this, LinqToXsdTypeManager.Instance, TargetXName);
                }
                return this.TargetField;
            }
            set {
                if ((value == null)) {
                    this.TargetField = null;
                }
                else {
                    if ((this.TargetField == null)) {
                        this.TargetField = XTypedList<TargetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetXName);
                    }
                    else {
                        XTypedServices.SetList<TargetType>(this.TargetField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetIncludeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetXName, typeof(TargetType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of precursor m/z targets to include or exclude
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
    /// </para>
    /// </summary>
    public partial class TargetListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetIncludeListXName = System.Xml.Linq.XName.Get("TargetIncludeList", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetExcludeListXName = System.Xml.Linq.XName.Get("TargetExcludeList", "http://psi.hupo.org/ms/traml");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TargetListType(XElement xe) { return XTypedServices.ToXTypedElement<TargetListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(TargetIncludeListXName), new NamedContentModelEntity(TargetExcludeListXName));
        }
        
        /// <summary>
        /// <para>
        /// List of precursor m/z targets to include or exclude
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
        /// </para>
        /// </summary>
        public TargetListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
        /// </para>
        /// </summary>
        public virtual TargetIncludeListType TargetIncludeList {
            get {
                XElement x = this.GetElement(TargetIncludeListXName);
                return ((TargetIncludeListType)(x));
            }
            set {
                this.SetElement(TargetIncludeListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*, TargetIncludeList?, TargetExcludeList?)
        /// </para>
        /// </summary>
        public virtual TargetExcludeListType TargetExcludeList {
            get {
                XElement x = this.GetElement(TargetExcludeListXName);
                return ((TargetExcludeListType)(x));
            }
            set {
                this.SetElement(TargetExcludeListXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(TargetIncludeListXName, typeof(TargetIncludeListType));
            localElementDictionary.Add(TargetExcludeListXName, typeof(TargetExcludeListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information about a single transition for a peptide or other compound
    /// </para>
    /// <para>
    /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class TransitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrecursorXName = System.Xml.Linq.XName.Get("Precursor", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntermediateProductXName = System.Xml.Linq.XName.Get("IntermediateProduct", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IntermediateProductType> IntermediateProductField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProductXName = System.Xml.Linq.XName.Get("Product", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetentionTimeXName = System.Xml.Linq.XName.Get("RetentionTime", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PredictionXName = System.Xml.Linq.XName.Get("Prediction", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptideRefXName = System.Xml.Linq.XName.Get("peptideRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName compoundRefXName = System.Xml.Linq.XName.Get("compoundRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransitionType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TransitionType(XElement xe) { return XTypedServices.ToXTypedElement<TransitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TransitionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrecursorXName), new NamedContentModelEntity(IntermediateProductXName), new NamedContentModelEntity(ProductXName), new NamedContentModelEntity(RetentionTimeXName), new NamedContentModelEntity(PredictionXName), new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Information about a single transition for a peptide or other compound
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public TransitionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual PrecursorType Precursor {
            get {
                XElement x = this.GetElement(PrecursorXName);
                return ((PrecursorType)(x));
            }
            set {
                this.SetElement(PrecursorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<IntermediateProductType> IntermediateProduct {
            get {
                if ((this.IntermediateProductField == null)) {
                    this.IntermediateProductField = new XTypedList<IntermediateProductType>(this, LinqToXsdTypeManager.Instance, IntermediateProductXName);
                }
                return this.IntermediateProductField;
            }
            set {
                if ((value == null)) {
                    this.IntermediateProductField = null;
                }
                else {
                    if ((this.IntermediateProductField == null)) {
                        this.IntermediateProductField = XTypedList<IntermediateProductType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IntermediateProductXName);
                    }
                    else {
                        XTypedServices.SetList<IntermediateProductType>(this.IntermediateProductField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual ProductType Product {
            get {
                XElement x = this.GetElement(ProductXName);
                return ((ProductType)(x));
            }
            set {
                this.SetElement(ProductXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual RetentionTimeType RetentionTime {
            get {
                XElement x = this.GetElement(RetentionTimeXName);
                return ((RetentionTimeType)(x));
            }
            set {
                this.SetElement(RetentionTimeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual PredictionType Prediction {
            get {
                XElement x = this.GetElement(PredictionXName);
                return ((PredictionType)(x));
            }
            set {
                this.SetElement(PredictionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Precursor, IntermediateProduct*, Product, RetentionTime?, Prediction?, cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a peptide which this transition is intended to identify
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string peptideRef {
            get {
                XAttribute x = this.Attribute(peptideRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(peptideRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference to a compound for this transition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string compoundRef {
            get {
                XAttribute x = this.Attribute(compoundRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(compoundRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// String label for this transition
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PrecursorXName, typeof(PrecursorType));
            localElementDictionary.Add(IntermediateProductXName, typeof(IntermediateProductType));
            localElementDictionary.Add(ProductXName, typeof(ProductType));
            localElementDictionary.Add(RetentionTimeXName, typeof(RetentionTimeType));
            localElementDictionary.Add(PredictionXName, typeof(PredictionType));
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// List of transitions
    /// </para>
    /// <para>
    /// Regular expression: (Transition+)
    /// </para>
    /// </summary>
    public partial class TransitionListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransitionXName = System.Xml.Linq.XName.Get("Transition", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TransitionType> TransitionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TransitionListType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TransitionListType(XElement xe) { return XTypedServices.ToXTypedElement<TransitionListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TransitionListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TransitionXName));
        }
        
        /// <summary>
        /// <para>
        /// List of transitions
        /// </para>
        /// <para>
        /// Regular expression: (Transition+)
        /// </para>
        /// </summary>
        public TransitionListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Transition+)
        /// </para>
        /// </summary>
        public virtual IList<TransitionType> Transition {
            get {
                if ((this.TransitionField == null)) {
                    this.TransitionField = new XTypedList<TransitionType>(this, LinqToXsdTypeManager.Instance, TransitionXName);
                }
                return this.TransitionField;
            }
            set {
                if ((value == null)) {
                    this.TransitionField = null;
                }
                else {
                    if ((this.TransitionField == null)) {
                        this.TransitionField = XTypedList<TransitionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TransitionXName);
                    }
                    else {
                        XTypedServices.SetList<TransitionType>(this.TransitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TransitionListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TransitionXName, typeof(TransitionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Uncontrolled user parameters (essentially allowing free text). Before using these, one should verify whether there is an appropriate CV term available, and if so, use the CV term instead
    /// </para>
    /// </summary>
    public partial class UserParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitAccessionXName = System.Xml.Linq.XName.Get("unitAccession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitNameXName = System.Xml.Linq.XName.Get("unitName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitCvRefXName = System.Xml.Linq.XName.Get("unitCvRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UserParamType", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator UserParamType(XElement xe) { return XTypedServices.ToXTypedElement<UserParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Uncontrolled user parameters (essentially allowing free text). Before using these, one should verify whether there is an appropriate CV term available, and if so, use the CV term instead
        /// </para>
        /// </summary>
        public UserParamType() {
        }
        
        /// <summary>
        /// <para>
        /// The name for the parameter.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The datatype of the parameter, where appropriate (e.g.: xsd:float).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The value for the parameter, where appropriate.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional CV accession number for the unit term associated with the value, if any (e.g., 'UO:0000266' for 'electron volt').
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                XAttribute x = this.Attribute(unitAccessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitAccessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional CV name for the unit accession number, if any (e.g., 'electron volt' for 'UO:0000266' ).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                XAttribute x = this.Attribute(unitNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this mzML file.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                XAttribute x = this.Attribute(unitCvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(unitCvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserParamType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Information about the state of validation of a transition on a given instrument model
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*, userParam*)
    /// </para>
    /// </summary>
    public partial class ValidationStatusType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValidationStatusType", "http://psi.hupo.org/ms/traml");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ValidationStatusType(XElement xe) { return XTypedServices.ToXTypedElement<ValidationStatusType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValidationStatusType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Information about the state of validation of a transition on a given instrument model
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public ValidationStatusType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<cvParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<cvParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<cvParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<cvParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*, userParam*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValidationStatusType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(cvParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Container for the HUPO PSI TraML format for encoding selected reaction monitoring transitions and other target lists
    /// </para>
    /// </summary>
    public partial class TraML : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TraMLType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TraML", "http://psi.hupo.org/ms/traml");
        
		public static explicit operator TraML(XElement xe) { return XTypedServices.ToXTypedElement<TraML, TraMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Container for the HUPO PSI TraML format for encoding selected reaction monitoring transitions and other target lists
        /// </para>
        /// </summary>
        public TraML() {
            SetInnerType(new TraMLType());
        }
        
        /// <summary>
        /// <para>
        /// Container for the HUPO PSI TraML format for encoding selected reaction monitoring transitions and other target lists
        /// </para>
        /// </summary>
        public TraML(TraMLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual TraMLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual cvListType cvList {
            get {
                return this.ContentField.cvList;
            }
            set {
                this.ContentField.cvList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual SourceFileListType SourceFileList {
            get {
                return this.ContentField.SourceFileList;
            }
            set {
                this.ContentField.SourceFileList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual ContactListType ContactList {
            get {
                return this.ContentField.ContactList;
            }
            set {
                this.ContentField.ContactList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual PublicationListType PublicationList {
            get {
                return this.ContentField.PublicationList;
            }
            set {
                this.ContentField.PublicationList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual InstrumentListType InstrumentList {
            get {
                return this.ContentField.InstrumentList;
            }
            set {
                this.ContentField.InstrumentList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual SoftwareListType SoftwareList {
            get {
                return this.ContentField.SoftwareList;
            }
            set {
                this.ContentField.SoftwareList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual ProteinListType ProteinList {
            get {
                return this.ContentField.ProteinList;
            }
            set {
                this.ContentField.ProteinList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual CompoundListType CompoundList {
            get {
                return this.ContentField.CompoundList;
            }
            set {
                this.ContentField.CompoundList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual TransitionListType TransitionList {
            get {
                return this.ContentField.TransitionList;
            }
            set {
                this.ContentField.TransitionList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, SourceFileList?, ContactList?, PublicationList?, InstrumentList?, SoftwareList?, ProteinList?, CompoundList?, TransitionList?, TargetList?)
        /// </para>
        /// </summary>
        public virtual TargetListType TargetList {
            get {
                return this.ContentField.TargetList;
            }
            set {
                this.ContentField.TargetList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// An optional id for the TraML document used for referencing from external files. It is recommended to use LSIDs when possible.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Version of the TraML format used by this document
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TraML Load(string xmlFile) {
            return XTypedServices.Load<TraML, TraMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TraML Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TraML, TraMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TraML Parse(string xml) {
            return XTypedServices.Parse<TraML, TraMLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TraML(((TraMLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(TraMLType ContentField) {
            this.ContentField = ((TraMLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("TraMLType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TraMLType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CompoundType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.CompoundType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CompoundListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.CompoundListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConfigurationType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ConfigurationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConfigurationListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ConfigurationListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContactType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ContactType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContactListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ContactListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("cvType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.cvType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("cvListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.cvListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("cvParamType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.cvParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EvidenceType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.EvidenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.InstrumentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.InstrumentListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InterpretationType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.InterpretationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InterpretationListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.InterpretationListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModificationType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ModificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PeptideType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.PeptideType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PrecursorType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.PrecursorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IntermediateProductType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.IntermediateProductType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProductType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ProductType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PredictionType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.PredictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ProteinType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ProteinListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinRefType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ProteinRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PublicationType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.PublicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PublicationListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.PublicationListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RetentionTimeType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.RetentionTimeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RetentionTimeListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.RetentionTimeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SequenceType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.SequenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SoftwareType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.SoftwareType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SoftwareListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.SoftwareListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SourceFileType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.SourceFileType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SourceFileListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.SourceFileListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TargetType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TargetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TargetExcludeListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TargetExcludeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TargetIncludeListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TargetIncludeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TargetListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TargetListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransitionType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TransitionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TransitionListType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TransitionListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UserParamType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.UserParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValidationStatusType", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.ValidationStatusType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("TraML", "http://psi.hupo.org/ms/traml"), typeof(global::psi.hupo.org.ms.traml.TraML));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(psi.hupo.org.ms.traml.TraML), typeof(global::psi.hupo.org.ms.traml.TraMLType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("TraML", "http://psi.hupo.org/ms/traml")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public TraML TraML {  get {return rootObject as TraML; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(TraML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::psi.hupo.org.ms.traml.TraML TraML {  get {return rootObject as global::psi.hupo.org.ms.traml.TraML; } }
        
        private XRoot() {
        }
        
        public XRoot(global::psi.hupo.org.ms.traml.TraML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
