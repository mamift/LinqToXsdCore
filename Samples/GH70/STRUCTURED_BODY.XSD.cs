//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocumentGenerator.Semd.Evacuation.Base {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using urn.hl7.ru.fias;
    
    
    /// <summary>
    /// <para>
    /// 
    ///            Note: because this type is defined as an extension of SXCM_T,
    ///            all of the attributes and elements accepted for T are also
    ///            accepted by this definition.  However, they are NOT allowed
    ///            by the normative description of this type.  Unfortunately,
    ///            we cannot write a general purpose schematron contraints to
    ///            provide that extra validation, thus applications must be
    ///            aware that instance (fragments) that pass validation with
    ///            this might might still not be legal.
    ///         
    /// </para>
    /// <para>
    /// Regular expression: (phase?, period?)
    /// </para>
    /// </summary>
    public partial class PIVL_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_TS, IXMetaData {
        
		public static explicit operator PIVL_TS(XElement xe) { return XTypedServices.ToXTypedElement<PIVL_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PIVL_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Note: because this type is defined as an extension of SXCM_T,
        ///            all of the attributes and elements accepted for T are also
        ///            accepted by this definition.  However, they are NOT allowed
        ///            by the normative description of this type.  Unfortunately,
        ///            we cannot write a general purpose schematron contraints to
        ///            provide that extra validation, thus applications must be
        ///            aware that instance (fragments) that pass validation with
        ///            this might might still not be legal.
        ///         
        /// </para>
        /// <para>
        /// Regular expression: (phase?, period?)
        /// </para>
        /// </summary>
        public PIVL_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName phaseXName = System.Xml.Linq.XName.Get("phase", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A prototype of the repeating interval specifying the
        ///                        duration of each occurrence and anchors the periodic
        ///                        interval sequence at a certain point in time.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (phase?, period?)
        /// </para>
        /// </summary>
        public virtual IVL_TS phase {
            get {
                XElement x = this.GetElement(phaseXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_TS)(x));
            }
            set {
                this.SetElement(phaseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName periodXName = System.Xml.Linq.XName.Get("period", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A time duration specifying a reciprocal measure of
        ///                        the frequency at which the periodic interval repeats.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (phase?, period?)
        /// </para>
        /// </summary>
        public virtual PQ period {
            get {
                XElement x = this.GetElement(periodXName);
                if ((x == null)) {
                    return null;
                }
                return ((PQ)(x));
            }
            set {
                this.SetElement(periodXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignmentXName = System.Xml.Linq.XName.Get("alignment", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies if and how the repetitions are aligned to
        ///                     the cycles of the underlying calendar (e.g., to
        ///                     distinguish every 30 days from "the 5th of every
        ///                     month".) A non-aligned periodic interval recurs
        ///                     independently from the calendar. An aligned periodic
        ///                     interval is synchronized with the calendar.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object alignment {
            get {
                XAttribute x = this.Attribute(alignmentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.CalendarCycle.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "alignment", this, alignmentXName, global::DocumentGenerator.Semd.Evacuation.Base.CalendarCycle.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName institutionSpecifiedXName = System.Xml.Linq.XName.Get("institutionSpecified", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool institutionSpecifiedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Indicates whether the exact timing is up to the party
        ///                     executing the schedule (e.g., to distinguish "every 8
        ///                     hours" from "3 times a day".)
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool institutionSpecified {
            get {
                XAttribute x = this.Attribute(institutionSpecifiedXName);
                if ((x == null)) {
                    return institutionSpecifiedDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(institutionSpecifiedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PIVL_TS", "urn:hl7-org:v3");
        
        static PIVL_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(phaseXName), new NamedContentModelEntity(periodXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(phaseXName, typeof(IVL_TS));
            localElementDictionary.Add(periodXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Note: because this type is defined as an extension of SXCM_T,
    ///            all of the attributes and elements accepted for T are also
    ///            accepted by this definition.  However, they are NOT allowed
    ///            by the normative description of this type.  Unfortunately,
    ///            we cannot write a general purpose schematron contraints to
    ///            provide that extra validation, thus applications must be
    ///            aware that instance (fragments) that pass validation with
    ///            this might might still not be legal.
    ///         
    /// </para>
    /// <para>
    /// Regular expression: (@event?, offset?)
    /// </para>
    /// </summary>
    public partial class EIVL_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_TS, IXMetaData {
        
		public static explicit operator EIVL_TS(XElement xe) { return XTypedServices.ToXTypedElement<EIVL_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EIVL_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Note: because this type is defined as an extension of SXCM_T,
        ///            all of the attributes and elements accepted for T are also
        ///            accepted by this definition.  However, they are NOT allowed
        ///            by the normative description of this type.  Unfortunately,
        ///            we cannot write a general purpose schematron contraints to
        ///            provide that extra validation, thus applications must be
        ///            aware that instance (fragments) that pass validation with
        ///            this might might still not be legal.
        ///         
        /// </para>
        /// <para>
        /// Regular expression: (@event?, offset?)
        /// </para>
        /// </summary>
        public EIVL_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @eventXName = System.Xml.Linq.XName.Get("event", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A code for a common (periodical) activity of daily
        ///                        living based on which the event related periodic
        ///                        interval is specified.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (@event?, offset?)
        /// </para>
        /// </summary>
        public virtual EIVLevent @event {
            get {
                XElement x = this.GetElement(@eventXName);
                if ((x == null)) {
                    return null;
                }
                return ((EIVLevent)(x));
            }
            set {
                this.SetElement(@eventXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        An interval of elapsed time (duration, not absolute
        ///                        point in time) that marks the offsets for the
        ///                        beginning, width and end of the event-related periodic
        ///                        interval measured from the time each such event
        ///                        actually occurred.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (@event?, offset?)
        /// </para>
        /// </summary>
        public virtual IVL_PQ offset {
            get {
                XElement x = this.GetElement(offsetXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_PQ)(x));
            }
            set {
                this.SetElement(offsetXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EIVL_TS", "urn:hl7-org:v3");
        
        static EIVL_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(@eventXName), new NamedContentModelEntity(offsetXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(@eventXName, typeof(EIVLevent));
            localElementDictionary.Add(offsetXName, typeof(IVL_PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
    /// </para>
    /// </summary>
    public partial class IVL_PQ : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PQ, IXMetaData {
        
		public static explicit operator IVL_PQ(XElement xe) { return XTypedServices.ToXTypedElement<IVL_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public IVL_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IVXB_PQ low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_PQ)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PQ> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<PQ> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<PQ>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<PQ>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_PQ> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<IVXB_PQ> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_PQ>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_PQ>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual PQ center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_PQ", "urn:hl7-org:v3");
        
        static IVL_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName))));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(lowXName, typeof(IVXB_PQ));
            localElementDictionary.Add(widthXName, typeof(PQ));
            localElementDictionary.Add(highXName, typeof(IVXB_PQ));
            localElementDictionary.Add(centerXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*)
    /// </para>
    /// </summary>
    public partial class SXCM_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PQ, IXMetaData {
        
		public static explicit operator SXCM_PQ(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*)
        /// </para>
        /// </summary>
        public SXCM_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_PQ", "urn:hl7-org:v3");
        
        static SXCM_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*)
    /// </para>
    /// </summary>
    public partial class IVXB_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PQ, IXMetaData {
        
		public static explicit operator IVXB_PQ(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*)
        /// </para>
        /// </summary>
        public IVXB_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_PQ", "urn:hl7-org:v3");
        
        static IVXB_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// PPD_PQ
    /// </para>
    /// <para>
    /// Regular expression: (standardDeviation?)
    /// </para>
    /// </summary>
    public partial class PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
        
		public static explicit operator PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// PPD_PQ
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?)
        /// </para>
        /// </summary>
        public PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName standardDeviationXName = System.Xml.Linq.XName.Get("standardDeviation", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The primary measure of variance/uncertainty of the
        ///                        value (the square root of the sum of the squares of
        ///                        the differences between all data points and the mean).
        ///                        The standard deviation is used to normalize the data
        ///                        for computing the distribution function. Applications
        ///                        that cannot deal with probability distributions can
        ///                        still get an idea about the confidence level by looking
        ///                        at the standard deviation.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?)
        /// </para>
        /// </summary>
        public virtual PQ standardDeviation {
            get {
                XElement x = this.GetElement(standardDeviationXName);
                if ((x == null)) {
                    return null;
                }
                return ((PQ)(x));
            }
            set {
                this.SetElement(standardDeviationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName distributionTypeXName = System.Xml.Linq.XName.Get("distributionType", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying the type of probability distribution.
        ///                     Possible values are as shown in the attached table.
        ///                     The NULL value (unknown) for the type code indicates
        ///                     that the probability distribution type is unknown. In
        ///                     that case, the standard deviation has the meaning of an
        ///                     informal guess.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType? distributionType {
            get {
                XAttribute x = this.Attribute(distributionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(distributionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PPD_TS", "urn:hl7-org:v3");
        
        static PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// PPD_PQ
    /// </para>
    /// <para>
    /// Regular expression: (translation*, standardDeviation?)
    /// </para>
    /// </summary>
    public partial class PPD_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PQ, IXMetaData {
        
		public static explicit operator PPD_PQ(XElement xe) { return XTypedServices.ToXTypedElement<PPD_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PPD_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// PPD_PQ
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?)
        /// </para>
        /// </summary>
        public PPD_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName standardDeviationXName = System.Xml.Linq.XName.Get("standardDeviation", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The primary measure of variance/uncertainty of the
        ///                        value (the square root of the sum of the squares of
        ///                        the differences between all data points and the mean).
        ///                        The standard deviation is used to normalize the data
        ///                        for computing the distribution function. Applications
        ///                        that cannot deal with probability distributions can
        ///                        still get an idea about the confidence level by looking
        ///                        at the standard deviation.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?)
        /// </para>
        /// </summary>
        public virtual PQ standardDeviation {
            get {
                XElement x = this.GetElement(standardDeviationXName);
                if ((x == null)) {
                    return null;
                }
                return ((PQ)(x));
            }
            set {
                this.SetElement(standardDeviationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName distributionTypeXName = System.Xml.Linq.XName.Get("distributionType", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying the type of probability distribution.
        ///                     Possible values are as shown in the attached table.
        ///                     The NULL value (unknown) for the type code indicates
        ///                     that the probability distribution type is unknown. In
        ///                     that case, the standard deviation has the meaning of an
        ///                     informal guess.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType? distributionType {
            get {
                XAttribute x = this.Attribute(distributionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.ProbabilityDistributionType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(distributionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PPD_PQ", "urn:hl7-org:v3");
        
        static PPD_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Note: because this type is defined as an extension of SXCM_T,
    ///            all of the attributes and elements accepted for T are also
    ///            accepted by this definition.  However, they are NOT allowed
    ///            by the normative description of this type.  Unfortunately,
    ///            we cannot write a general purpose schematron contraints to
    ///            provide that extra validation, thus applications must be
    ///            aware that instance (fragments) that pass validation with
    ///            this might might still not be legal.
    ///         
    /// </para>
    /// <para>
    /// Regular expression: (standardDeviation?, phase?, period?)
    /// </para>
    /// </summary>
    public partial class PIVL_PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_TS, IXMetaData {
        
		public static explicit operator PIVL_PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<PIVL_PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PIVL_PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Note: because this type is defined as an extension of SXCM_T,
        ///            all of the attributes and elements accepted for T are also
        ///            accepted by this definition.  However, they are NOT allowed
        ///            by the normative description of this type.  Unfortunately,
        ///            we cannot write a general purpose schematron contraints to
        ///            provide that extra validation, thus applications must be
        ///            aware that instance (fragments) that pass validation with
        ///            this might might still not be legal.
        ///         
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, phase?, period?)
        /// </para>
        /// </summary>
        public PIVL_PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName phaseXName = System.Xml.Linq.XName.Get("phase", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A prototype of the repeating interval specifying the
        ///                        duration of each occurrence and anchors the periodic
        ///                        interval sequence at a certain point in time.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, phase?, period?)
        /// </para>
        /// </summary>
        public virtual IVL_PPD_TS phase {
            get {
                XElement x = this.GetElement(phaseXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_PPD_TS)(x));
            }
            set {
                this.SetElement(phaseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName periodXName = System.Xml.Linq.XName.Get("period", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A time duration specifying a reciprocal measure of
        ///                        the frequency at which the periodic interval repeats.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, phase?, period?)
        /// </para>
        /// </summary>
        public virtual PPD_PQ period {
            get {
                XElement x = this.GetElement(periodXName);
                if ((x == null)) {
                    return null;
                }
                return ((PPD_PQ)(x));
            }
            set {
                this.SetElement(periodXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignmentXName = System.Xml.Linq.XName.Get("alignment", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies if and how the repetitions are aligned to
        ///                     the cycles of the underlying calendar (e.g., to
        ///                     distinguish every 30 days from "the 5th of every
        ///                     month".) A non-aligned periodic interval recurs
        ///                     independently from the calendar. An aligned periodic
        ///                     interval is synchronized with the calendar.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object alignment {
            get {
                XAttribute x = this.Attribute(alignmentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.CalendarCycle.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "alignment", this, alignmentXName, global::DocumentGenerator.Semd.Evacuation.Base.CalendarCycle.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName institutionSpecifiedXName = System.Xml.Linq.XName.Get("institutionSpecified", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool institutionSpecifiedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Indicates whether the exact timing is up to the party
        ///                     executing the schedule (e.g., to distinguish "every 8
        ///                     hours" from "3 times a day".)
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool institutionSpecified {
            get {
                XAttribute x = this.Attribute(institutionSpecifiedXName);
                if ((x == null)) {
                    return institutionSpecifiedDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(institutionSpecifiedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PIVL_PPD_TS", "urn:hl7-org:v3");
        
        static PIVL_PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName), new NamedContentModelEntity(phaseXName), new NamedContentModelEntity(periodXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
            localElementDictionary.Add(phaseXName, typeof(IVL_PPD_TS));
            localElementDictionary.Add(periodXName, typeof(PPD_PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (standardDeviation?)
    /// </para>
    /// </summary>
    public partial class SXCM_PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.PPD_TS, IXMetaData {
        
		public static explicit operator SXCM_PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (standardDeviation?)
        /// </para>
        /// </summary>
        public SXCM_PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_PPD_TS", "urn:hl7-org:v3");
        
        static SXCM_PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
    /// </para>
    /// </summary>
    public partial class IVL_PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_TS, IXMetaData {
        
		public static explicit operator IVL_PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<IVL_PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public IVL_PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IVXB_PPD_TS low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_PPD_TS)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PPD_PQ> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<PPD_PQ> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<PPD_PQ>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<PPD_PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<PPD_PQ>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_PPD_TS> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<IVXB_PPD_TS> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_PPD_TS>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_PPD_TS>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_PPD_TS>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual PPD_TS center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((PPD_TS)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_PPD_TS", "urn:hl7-org:v3");
        
        static IVL_PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName))));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
            localElementDictionary.Add(lowXName, typeof(IVXB_PPD_TS));
            localElementDictionary.Add(widthXName, typeof(PPD_PQ));
            localElementDictionary.Add(highXName, typeof(IVXB_PPD_TS));
            localElementDictionary.Add(centerXName, typeof(PPD_TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (standardDeviation?)
    /// </para>
    /// </summary>
    public partial class IVXB_PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.PPD_TS, IXMetaData {
        
		public static explicit operator IVXB_PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (standardDeviation?)
        /// </para>
        /// </summary>
        public IVXB_PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_PPD_TS", "urn:hl7-org:v3");
        
        static IVXB_PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Note: because this type is defined as an extension of SXCM_T,
    ///            all of the attributes and elements accepted for T are also
    ///            accepted by this definition.  However, they are NOT allowed
    ///            by the normative description of this type.  Unfortunately,
    ///            we cannot write a general purpose schematron contraints to
    ///            provide that extra validation, thus applications must be
    ///            aware that instance (fragments) that pass validation with
    ///            this might might still not be legal.
    ///         
    /// </para>
    /// <para>
    /// Regular expression: (standardDeviation?, @event?, offset?)
    /// </para>
    /// </summary>
    public partial class EIVL_PPD_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_TS, IXMetaData {
        
		public static explicit operator EIVL_PPD_TS(XElement xe) { return XTypedServices.ToXTypedElement<EIVL_PPD_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EIVL_PPD_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Note: because this type is defined as an extension of SXCM_T,
        ///            all of the attributes and elements accepted for T are also
        ///            accepted by this definition.  However, they are NOT allowed
        ///            by the normative description of this type.  Unfortunately,
        ///            we cannot write a general purpose schematron contraints to
        ///            provide that extra validation, thus applications must be
        ///            aware that instance (fragments) that pass validation with
        ///            this might might still not be legal.
        ///         
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, @event?, offset?)
        /// </para>
        /// </summary>
        public EIVL_PPD_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @eventXName = System.Xml.Linq.XName.Get("event", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A code for a common (periodical) activity of daily
        ///                        living based on which the event related periodic
        ///                        interval is specified.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, @event?, offset?)
        /// </para>
        /// </summary>
        public virtual EIVLevent @event {
            get {
                XElement x = this.GetElement(@eventXName);
                if ((x == null)) {
                    return null;
                }
                return ((EIVLevent)(x));
            }
            set {
                this.SetElement(@eventXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        An interval of elapsed time (duration, not absolute
        ///                        point in time) that marks the offsets for the
        ///                        beginning, width and end of the event-related periodic
        ///                        interval measured from the time each such event
        ///                        actually occurred.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (standardDeviation?, @event?, offset?)
        /// </para>
        /// </summary>
        public virtual IVL_PPD_PQ offset {
            get {
                XElement x = this.GetElement(offsetXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_PPD_PQ)(x));
            }
            set {
                this.SetElement(offsetXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EIVL_PPD_TS", "urn:hl7-org:v3");
        
        static EIVL_PPD_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(standardDeviationXName), new NamedContentModelEntity(@eventXName), new NamedContentModelEntity(offsetXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
            localElementDictionary.Add(@eventXName, typeof(EIVLevent));
            localElementDictionary.Add(offsetXName, typeof(IVL_PPD_PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
    /// </para>
    /// </summary>
    public partial class IVL_PPD_PQ : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_PQ, IXMetaData {
        
		public static explicit operator IVL_PPD_PQ(XElement xe) { return XTypedServices.ToXTypedElement<IVL_PPD_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_PPD_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public IVL_PPD_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IVXB_PPD_PQ low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_PPD_PQ)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PPD_PQ> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<PPD_PQ> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<PPD_PQ>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<PPD_PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<PPD_PQ>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_PPD_PQ> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual IList<IVXB_PPD_PQ> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_PPD_PQ>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_PPD_PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_PPD_PQ>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public virtual PPD_PQ center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((PPD_PQ)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_PPD_PQ", "urn:hl7-org:v3");
        
        static IVL_PPD_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new NamedContentModelEntity(standardDeviationXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName))));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
            localElementDictionary.Add(lowXName, typeof(IVXB_PPD_PQ));
            localElementDictionary.Add(widthXName, typeof(PPD_PQ));
            localElementDictionary.Add(highXName, typeof(IVXB_PPD_PQ));
            localElementDictionary.Add(centerXName, typeof(PPD_PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, standardDeviation?)
    /// </para>
    /// </summary>
    public partial class SXCM_PPD_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PPD_PQ, IXMetaData {
        
		public static explicit operator SXCM_PPD_PQ(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_PPD_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_PPD_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?)
        /// </para>
        /// </summary>
        public SXCM_PPD_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_PPD_PQ", "urn:hl7-org:v3");
        
        static SXCM_PPD_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, standardDeviation?)
    /// </para>
    /// </summary>
    public partial class IVXB_PPD_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PPD_PQ, IXMetaData {
        
		public static explicit operator IVXB_PPD_PQ(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_PPD_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_PPD_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, standardDeviation?)
        /// </para>
        /// </summary>
        public IVXB_PPD_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_PPD_PQ", "urn:hl7-org:v3");
        
        static IVXB_PPD_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new NamedContentModelEntity(standardDeviationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(standardDeviationXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (comp+)
    /// </para>
    /// </summary>
    public partial class SXPR_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_TS, IXMetaData {
        
		public static explicit operator SXPR_TS(XElement xe) { return XTypedServices.ToXTypedElement<SXPR_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXPR_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (comp+)
        /// </para>
        /// </summary>
        public SXPR_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName compXName = System.Xml.Linq.XName.Get("comp", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SXCM_TS> compField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (comp+)
        /// </para>
        /// </summary>
        public virtual IList<SXCM_TS> comp {
            get {
                if ((this.compField == null)) {
                    this.compField = new XTypedList<SXCM_TS>(this, LinqToXsdTypeManager.Instance, compXName);
                }
                return this.compField;
            }
            set {
                if ((value == null)) {
                    this.compField = null;
                }
                else {
                    if ((this.compField == null)) {
                        this.compField = XTypedList<SXCM_TS>.Initialize(this, LinqToXsdTypeManager.Instance, value, compXName);
                    }
                    else {
                        XTypedServices.SetList<SXCM_TS>(this.compField, value);
                    }
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXPR_TS", "urn:hl7-org:v3");
        
        static SXPR_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(compXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(compXName, typeof(SXCM_TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (originalText?, qualifier*, translation*)
    /// </para>
    /// </summary>
    public partial class SXCM_CD : global::DocumentGenerator.Semd.Evacuation.Base.CD, IXMetaData {
        
		public static explicit operator SXCM_CD(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_CD>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_CD>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public SXCM_CD() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_CD", "urn:hl7-org:v3");
        
        static SXCM_CD() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName), new NamedContentModelEntity(qualifierXName), new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
            localElementDictionary.Add(qualifierXName, typeof(CR));
            localElementDictionary.Add(translationXName, typeof(CD));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class SXCM_MO : global::DocumentGenerator.Semd.Evacuation.Base.MO, IXMetaData {
        
		public static explicit operator SXCM_MO(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_MO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_MO>(this);
        }
        
        public SXCM_MO() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_MO", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class SXCM_INT : global::DocumentGenerator.Semd.Evacuation.Base.INT, IXMetaData {
        
		public static explicit operator SXCM_INT(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_INT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_INT>(this);
        }
        
        public SXCM_INT() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_INT", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class SXCM_REAL : global::DocumentGenerator.Semd.Evacuation.Base.REAL, IXMetaData {
        
		public static explicit operator SXCM_REAL(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_REAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_REAL>(this);
        }
        
        public SXCM_REAL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_REAL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
    /// </para>
    /// </summary>
    public partial class IVL_INT : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_INT, IXMetaData {
        
		public static explicit operator IVL_INT(XElement xe) { return XTypedServices.ToXTypedElement<IVL_INT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_INT>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public IVL_INT() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IVXB_INT low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_INT)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<INT> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<INT> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<INT>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<INT>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<INT>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_INT> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<IVXB_INT> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_INT>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_INT>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_INT>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual INT center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((INT)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_INT", "urn:hl7-org:v3");
        
        static IVL_INT() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(IVXB_INT));
            localElementDictionary.Add(widthXName, typeof(INT));
            localElementDictionary.Add(highXName, typeof(IVXB_INT));
            localElementDictionary.Add(centerXName, typeof(INT));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class IVXB_INT : global::DocumentGenerator.Semd.Evacuation.Base.INT, IXMetaData {
        
		public static explicit operator IVXB_INT(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_INT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_INT>(this);
        }
        
        public IVXB_INT() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_INT", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
    /// </para>
    /// </summary>
    public partial class IVL_REAL : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_REAL, IXMetaData {
        
		public static explicit operator IVL_REAL(XElement xe) { return XTypedServices.ToXTypedElement<IVL_REAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_REAL>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public IVL_REAL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IVXB_REAL low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_REAL)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<REAL> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<REAL> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<REAL>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<REAL>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<REAL>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_REAL> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<IVXB_REAL> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_REAL>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_REAL>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_REAL>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual REAL center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((REAL)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_REAL", "urn:hl7-org:v3");
        
        static IVL_REAL() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(IVXB_REAL));
            localElementDictionary.Add(widthXName, typeof(REAL));
            localElementDictionary.Add(highXName, typeof(IVXB_REAL));
            localElementDictionary.Add(centerXName, typeof(REAL));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class IVXB_REAL : global::DocumentGenerator.Semd.Evacuation.Base.REAL, IXMetaData {
        
		public static explicit operator IVXB_REAL(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_REAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_REAL>(this);
        }
        
        public IVXB_REAL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_REAL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
    /// </para>
    /// </summary>
    public partial class IVL_MO : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_MO, IXMetaData {
        
		public static explicit operator IVL_MO(XElement xe) { return XTypedServices.ToXTypedElement<IVL_MO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_MO>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public IVL_MO() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IVXB_MO low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_MO)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MO> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<MO> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<MO>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<MO>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<MO>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_MO> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<IVXB_MO> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_MO>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_MO>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_MO>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///                        
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual MO center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((MO)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_MO", "urn:hl7-org:v3");
        
        static IVL_MO() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(IVXB_MO));
            localElementDictionary.Add(widthXName, typeof(MO));
            localElementDictionary.Add(highXName, typeof(IVXB_MO));
            localElementDictionary.Add(centerXName, typeof(MO));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class IVXB_MO : global::DocumentGenerator.Semd.Evacuation.Base.MO, IXMetaData {
        
		public static explicit operator IVXB_MO(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_MO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_MO>(this);
        }
        
        public IVXB_MO() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName inclusiveXName = System.Xml.Linq.XName.Get("inclusive", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool inclusiveDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether the limit is included in the
        ///                     interval (interval is closed) or excluded from the
        ///                     interval (interval is open).
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inclusive {
            get {
                XAttribute x = this.Attribute(inclusiveXName);
                if ((x == null)) {
                    return inclusiveDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(inclusiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_MO", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, validTime?)
    /// </para>
    /// </summary>
    public partial class HXIT_PQ : global::DocumentGenerator.Semd.Evacuation.Base.PQ, IXMetaData {
        
		public static explicit operator HXIT_PQ(XElement xe) { return XTypedServices.ToXTypedElement<HXIT_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HXIT_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, validTime?)
        /// </para>
        /// </summary>
        public HXIT_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName validTimeXName = System.Xml.Linq.XName.Get("validTime", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The time interval during which the given information
        ///                        was, is, or is expected to be valid. The interval can
        ///                        be open or closed, as well as infinite or undefined on
        ///                        either side.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (translation*, validTime?)
        /// </para>
        /// </summary>
        public virtual IVL_TS validTime {
            get {
                XElement x = this.GetElement(validTimeXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_TS)(x));
            }
            set {
                this.SetElement(validTimeXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HXIT_PQ", "urn:hl7-org:v3");
        
        static HXIT_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new NamedContentModelEntity(validTimeXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(validTimeXName, typeof(IVL_TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (originalText?, translation*, validTime?)
    /// </para>
    /// </summary>
    public partial class HXIT_CE : global::DocumentGenerator.Semd.Evacuation.Base.CE, IXMetaData {
        
		public static explicit operator HXIT_CE(XElement xe) { return XTypedServices.ToXTypedElement<HXIT_CE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HXIT_CE>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (originalText?, translation*, validTime?)
        /// </para>
        /// </summary>
        public HXIT_CE() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName validTimeXName = System.Xml.Linq.XName.Get("validTime", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The time interval during which the given information
        ///                        was, is, or is expected to be valid. The interval can
        ///                        be open or closed, as well as infinite or undefined on
        ///                        either side.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (originalText?, translation*, validTime?)
        /// </para>
        /// </summary>
        public virtual IVL_TS validTime {
            get {
                XElement x = this.GetElement(validTimeXName);
                if ((x == null)) {
                    return null;
                }
                return ((IVL_TS)(x));
            }
            set {
                this.SetElement(validTimeXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HXIT_CE", "urn:hl7-org:v3");
        
        static HXIT_CE() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName), new NamedContentModelEntity(translationXName), new NamedContentModelEntity(validTimeXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
            localElementDictionary.Add(translationXName, typeof(CD));
            localElementDictionary.Add(validTimeXName, typeof(IVL_TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (originalText?, qualifier*, translation*)
    /// </para>
    /// </summary>
    public partial class BXIT_CD : global::DocumentGenerator.Semd.Evacuation.Base.CD, IXMetaData {
        
		public static explicit operator BXIT_CD(XElement xe) { return XTypedServices.ToXTypedElement<BXIT_CD>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BXIT_CD>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public BXIT_CD() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName qtyXName = System.Xml.Linq.XName.Get("qty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal qtyDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The quantity in which the bag item occurs in its containing bag.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal qty {
            get {
                XAttribute x = this.Attribute(qtyXName);
                if ((x == null)) {
                    return qtyDefaultValue;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(qtyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BXIT_CD", "urn:hl7-org:v3");
        
        static BXIT_CD() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName), new NamedContentModelEntity(qualifierXName), new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
            localElementDictionary.Add(qualifierXName, typeof(CR));
            localElementDictionary.Add(translationXName, typeof(CD));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
    /// </para>
    /// </summary>
    public partial class BXIT_IVL_PQ : global::DocumentGenerator.Semd.Evacuation.Base.IVL_PQ, IXMetaData {
        
		public static explicit operator BXIT_IVL_PQ(XElement xe) { return XTypedServices.ToXTypedElement<BXIT_IVL_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BXIT_IVL_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (translation*, ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?)
        /// </para>
        /// </summary>
        public BXIT_IVL_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName qtyXName = System.Xml.Linq.XName.Get("qty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal qtyDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The quantity in which the bag item occurs in its containing bag.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal qty {
            get {
                XAttribute x = this.Attribute(qtyXName);
                if ((x == null)) {
                    return qtyDefaultValue;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(qtyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BXIT_IVL_PQ", "urn:hl7-org:v3");
        
        static BXIT_IVL_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName), new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName))));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
            localElementDictionary.Add(lowXName, typeof(IVXB_PQ));
            localElementDictionary.Add(widthXName, typeof(PQ));
            localElementDictionary.Add(highXName, typeof(IVXB_PQ));
            localElementDictionary.Add(centerXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (origin, scale, digits)
    /// </para>
    /// </summary>
    public partial class SLIST_PQ : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator SLIST_PQ(XElement xe) { return XTypedServices.ToXTypedElement<SLIST_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SLIST_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public SLIST_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName originXName = System.Xml.Linq.XName.Get("origin", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The origin of the list item value scale, i.e., the
        ///                     physical quantity that a zero-digit in the sequence
        ///                     would represent.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual PQ origin {
            get {
                XElement x = this.GetElement(originXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(originXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName scaleXName = System.Xml.Linq.XName.Get("scale", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A ratio-scale quantity that is factored out of the
        ///                     digit sequence.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual PQ scale {
            get {
                XElement x = this.GetElement(scaleXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(scaleXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName digitsXName = System.Xml.Linq.XName.Get("digits", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A sequence of raw digits for the sample values. This is
        ///                     typically the raw output of an A/D converter.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual IList<decimal> digits {
            get {
                XElement x = this.GetElement(digitsXName);
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListElementWithValidation(digitsXName, value, "digits", global::DocumentGenerator.Semd.Evacuation.Base.list_int.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SLIST_PQ", "urn:hl7-org:v3");
        
        static SLIST_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originXName), new NamedContentModelEntity(scaleXName), new NamedContentModelEntity(digitsXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originXName, typeof(PQ));
            localElementDictionary.Add(scaleXName, typeof(PQ));
            localElementDictionary.Add(digitsXName, typeof(decimal));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class list_int {
        
        private list_int() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null, DocumentGenerator.Semd.Evacuation.Base.@int.TypeDefinition);
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (origin, scale, digits)
    /// </para>
    /// </summary>
    public partial class SLIST_TS : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator SLIST_TS(XElement xe) { return XTypedServices.ToXTypedElement<SLIST_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SLIST_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public SLIST_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName originXName = System.Xml.Linq.XName.Get("origin", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The origin of the list item value scale, i.e., the
        ///                     physical quantity that a zero-digit in the sequence
        ///                     would represent.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual TS origin {
            get {
                XElement x = this.GetElement(originXName);
                return ((TS)(x));
            }
            set {
                this.SetElement(originXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName scaleXName = System.Xml.Linq.XName.Get("scale", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A ratio-scale quantity that is factored out of the
        ///                     digit sequence.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual PQ scale {
            get {
                XElement x = this.GetElement(scaleXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(scaleXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName digitsXName = System.Xml.Linq.XName.Get("digits", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A sequence of raw digits for the sample values. This is
        ///                     typically the raw output of an A/D converter.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (origin, scale, digits)
        /// </para>
        /// </summary>
        public virtual IList<decimal> digits {
            get {
                XElement x = this.GetElement(digitsXName);
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListElementWithValidation(digitsXName, value, "digits", global::DocumentGenerator.Semd.Evacuation.Base.list_int.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SLIST_TS", "urn:hl7-org:v3");
        
        static SLIST_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originXName), new NamedContentModelEntity(scaleXName), new NamedContentModelEntity(digitsXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originXName, typeof(TS));
            localElementDictionary.Add(scaleXName, typeof(PQ));
            localElementDictionary.Add(digitsXName, typeof(decimal));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, increment)
    /// </para>
    /// </summary>
    public partial class GLIST_TS : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator GLIST_TS(XElement xe) { return XTypedServices.ToXTypedElement<GLIST_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GLIST_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public GLIST_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     This is the start-value of the generated list. 
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public virtual TS head {
            get {
                XElement x = this.GetElement(headXName);
                return ((TS)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName incrementXName = System.Xml.Linq.XName.Get("increment", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The difference between one value and its previous
        ///                     different value. For example, to generate the sequence
        ///                     (1; 4; 7; 10; 13; ...) the increment is 3; likewise to
        ///                     generate the sequence (1; 1; 4; 4; 7; 7; 10; 10; 13;
        ///                     13; ...) the increment is also 3.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public virtual PQ increment {
            get {
                XElement x = this.GetElement(incrementXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(incrementXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName periodXName = System.Xml.Linq.XName.Get("period", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     If non-NULL, specifies that the sequence alternates,
        ///                     i.e., after this many increments, the sequence item
        ///                     values roll over to start from the initial sequence
        ///                     item value. For example, the sequence (1; 2; 3; 1; 2;
        ///                     3; 1; 2; 3; ...) has period 3; also the sequence
        ///                     (1; 1; 2; 2; 3; 3; 1; 1; 2; 2; 3; 3; ...) has period
        ///                     3 too.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? period {
            get {
                XAttribute x = this.Attribute(periodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(periodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName denominatorXName = System.Xml.Linq.XName.Get("denominator", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The integer by which the index for the sequence is
        ///                     divided, effectively the number of times the sequence
        ///                     generates the same sequence item value before
        ///                     incrementing to the next sequence item value. For
        ///                     example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
        ///                     3; ...)  the denominator is 3.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? denominator {
            get {
                XAttribute x = this.Attribute(denominatorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(denominatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GLIST_TS", "urn:hl7-org:v3");
        
        static GLIST_TS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(incrementXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(TS));
            localElementDictionary.Add(incrementXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (head, increment)
    /// </para>
    /// </summary>
    public partial class GLIST_PQ : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator GLIST_PQ(XElement xe) { return XTypedServices.ToXTypedElement<GLIST_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GLIST_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public GLIST_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName headXName = System.Xml.Linq.XName.Get("head", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     This is the start-value of the generated list. 
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public virtual PQ head {
            get {
                XElement x = this.GetElement(headXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(headXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName incrementXName = System.Xml.Linq.XName.Get("increment", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The difference between one value and its previous
        ///                     different value. For example, to generate the sequence
        ///                     (1; 4; 7; 10; 13; ...) the increment is 3; likewise to
        ///                     generate the sequence (1; 1; 4; 4; 7; 7; 10; 10; 13;
        ///                     13; ...) the increment is also 3.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (head, increment)
        /// </para>
        /// </summary>
        public virtual PQ increment {
            get {
                XElement x = this.GetElement(incrementXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(incrementXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName periodXName = System.Xml.Linq.XName.Get("period", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     If non-NULL, specifies that the sequence alternates,
        ///                     i.e., after this many increments, the sequence item
        ///                     values roll over to start from the initial sequence
        ///                     item value. For example, the sequence (1; 2; 3; 1; 2;
        ///                     3; 1; 2; 3; ...) has period 3; also the sequence
        ///                     (1; 1; 2; 2; 3; 3; 1; 1; 2; 2; 3; 3; ...) has period
        ///                     3 too.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? period {
            get {
                XAttribute x = this.Attribute(periodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(periodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName denominatorXName = System.Xml.Linq.XName.Get("denominator", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The integer by which the index for the sequence is
        ///                     divided, effectively the number of times the sequence
        ///                     generates the same sequence item value before
        ///                     incrementing to the next sequence item value. For
        ///                     example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
        ///                     3; ...)  the denominator is 3.
        ///                  
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? denominator {
            get {
                XAttribute x = this.Attribute(denominatorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(denominatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GLIST_PQ", "urn:hl7-org:v3");
        
        static GLIST_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(headXName), new NamedContentModelEntity(incrementXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(headXName, typeof(PQ));
            localElementDictionary.Add(incrementXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// RTO_PQ_PQ
    /// </para>
    /// <para>
    /// Regular expression: (numerator, denominator)
    /// </para>
    /// </summary>
    public partial class RTO_PQ_PQ : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator RTO_PQ_PQ(XElement xe) { return XTypedServices.ToXTypedElement<RTO_PQ_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RTO_PQ_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// RTO_PQ_PQ
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public RTO_PQ_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName numeratorXName = System.Xml.Linq.XName.Get("numerator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that is being divided in the ratio.  The
        ///                        default is the integer number 1 (one).
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual PQ numerator {
            get {
                XElement x = this.GetElement(numeratorXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(numeratorXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName denominatorXName = System.Xml.Linq.XName.Get("denominator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that devides the numerator in the ratio.
        ///                        The default is the integer number 1 (one).
        ///                        The denominator must not be zero.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual PQ denominator {
            get {
                XElement x = this.GetElement(denominatorXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(denominatorXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTO_PQ_PQ", "urn:hl7-org:v3");
        
        static RTO_PQ_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(numeratorXName), new NamedContentModelEntity(denominatorXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(numeratorXName, typeof(PQ));
            localElementDictionary.Add(denominatorXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// RTO_MO_PQ
    /// </para>
    /// <para>
    /// Regular expression: (numerator, denominator)
    /// </para>
    /// </summary>
    public partial class RTO_MO_PQ : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator RTO_MO_PQ(XElement xe) { return XTypedServices.ToXTypedElement<RTO_MO_PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RTO_MO_PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// RTO_MO_PQ
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public RTO_MO_PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName numeratorXName = System.Xml.Linq.XName.Get("numerator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that is being divided in the ratio.  The
        ///                        default is the integer number 1 (one).
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual MO numerator {
            get {
                XElement x = this.GetElement(numeratorXName);
                return ((MO)(x));
            }
            set {
                this.SetElement(numeratorXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName denominatorXName = System.Xml.Linq.XName.Get("denominator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that devides the numerator in the ratio.
        ///                        The default is the integer number 1 (one).
        ///                        The denominator must not be zero.
        ///                     
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual PQ denominator {
            get {
                XElement x = this.GetElement(denominatorXName);
                return ((PQ)(x));
            }
            set {
                this.SetElement(denominatorXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTO_MO_PQ", "urn:hl7-org:v3");
        
        static RTO_MO_PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(numeratorXName), new NamedContentModelEntity(denominatorXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(numeratorXName, typeof(MO));
            localElementDictionary.Add(denominatorXName, typeof(PQ));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class UVP_TS : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
        
		public static explicit operator UVP_TS(XElement xe) { return XTypedServices.ToXTypedElement<UVP_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UVP_TS>(this);
        }
        
        public UVP_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName probabilityXName = System.Xml.Linq.XName.Get("probability", "");
        
        /// <summary>
        /// <para>
        /// 
        ///               The probability assigned to the value, a decimal number
        ///               between 0 (very uncertain) and 1 (certain).
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? probability {
            get {
                XAttribute x = this.Attribute(probabilityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(probabilityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UVP_TS", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class Classes {
        
        private Classes() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10642 (C-0-D10642-cpt)
    /// </para>
    /// </summary>
    public sealed class AddressPartType {
        
        private AddressPartType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.AdditionalLocatorValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.DeliveryAddressLineValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.BuildingNumberValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.StreetNameValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "SAL",
                                    "DIR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CAR",
                                    "CEN",
                                    "CNT",
                                    "CPA",
                                    "CTY",
                                    "DEL",
                                    "POB",
                                    "PRE",
                                    "STA",
                                    "ZIP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10651 (C-0-D10642-V10651-cpt)
    /// </para>
    /// </summary>
    public enum AdditionalLocator {
        
        ADL,
        
        UNID,
        
        UNIT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10651 (C-0-D10642-V10651-cpt)
    /// </para>
    /// </summary>
    public sealed class AdditionalLocatorValidator {
        
        private AdditionalLocatorValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ADL",
                        "UNID",
                        "UNIT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V17887 (C-0-D10642-V17887-cpt)
    /// </para>
    /// </summary>
    public enum DeliveryAddressLine {
        
        DAL,
        
        DINST,
        
        DINSTA,
        
        DINSTQ,
        
        DMOD,
        
        DMODID,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V17887 (C-0-D10642-V17887-cpt)
    /// </para>
    /// </summary>
    public sealed class DeliveryAddressLineValidator {
        
        private DeliveryAddressLineValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DAL",
                        "DINST",
                        "DINSTA",
                        "DINSTQ",
                        "DMOD",
                        "DMODID"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V14822 (C-0-D10642-V14822-cpt)
    /// </para>
    /// </summary>
    public sealed class StreetAddressLine {
        
        private StreetAddressLine() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.BuildingNumberValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.StreetNameValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "SAL",
                                    "DIR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10649 (C-0-D10642-V14822-V10649-cpt)
    /// </para>
    /// </summary>
    public enum BuildingNumber {
        
        BNR,
        
        BNN,
        
        BNS,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10649 (C-0-D10642-V14822-V10649-cpt)
    /// </para>
    /// </summary>
    public sealed class BuildingNumberValidator {
        
        private BuildingNumberValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "BNR",
                        "BNN",
                        "BNS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10648 (C-0-D10642-V14822-V10648-cpt)
    /// </para>
    /// </summary>
    public enum StreetName {
        
        STR,
        
        STB,
        
        STTYP,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10648 (C-0-D10642-V14822-V10648-cpt)
    /// </para>
    /// </summary>
    public sealed class StreetNameValidator {
        
        private StreetNameValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "STR",
                        "STB",
                        "STTYP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10684 (C-0-D10684-cpt)
    /// </para>
    /// </summary>
    public sealed class CalendarCycle {
        
        private CalendarCycle() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.CalendarCycleOneLetterValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.GregorianCalendarCycle.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CD",
                                    "CH",
                                    "CM",
                                    "CN",
                                    "CS",
                                    "CW",
                                    "CY",
                                    "DM",
                                    "DW",
                                    "DY",
                                    "HD",
                                    "MY",
                                    "NH",
                                    "SN",
                                    "WY"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10701 (C-0-D10684-V10701-cpt)
    /// </para>
    /// </summary>
    public enum CalendarCycleOneLetter {
        
        D,
        
        H,
        
        J,
        
        M,
        
        N,
        
        S,
        
        W,
        
        Y,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10701 (C-0-D10684-V10701-cpt)
    /// </para>
    /// </summary>
    public sealed class CalendarCycleOneLetterValidator {
        
        private CalendarCycleOneLetterValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "D",
                        "H",
                        "J",
                        "M",
                        "N",
                        "S",
                        "W",
                        "Y"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10685 (C-0-D10684-V10685-cpt)
    /// </para>
    /// </summary>
    public sealed class CalendarCycleTwoLetter {
        
        private CalendarCycleTwoLetter() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.GregorianCalendarCycle.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CD",
                                    "CH",
                                    "CM",
                                    "CN",
                                    "CS",
                                    "CW",
                                    "CY",
                                    "DM",
                                    "DW",
                                    "DY",
                                    "HD",
                                    "MY",
                                    "NH",
                                    "SN",
                                    "WY"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10758 (C-0-D10684-V10685-V10758-cpt)
    /// </para>
    /// </summary>
    public sealed class GregorianCalendarCycle {
        
        private GregorianCalendarCycle() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10620 (C-0-D10620-cpt)
    /// </para>
    /// </summary>
    public enum CompressionAlgorithm {
        
        DF,
        
        GZ,
        
        Z,
        
        ZL,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10620 (C-0-D10620-cpt)
    /// </para>
    /// </summary>
    public sealed class CompressionAlgorithmValidator {
        
        private CompressionAlgorithmValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DF",
                        "GZ",
                        "Z",
                        "ZL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D17388 (C-0-D17388-cpt)
    /// </para>
    /// </summary>
    public enum Currency {
        
        ARS,
        
        AUD,
        
        BRL,
        
        CAD,
        
        CHF,
        
        CLF,
        
        CNY,
        
        DEM,
        
        ESP,
        
        EUR,
        
        FIM,
        
        FRF,
        
        GBP,
        
        ILS,
        
        INR,
        
        JPY,
        
        KRW,
        
        MXN,
        
        NLG,
        
        NZD,
        
        PHP,
        
        RUR,
        
        THB,
        
        TRL,
        
        TWD,
        
        USD,
        
        ZAR,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D17388 (C-0-D17388-cpt)
    /// </para>
    /// </summary>
    public sealed class CurrencyValidator {
        
        private CurrencyValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ARS",
                        "AUD",
                        "BRL",
                        "CAD",
                        "CHF",
                        "CLF",
                        "CNY",
                        "DEM",
                        "ESP",
                        "EUR",
                        "FIM",
                        "FRF",
                        "GBP",
                        "ILS",
                        "INR",
                        "JPY",
                        "KRW",
                        "MXN",
                        "NLG",
                        "NZD",
                        "PHP",
                        "RUR",
                        "THB",
                        "TRL",
                        "TWD",
                        "USD",
                        "ZAR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D15888 (C-0-D15888-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityNamePartQualifier {
        
        private EntityNamePartQualifier() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.OrganizationNamePartQualifierValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartAffixTypesValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartChangeQualifierValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartMiscQualifierValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "IN",
                                    "TITLE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V15889 (C-0-D15888-V15889-cpt)
    /// </para>
    /// </summary>
    public enum OrganizationNamePartQualifier {
        
        LS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V15889 (C-0-D15888-V15889-cpt)
    /// </para>
    /// </summary>
    public sealed class OrganizationNamePartQualifierValidator {
        
        private OrganizationNamePartQualifierValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "LS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10659 (C-0-D15888-V10659-cpt)
    /// </para>
    /// </summary>
    public sealed class PersonNamePartQualifier {
        
        private PersonNamePartQualifier() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartAffixTypesValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartChangeQualifierValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.PersonNamePartMiscQualifierValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "IN",
                                    "TITLE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10666 (C-0-D15888-V10659-V10666-cpt)
    /// </para>
    /// </summary>
    public enum PersonNamePartAffixTypes {
        
        AC,
        
        NB,
        
        PR,
        
        VV,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10666 (C-0-D15888-V10659-V10666-cpt)
    /// </para>
    /// </summary>
    public sealed class PersonNamePartAffixTypesValidator {
        
        private PersonNamePartAffixTypesValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AC",
                        "NB",
                        "PR",
                        "VV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10660 (C-0-D15888-V10659-V10660-cpt)
    /// </para>
    /// </summary>
    public enum PersonNamePartChangeQualifier {
        
        AD,
        
        BR,
        
        SP,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10660 (C-0-D15888-V10659-V10660-cpt)
    /// </para>
    /// </summary>
    public sealed class PersonNamePartChangeQualifierValidator {
        
        private PersonNamePartChangeQualifierValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AD",
                        "BR",
                        "SP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10671 (C-0-D15888-V10659-V10671-cpt)
    /// </para>
    /// </summary>
    public enum PersonNamePartMiscQualifier {
        
        CL,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10671 (C-0-D15888-V10659-V10671-cpt)
    /// </para>
    /// </summary>
    public sealed class PersonNamePartMiscQualifierValidator {
        
        private PersonNamePartMiscQualifierValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D15880 (C-0-D15880-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityNamePartType {
        
        private EntityNamePartType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.x_OrganizationNamePartTypeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_PersonNamePartTypeValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DEL",
                                    "FAM",
                                    "GIV",
                                    "PFX",
                                    "SFX"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V15881 (C-0-D15880-V15881-cpt)
    /// </para>
    /// </summary>
    public enum x_OrganizationNamePartType {
        
        DEL,
        
        PFX,
        
        SFX,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V15881 (C-0-D15880-V15881-cpt)
    /// </para>
    /// </summary>
    public sealed class x_OrganizationNamePartTypeValidator {
        
        private x_OrganizationNamePartTypeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEL",
                        "PFX",
                        "SFX"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10653 (C-0-D15880-V10653-cpt)
    /// </para>
    /// </summary>
    public enum x_PersonNamePartType {
        
        DEL,
        
        FAM,
        
        GIV,
        
        PFX,
        
        SFX,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10653 (C-0-D15880-V10653-cpt)
    /// </para>
    /// </summary>
    public sealed class x_PersonNamePartTypeValidator {
        
        private x_PersonNamePartTypeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEL",
                        "FAM",
                        "GIV",
                        "PFX",
                        "SFX"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D15913 (C-0-D15913-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityNameUse {
        
        private EntityNameUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityNameSearchUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.EntityNameSearchUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "C",
                                    "L"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.EntityNameSearchUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NamePseudonymUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "A",
                                    "ASGN",
                                    "C",
                                    "I",
                                    "L",
                                    "R"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "C"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V15914 (C-0-D15913-V15914-cpt)
    /// </para>
    /// </summary>
    public sealed class OrganizationNameUse {
        
        private OrganizationNameUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityNameSearchUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "C",
                                    "L"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V200 (C-0-D15913-V200-cpt)
    /// </para>
    /// </summary>
    public sealed class PersonNameUse {
        
        private PersonNameUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityNameSearchUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NamePseudonymUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "A",
                                    "ASGN",
                                    "C",
                                    "I",
                                    "L",
                                    "R"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19619 (C-0-D15913-V200-V19619-cpt)
    /// </para>
    /// </summary>
    public enum EntityNameSearchUse {
        
        SRCH,
        
        PHON,
        
        SNDX,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19619 (C-0-D15913-V200-V19619-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityNameSearchUseValidator {
        
        private EntityNameSearchUseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SRCH",
                        "PHON",
                        "SNDX"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19591 (C-0-D15913-V200-V19591-cpt)
    /// </para>
    /// </summary>
    public enum NamePseudonymUse {
        
        P,
        
        A,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19591 (C-0-D15913-V200-V19591-cpt)
    /// </para>
    /// </summary>
    public sealed class NamePseudonymUseValidator {
        
        private NamePseudonymUseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "P",
                        "A"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D17385 (C-0-D17385-cpt)
    /// </para>
    /// </summary>
    public sealed class IntegrityCheckAlgorithm {
        
        private IntegrityCheckAlgorithm() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SHA-1",
                        "SHA-256"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D14824 (C-0-D14824-cpt)
    /// </para>
    /// </summary>
    public sealed class MediaType {
        
        private MediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ApplicationMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.AudioMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ImageMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ModelMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.MultipartMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.TextMediaType.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.VideoMediaType.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14832 (C-0-D14824-V14832-cpt)
    /// </para>
    /// </summary>
    public sealed class ApplicationMediaType {
        
        private ApplicationMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "application/dicom",
                        "application/msword",
                        "application/pdf"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14835 (C-0-D14824-V14835-cpt)
    /// </para>
    /// </summary>
    public sealed class AudioMediaType {
        
        private AudioMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "audio/basic",
                        "audio/k32adpcm",
                        "audio/mpeg"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14839 (C-0-D14824-V14839-cpt)
    /// </para>
    /// </summary>
    public sealed class ImageMediaType {
        
        private ImageMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "image/g3fax",
                        "image/gif",
                        "image/jpeg",
                        "image/png",
                        "image/tiff"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14848 (C-0-D14824-V14848-cpt)
    /// </para>
    /// </summary>
    public sealed class ModelMediaType {
        
        private ModelMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "model/vrml"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14850 (C-0-D14824-V14850-cpt)
    /// </para>
    /// </summary>
    public sealed class MultipartMediaType {
        
        private MultipartMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "multipart/x-hl7-cda-level1"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14825 (C-0-D14824-V14825-cpt)
    /// </para>
    /// </summary>
    public sealed class TextMediaType {
        
        private TextMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "text/html",
                        "text/plain",
                        "text/rtf",
                        "text/sgml",
                        "text/x-hl7-ft",
                        "text/xml"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14845 (C-0-D14824-V14845-cpt)
    /// </para>
    /// </summary>
    public sealed class VideoMediaType {
        
        private VideoMediaType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "video/mpeg",
                        "video/x-avi"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10637 (C-0-D10637-cpt)
    /// </para>
    /// </summary>
    public sealed class PostalAddressUse {
        
        private PostalAddressUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.HomeAddressUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.WorkPlaceAddressUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "BAD",
                                    "TMP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.NameRepresentationUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "PHYS",
                                    "PST"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V17860 (C-0-D10637-V17860-cpt)
    /// </para>
    /// </summary>
    public enum NameRepresentationUse {
        
        ABC,
        
        IDE,
        
        SYL,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V17860 (C-0-D10637-V17860-cpt)
    /// </para>
    /// </summary>
    public sealed class NameRepresentationUseValidator {
        
        private NameRepresentationUseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ABC",
                        "IDE",
                        "SYL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10747 (C-0-D10747-cpt)
    /// </para>
    /// </summary>
    public enum ProbabilityDistributionType {
        
        B,
        
        E,
        
        F,
        
        G,
        
        LN,
        
        N,
        
        T,
        
        U,
        
        X2,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10747 (C-0-D10747-cpt)
    /// </para>
    /// </summary>
    public sealed class ProbabilityDistributionTypeValidator {
        
        private ProbabilityDistributionTypeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "B",
                        "E",
                        "F",
                        "G",
                        "LN",
                        "N",
                        "T",
                        "U",
                        "X2"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D17416 (C-0-D17416-cpt)
    /// </para>
    /// </summary>
    public enum SetOperator {
        
        A,
        
        E,
        
        H,
        
        I,
        
        P,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D17416 (C-0-D17416-cpt)
    /// </para>
    /// </summary>
    public sealed class SetOperatorValidator {
        
        private SetOperatorValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "A",
                        "E",
                        "H",
                        "I",
                        "P"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D201 (C-0-D201-cpt)
    /// </para>
    /// </summary>
    public sealed class TelecommunicationAddressUse {
        
        private TelecommunicationAddressUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.HomeAddressUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.WorkPlaceAddressUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "BAD",
                                    "TMP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AS",
                                    "EC",
                                    "MC",
                                    "PG"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V190 (C-0-D201-V190-cpt)
    /// </para>
    /// </summary>
    public sealed class AddressUse {
        
        private AddressUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.HomeAddressUseValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.WorkPlaceAddressUseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "BAD",
                                    "TMP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10628 (C-0-D201-V190-V10628-cpt)
    /// </para>
    /// </summary>
    public enum HomeAddressUse {
        
        H,
        
        HP,
        
        HV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10628 (C-0-D201-V190-V10628-cpt)
    /// </para>
    /// </summary>
    public sealed class HomeAddressUseValidator {
        
        private HomeAddressUseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "H",
                        "HP",
                        "HV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19613 (C-0-D201-V190-V19613-cpt)
    /// </para>
    /// </summary>
    public enum WorkPlaceAddressUse {
        
        WP,
        
        DIR,
        
        PUB,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19613 (C-0-D201-V190-V19613-cpt)
    /// </para>
    /// </summary>
    public sealed class WorkPlaceAddressUseValidator {
        
        private WorkPlaceAddressUseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "WP",
                        "DIR",
                        "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10706 (C-0-D10706-cpt)
    /// </para>
    /// </summary>
    public enum TimingEvent {
        
        AC,
        
        ACD,
        
        ACM,
        
        ACV,
        
        HS,
        
        IC,
        
        ICD,
        
        ICM,
        
        ICV,
        
        PC,
        
        PCD,
        
        PCM,
        
        PCV,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10706 (C-0-D10706-cpt)
    /// </para>
    /// </summary>
    public sealed class TimingEventValidator {
        
        private TimingEventValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AC",
                        "ACD",
                        "ACM",
                        "ACV",
                        "HS",
                        "IC",
                        "ICD",
                        "ICM",
                        "ICV",
                        "PC",
                        "PCD",
                        "PCM",
                        "PCV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D14866 (C-0-D14866-cpt)
    /// </para>
    /// </summary>
    public enum URLScheme {
        
        fax,
        
        http,
        
        mailto,
        
        tel,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D14866 (C-0-D14866-cpt)
    /// </para>
    /// </summary>
    public sealed class URLSchemeValidator {
        
        private URLSchemeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "fax",
                        "http",
                        "mailto",
                        "tel"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D11527 (C-0-D11527-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClass {
        
        private ActClass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClassFinancialContractValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CNTRCT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassControlActValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassPublicHealthCaseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassObservationSeriesValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassROIValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "OBS",
                                    "ALRT",
                                    "CLNTRL",
                                    "CNOD",
                                    "DGIMG",
                                    "INVSTG",
                                    "SPCOBS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassSupplyValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClinicalDocumentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COMPOSITION"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassEntryValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassExtractValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassOrganizerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "FOLDER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_ActClassDocumentEntryActValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActClassDocumentEntryOrganizerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACT",
                                    "ACCM",
                                    "ACCT",
                                    "ACSN",
                                    "ADJUD",
                                    "CONS",
                                    "CONTREG",
                                    "CTTEVENT",
                                    "DISPACT",
                                    "ENC",
                                    "INC",
                                    "INFRM",
                                    "INVE",
                                    "LIST",
                                    "MPROT",
                                    "PCPR",
                                    "PROC",
                                    "REG",
                                    "REV",
                                    "SBADM",
                                    "SPCTRT",
                                    "SUBST",
                                    "TRNS",
                                    "VERIF",
                                    "XACT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13856 (C-0-D11527-V13856-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassRoot {
        
        private ActClassRoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClassFinancialContractValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CNTRCT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassControlActValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassPublicHealthCaseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassObservationSeriesValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassROIValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "OBS",
                                    "ALRT",
                                    "CLNTRL",
                                    "CNOD",
                                    "DGIMG",
                                    "INVSTG",
                                    "SPCOBS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassSupplyValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClinicalDocumentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COMPOSITION"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassEntryValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassExtractValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassOrganizerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "FOLDER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_ActClassDocumentEntryActValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActClassDocumentEntryOrganizerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACT",
                                    "ACCM",
                                    "ACCT",
                                    "ACSN",
                                    "ADJUD",
                                    "CONS",
                                    "CONTREG",
                                    "CTTEVENT",
                                    "DISPACT",
                                    "ENC",
                                    "INC",
                                    "INFRM",
                                    "INVE",
                                    "LIST",
                                    "MPROT",
                                    "PCPR",
                                    "PROC",
                                    "REG",
                                    "REV",
                                    "SBADM",
                                    "SPCTRT",
                                    "SUBST",
                                    "TRNS",
                                    "VERIF",
                                    "XACT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V14002 (C-0-D11527-V13856-V14002-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassContract {
        
        private ActClassContract() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClassFinancialContractValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CNTRCT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V14003 (C-0-D11527-V13856-V14002-V14003-cpt)
    /// </para>
    /// </summary>
    public enum ActClassFinancialContract {
        
        FCNTRCT,
        
        COV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V14003 (C-0-D11527-V13856-V14002-V14003-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassFinancialContractValidator {
        
        private ActClassFinancialContractValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "FCNTRCT",
                        "COV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11534 (C-0-D11527-V13856-V11534-cpt)
    /// </para>
    /// </summary>
    public enum ActClassControlAct {
        
        CACT,
        
        ACTN,
        
        INFO,
        
        STC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11534 (C-0-D11527-V13856-V11534-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassControlActValidator {
        
        private ActClassControlActValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CACT",
                        "ACTN",
                        "INFO",
                        "STC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11529 (C-0-D11527-V13856-V11529-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassObservation {
        
        private ActClassObservation() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClassPublicHealthCaseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassObservationSeriesValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassROIValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "OBS",
                                    "ALRT",
                                    "CLNTRL",
                                    "CNOD",
                                    "DGIMG",
                                    "INVSTG",
                                    "SPCOBS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19580 (C-0-D11527-V13856-V11529-V19580-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassCondition {
        
        private ActClassCondition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClassPublicHealthCaseValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11530 (C-0-D11527-V13856-V11529-V19580-V11530-cpt)
    /// </para>
    /// </summary>
    public enum ActClassPublicHealthCase {
        
        CASE,
        
        OUTB,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11530 (C-0-D11527-V13856-V11529-V19580-V11530-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassPublicHealthCaseValidator {
        
        private ActClassPublicHealthCaseValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CASE",
                        "OUTB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V18875 (C-0-D11527-V13856-V11529-V18875-cpt)
    /// </para>
    /// </summary>
    public enum ActClassObservationSeries {
        
        OBSSER,
        
        OBSCOR,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V18875 (C-0-D11527-V13856-V11529-V18875-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassObservationSeriesValidator {
        
        private ActClassObservationSeriesValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "OBSSER",
                        "OBSCOR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V17893 (C-0-D11527-V13856-V11529-V17893-cpt)
    /// </para>
    /// </summary>
    public enum ActClassROI {
        
        ROIBND,
        
        ROIOVL,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V17893 (C-0-D11527-V13856-V11529-V17893-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassROIValidator {
        
        private ActClassROIValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ROIBND",
                        "ROIOVL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11535 (C-0-D11527-V13856-V11535-cpt)
    /// </para>
    /// </summary>
    public enum ActClassSupply {
        
        SPLY,
        
        DIET,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11535 (C-0-D11527-V13856-V11535-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassSupplyValidator {
        
        private ActClassSupplyValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SPLY",
                        "DIET"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19445 (C-0-D11527-V13856-V19445-cpt)
    /// </para>
    /// </summary>
    public sealed class ActContainer {
        
        private ActContainer() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClinicalDocumentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COMPOSITION"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActClassEntryValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassExtractValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActClassOrganizerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "FOLDER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19442 (C-0-D11527-V13856-V19445-V19442-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassComposition {
        
        private ActClassComposition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClinicalDocumentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "COMPOSITION"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V18938 (C-0-D11527-V13856-V19445-V19442-V18938-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassDocument {
        
        private ActClassDocument() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActClinicalDocumentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13948 (C-0-D11527-V13856-V19445-V19442-V18938-V13948-cpt)
    /// </para>
    /// </summary>
    public enum ActClinicalDocument {
        
        DOCCLIN,
        
        CDALVLONE,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13948 (C-0-D11527-V13856-V19445-V19442-V18938-V13948-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClinicalDocumentValidator {
        
        private ActClinicalDocumentValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DOCCLIN",
                        "CDALVLONE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19444 (C-0-D11527-V13856-V19445-V19444-cpt)
    /// </para>
    /// </summary>
    public enum ActClassEntry {
        
        ENTRY,
        
        BATTERY,
        
        CLUSTER,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19444 (C-0-D11527-V13856-V19445-V19444-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassEntryValidator {
        
        private ActClassEntryValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ENTRY",
                        "BATTERY",
                        "CLUSTER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19441 (C-0-D11527-V13856-V19445-V19441-cpt)
    /// </para>
    /// </summary>
    public enum ActClassExtract {
        
        EXTRACT,
        
        EHR,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19441 (C-0-D11527-V13856-V19445-V19441-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassExtractValidator {
        
        private ActClassExtractValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "EXTRACT",
                        "EHR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19443 (C-0-D11527-V13856-V19445-V19443-cpt)
    /// </para>
    /// </summary>
    public enum ActClassOrganizer {
        
        ORGANIZER,
        
        CATEGORY,
        
        DOCBODY,
        
        DOCSECT,
        
        TOPIC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19443 (C-0-D11527-V13856-V19445-V19443-cpt)
    /// </para>
    /// </summary>
    public sealed class ActClassOrganizerValidator {
        
        private ActClassOrganizerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ORGANIZER",
                        "CATEGORY",
                        "DOCBODY",
                        "DOCSECT",
                        "TOPIC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19604 (C-0-D11527-V13856-V19604-cpt)
    /// </para>
    /// </summary>
    public enum x_ActClassDocumentEntryAct {
        
        ACT,
        
        ACCM,
        
        CONS,
        
        CTTEVENT,
        
        INC,
        
        INFRM,
        
        PCPR,
        
        REG,
        
        SPCTRT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19604 (C-0-D11527-V13856-V19604-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActClassDocumentEntryActValidator {
        
        private x_ActClassDocumentEntryActValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ACT",
                        "ACCM",
                        "CONS",
                        "CTTEVENT",
                        "INC",
                        "INFRM",
                        "PCPR",
                        "REG",
                        "SPCTRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19603 (C-0-D11527-V13856-V19603-cpt)
    /// </para>
    /// </summary>
    public enum x_ActClassDocumentEntryOrganizer {
        
        BATTERY,
        
        CLUSTER,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19603 (C-0-D11527-V13856-V19603-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActClassDocumentEntryOrganizerValidator {
        
        private x_ActClassDocumentEntryOrganizerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "BATTERY",
                        "CLUSTER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10196 (C-0-D10196-cpt)
    /// </para>
    /// </summary>
    public sealed class ActMood {
        
        private ActMood() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActMoodIntentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DEF",
                                    "EVN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActMoodPredicate.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodDefEvnValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodDefEvnRqoPrmsPrpValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodDocumentObservationValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodEvnOrdPrmsPrpValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActMoodIntentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "EVN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodOrdPrmsValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodOrdPrmsEvnValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActMoodRqoPrpAptArqValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentActMoodValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentEncounterMoodValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentProcedureMoodValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentSubstanceMoodValidator.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10197 (C-0-D10196-V10197-cpt)
    /// </para>
    /// </summary>
    public sealed class ActMoodCompletionTrack {
        
        private ActMoodCompletionTrack() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActMoodIntentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DEF",
                                    "EVN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10202 (C-0-D10196-V10202-cpt)
    /// </para>
    /// </summary>
    public sealed class ActMoodPredicate {
        
        private ActMoodPredicate() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "EVN.CRT",
                        "GOL",
                        "OPT",
                        "PERM",
                        "PERMRQ"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19375 (C-0-D10196-V19375-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodDefEvn {
        
        DEF,
        
        EVN,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19375 (C-0-D10196-V19375-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodDefEvnValidator {
        
        private x_ActMoodDefEvnValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEF",
                        "EVN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19371 (C-0-D10196-V19371-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodDefEvnRqoPrmsPrp {
        
        DEF,
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19371 (C-0-D10196-V19371-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodDefEvnRqoPrmsPrpValidator {
        
        private x_ActMoodDefEvnRqoPrmsPrpValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEF",
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18943 (C-0-D10196-V18943-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodDocumentObservation {
        
        INT,
        
        DEF,
        
        EVN,
        
        GOL,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18943 (C-0-D10196-V18943-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodDocumentObservationValidator {
        
        private x_ActMoodDocumentObservationValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "DEF",
                        "EVN",
                        "GOL",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18965 (C-0-D10196-V18965-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodEvnOrdPrmsPrp {
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18965 (C-0-D10196-V18965-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodEvnOrdPrmsPrpValidator {
        
        private x_ActMoodEvnOrdPrmsPrpValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16742 (C-0-D10196-V16742-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodIntentEvent {
        
        private x_ActMoodIntentEvent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActMoodIntentValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "EVN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10199 (C-0-D10196-V16742-V10199-cpt)
    /// </para>
    /// </summary>
    public enum ActMoodIntent {
        
        INT,
        
        APT,
        
        ARQ,
        
        PRMS,
        
        PRP,
        
        RQO,
        
        SLOT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10199 (C-0-D10196-V16742-V10199-cpt)
    /// </para>
    /// </summary>
    public sealed class ActMoodIntentValidator {
        
        private ActMoodIntentValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "APT",
                        "ARQ",
                        "PRMS",
                        "PRP",
                        "RQO",
                        "SLOT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16735 (C-0-D10196-V16735-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodOrdPrms {
        
        PRMS,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16735 (C-0-D10196-V16735-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodOrdPrmsValidator {
        
        private x_ActMoodOrdPrmsValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRMS",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16730 (C-0-D10196-V16730-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodOrdPrmsEvn {
        
        EVN,
        
        PRMS,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16730 (C-0-D10196-V16730-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodOrdPrmsEvnValidator {
        
        private x_ActMoodOrdPrmsEvnValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "EVN",
                        "PRMS",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19372 (C-0-D10196-V19372-cpt)
    /// </para>
    /// </summary>
    public enum x_ActMoodRqoPrpAptArq {
        
        APT,
        
        ARQ,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19372 (C-0-D10196-V19372-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActMoodRqoPrpAptArqValidator {
        
        private x_ActMoodRqoPrpAptArqValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "APT",
                        "ARQ",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19458 (C-0-D10196-V19458-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentActMood {
        
        INT,
        
        APT,
        
        ARQ,
        
        DEF,
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19458 (C-0-D10196-V19458-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentActMoodValidator {
        
        private x_DocumentActMoodValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "APT",
                        "ARQ",
                        "DEF",
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19459 (C-0-D10196-V19459-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentEncounterMood {
        
        INT,
        
        APT,
        
        ARQ,
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19459 (C-0-D10196-V19459-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentEncounterMoodValidator {
        
        private x_DocumentEncounterMoodValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "APT",
                        "ARQ",
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19460 (C-0-D10196-V19460-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentProcedureMood {
        
        INT,
        
        APT,
        
        ARQ,
        
        DEF,
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19460 (C-0-D10196-V19460-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentProcedureMoodValidator {
        
        private x_DocumentProcedureMoodValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "APT",
                        "ARQ",
                        "DEF",
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19461 (C-0-D10196-V19461-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentSubstanceMood {
        
        INT,
        
        EVN,
        
        PRMS,
        
        PRP,
        
        RQO,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19461 (C-0-D10196-V19461-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentSubstanceMoodValidator {
        
        private x_DocumentSubstanceMoodValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INT",
                        "EVN",
                        "PRMS",
                        "PRP",
                        "RQO"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10317 (C-0-D10317-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipType {
        
        private ActRelationshipType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipReasonValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIND",
                                    "PRCN",
                                    "TRIG"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipHasComponentValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipObjectiveValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "OUTC",
                                    "GOAL",
                                    "RISK"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipCostTrackingValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipPostingValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.TemporallyPertainsValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.hasSupportValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "PERT",
                                    "AUTH",
                                    "CAUS",
                                    "COVBY",
                                    "DRIV",
                                    "EXPL",
                                    "ITEMSLOC",
                                    "LIMIT",
                                    "MFST",
                                    "NAME",
                                    "PREV",
                                    "REFR",
                                    "REFV",
                                    "SUBJ",
                                    "SUMM"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipExcerptValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipFulfillsValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipReplacementValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "SEQL",
                                    "APND",
                                    "DOC",
                                    "ELNK",
                                    "GEN",
                                    "GEVL",
                                    "INST",
                                    "MTCH",
                                    "OPTN",
                                    "REV",
                                    "UPDT",
                                    "XFRM"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipDocumentValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipEntryValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipEntryRelationshipValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipExternalReferenceValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipPatientTransportValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ActRelationshipPertinentInfoValidator.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18977 (C-0-D10317-V18977-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipConditional {
        
        private ActRelationshipConditional() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipReasonValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIND",
                                    "PRCN",
                                    "TRIG"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19376 (C-0-D10317-V18977-V19376-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipReason {
        
        RSON,
        
        MITGT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19376 (C-0-D10317-V18977-V19376-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipReasonValidator {
        
        private ActRelationshipReasonValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "RSON",
                        "MITGT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10318 (C-0-D10317-V10318-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipHasComponent {
        
        COMP,
        
        ARR,
        
        CTRLV,
        
        DEP,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10318 (C-0-D10317-V10318-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipHasComponentValidator {
        
        private ActRelationshipHasComponentValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "COMP",
                        "ARR",
                        "CTRLV",
                        "DEP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10324 (C-0-D10317-V10324-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipOutcome {
        
        private ActRelationshipOutcome() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipObjectiveValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "OUTC",
                                    "GOAL",
                                    "RISK"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19625 (C-0-D10317-V10324-V19625-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipObjective {
        
        OBJC,
        
        OBJF,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19625 (C-0-D10317-V10324-V19625-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipObjectiveValidator {
        
        private ActRelationshipObjectiveValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "OBJC",
                        "OBJF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10329 (C-0-D10317-V10329-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipPertains {
        
        private ActRelationshipPertains() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipCostTrackingValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipPostingValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.TemporallyPertainsValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.hasSupportValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "PERT",
                                    "AUTH",
                                    "CAUS",
                                    "COVBY",
                                    "DRIV",
                                    "EXPL",
                                    "ITEMSLOC",
                                    "LIMIT",
                                    "MFST",
                                    "NAME",
                                    "PREV",
                                    "REFR",
                                    "REFV",
                                    "SUBJ",
                                    "SUMM"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14900 (C-0-D10317-V10329-V14900-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipAccounting {
        
        private ActRelationshipAccounting() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipCostTrackingValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipPostingValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19618 (C-0-D10317-V10329-V14900-V19618-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipCostTracking {
        
        CHRG,
        
        COST,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19618 (C-0-D10317-V10329-V14900-V19618-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipCostTrackingValidator {
        
        private ActRelationshipCostTrackingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CHRG",
                        "COST"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19617 (C-0-D10317-V10329-V14900-V19617-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipPosting {
        
        CREDIT,
        
        DEBIT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19617 (C-0-D10317-V10329-V14900-V19617-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipPostingValidator {
        
        private ActRelationshipPostingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CREDIT",
                        "DEBIT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19590 (C-0-D10317-V10329-V19590-cpt)
    /// </para>
    /// </summary>
    public enum TemporallyPertains {
        
        SAS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19590 (C-0-D10317-V10329-V19590-cpt)
    /// </para>
    /// </summary>
    public sealed class TemporallyPertainsValidator {
        
        private TemporallyPertainsValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SAS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10330 (C-0-D10317-V10329-V10330-cpt)
    /// </para>
    /// </summary>
    public enum hasSupport {
        
        SPRT,
        
        SPRTBND,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10330 (C-0-D10317-V10329-V10330-cpt)
    /// </para>
    /// </summary>
    public sealed class hasSupportValidator {
        
        private hasSupportValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SPRT",
                        "SPRTBND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10337 (C-0-D10317-V10337-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipSequel {
        
        private ActRelationshipSequel() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipExcerptValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipFulfillsValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ActRelationshipReplacementValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "SEQL",
                                    "APND",
                                    "DOC",
                                    "ELNK",
                                    "GEN",
                                    "GEVL",
                                    "INST",
                                    "MTCH",
                                    "OPTN",
                                    "REV",
                                    "UPDT",
                                    "XFRM"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V18660 (C-0-D10317-V10337-V18660-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipExcerpt {
        
        XCRPT,
        
        VRXCRPT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V18660 (C-0-D10317-V10337-V18660-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipExcerptValidator {
        
        private ActRelationshipExcerptValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "XCRPT",
                        "VRXCRPT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10342 (C-0-D10317-V10337-V10342-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipFulfills {
        
        FLFS,
        
        OCCR,
        
        OREF,
        
        SCH,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10342 (C-0-D10317-V10337-V10342-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipFulfillsValidator {
        
        private ActRelationshipFulfillsValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "FLFS",
                        "OCCR",
                        "OREF",
                        "SCH"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10338 (C-0-D10317-V10337-V10338-cpt)
    /// </para>
    /// </summary>
    public enum ActRelationshipReplacement {
        
        RPLC,
        
        SUCC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10338 (C-0-D10317-V10337-V10338-cpt)
    /// </para>
    /// </summary>
    public sealed class ActRelationshipReplacementValidator {
        
        private ActRelationshipReplacementValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "RPLC",
                        "SUCC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V11610 (C-0-D10317-V11610-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipDocument {
        
        RPLC,
        
        APND,
        
        XFRM,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V11610 (C-0-D10317-V11610-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipDocumentValidator {
        
        private x_ActRelationshipDocumentValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "RPLC",
                        "APND",
                        "XFRM"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19446 (C-0-D10317-V19446-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipEntry {
        
        COMP,
        
        DRIV,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19446 (C-0-D10317-V19446-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipEntryValidator {
        
        private x_ActRelationshipEntryValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "COMP",
                        "DRIV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19447 (C-0-D10317-V19447-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipEntryRelationship {
        
        XCRPT,
        
        COMP,
        
        RSON,
        
        SPRT,
        
        CAUS,
        
        GEVL,
        
        MFST,
        
        REFR,
        
        SAS,
        
        SUBJ,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19447 (C-0-D10317-V19447-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipEntryRelationshipValidator {
        
        private x_ActRelationshipEntryRelationshipValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "XCRPT",
                        "COMP",
                        "RSON",
                        "SPRT",
                        "CAUS",
                        "GEVL",
                        "MFST",
                        "REFR",
                        "SAS",
                        "SUBJ"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19000 (C-0-D10317-V19000-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipExternalReference {
        
        XCRPT,
        
        RPLC,
        
        SPRT,
        
        ELNK,
        
        REFR,
        
        SUBJ,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19000 (C-0-D10317-V19000-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipExternalReferenceValidator {
        
        private x_ActRelationshipExternalReferenceValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "XCRPT",
                        "RPLC",
                        "SPRT",
                        "ELNK",
                        "REFR",
                        "SUBJ"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19005 (C-0-D10317-V19005-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipPatientTransport {
        
        ARR,
        
        DEP,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19005 (C-0-D10317-V19005-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipPatientTransportValidator {
        
        private x_ActRelationshipPatientTransportValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ARR",
                        "DEP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19562 (C-0-D10317-V19562-cpt)
    /// </para>
    /// </summary>
    public enum x_ActRelationshipPertinentInfo {
        
        SPRT,
        
        CAUS,
        
        MFST,
        
        REFR,
        
        SUBJ,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19562 (C-0-D10317-V19562-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ActRelationshipPertinentInfoValidator {
        
        private x_ActRelationshipPertinentInfoValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SPRT",
                        "CAUS",
                        "MFST",
                        "REFR",
                        "SUBJ"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D16031 (C-0-D16031-cpt)
    /// </para>
    /// </summary>
    public enum CommunicationFunctionType {
        
        RCV,
        
        RSP,
        
        SND,
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D16031 (C-0-D16031-cpt)
    /// </para>
    /// </summary>
    public sealed class CommunicationFunctionTypeValidator {
        
        private CommunicationFunctionTypeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "RCV",
                        "RSP",
                        "SND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D16478 (C-0-D16478-cpt)
    /// </para>
    /// </summary>
    public sealed class ContextControl {
        
        private ContextControl() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ContextControlAdditiveValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ContextControlNonPropagatingValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ContextControlOverridingValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ContextControlPropagatingValidator.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18934 (C-0-D16478-V18934-cpt)
    /// </para>
    /// </summary>
    public enum ContextControlAdditive {
        
        AN,
        
        AP,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18934 (C-0-D16478-V18934-cpt)
    /// </para>
    /// </summary>
    public sealed class ContextControlAdditiveValidator {
        
        private ContextControlAdditiveValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AN",
                        "AP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18937 (C-0-D16478-V18937-cpt)
    /// </para>
    /// </summary>
    public enum ContextControlNonPropagating {
        
        AN,
        
        ON,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18937 (C-0-D16478-V18937-cpt)
    /// </para>
    /// </summary>
    public sealed class ContextControlNonPropagatingValidator {
        
        private ContextControlNonPropagatingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AN",
                        "ON"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18935 (C-0-D16478-V18935-cpt)
    /// </para>
    /// </summary>
    public enum ContextControlOverriding {
        
        ON,
        
        OP,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18935 (C-0-D16478-V18935-cpt)
    /// </para>
    /// </summary>
    public sealed class ContextControlOverridingValidator {
        
        private ContextControlOverridingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ON",
                        "OP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18936 (C-0-D16478-V18936-cpt)
    /// </para>
    /// </summary>
    public enum ContextControlPropagating {
        
        AP,
        
        OP,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V18936 (C-0-D16478-V18936-cpt)
    /// </para>
    /// </summary>
    public sealed class ContextControlPropagatingValidator {
        
        private ContextControlPropagatingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AP",
                        "OP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10882 (C-0-D10882-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClass {
        
        private EntityClass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassNonPersonLivingSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "LIV",
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassContainerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassDeviceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MMAT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MAT",
                                    "CHEM",
                                    "FOOD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassPlaceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ENT",
                                    "HCE",
                                    "RGRP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "HCE",
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13922 (C-0-D10882-V13922-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassRoot {
        
        private EntityClassRoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassNonPersonLivingSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "LIV",
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassContainerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassDeviceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MMAT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MAT",
                                    "CHEM",
                                    "FOOD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassPlaceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ENT",
                                    "HCE",
                                    "RGRP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10884 (C-0-D10882-V13922-V10884-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassLivingSubject {
        
        private EntityClassLivingSubject() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassNonPersonLivingSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "LIV",
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11621 (C-0-D10882-V13922-V10884-V11621-cpt)
    /// </para>
    /// </summary>
    public enum EntityClassNonPersonLivingSubject {
        
        NLIV,
        
        ANM,
        
        MIC,
        
        PLNT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11621 (C-0-D10882-V13922-V10884-V11621-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassNonPersonLivingSubjectValidator {
        
        private EntityClassNonPersonLivingSubjectValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "NLIV",
                        "ANM",
                        "MIC",
                        "PLNT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10883 (C-0-D10882-V13922-V10883-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassMaterial {
        
        private EntityClassMaterial() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassContainerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassDeviceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MMAT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MAT",
                                    "CHEM",
                                    "FOOD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13934 (C-0-D10882-V13922-V10883-V13934-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassManufacturedMaterial {
        
        private EntityClassManufacturedMaterial() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassContainerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.EntityClassDeviceValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "MMAT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11622 (C-0-D10882-V13922-V10883-V13934-V11622-cpt)
    /// </para>
    /// </summary>
    public enum EntityClassContainer {
        
        CONT,
        
        HOLD,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11622 (C-0-D10882-V13922-V10883-V13934-V11622-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassContainerValidator {
        
        private EntityClassContainerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CONT",
                        "HOLD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11623 (C-0-D10882-V13922-V10883-V13934-V11623-cpt)
    /// </para>
    /// </summary>
    public enum EntityClassDevice {
        
        DEV,
        
        CER,
        
        MODDV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11623 (C-0-D10882-V13922-V10883-V13934-V11623-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassDeviceValidator {
        
        private EntityClassDeviceValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEV",
                        "CER",
                        "MODDV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10892 (C-0-D10882-V13922-V10892-cpt)
    /// </para>
    /// </summary>
    public enum EntityClassPlace {
        
        PLC,
        
        CITY,
        
        COUNTRY,
        
        COUNTY,
        
        PROVINCE,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10892 (C-0-D10882-V13922-V10892-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassPlaceValidator {
        
        private EntityClassPlaceValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PLC",
                        "CITY",
                        "COUNTRY",
                        "COUNTY",
                        "PROVINCE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19462 (C-0-D10882-V19462-cpt)
    /// </para>
    /// </summary>
    public sealed class x_EntityClassDocumentReceiving {
        
        private x_EntityClassDocumentReceiving() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "HCE",
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19463 (C-0-D10882-V19463-cpt)
    /// </para>
    /// </summary>
    public sealed class x_EntityClassPersonOrOrgReceiving {
        
        private x_EntityClassPersonOrOrgReceiving() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "PSN"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10889 (C-0-D10882-V19463-V10889-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityClassOrganization {
        
        private EntityClassOrganization() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.StateValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ORG",
                                    "PUB"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19455 (C-0-D10882-V19463-V10889-V19455-cpt)
    /// </para>
    /// </summary>
    public enum State {
        
        STATE,
        
        NAT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19455 (C-0-D10882-V19463-V10889-V19455-cpt)
    /// </para>
    /// </summary>
    public sealed class StateValidator {
        
        private StateValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "STATE",
                        "NAT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10878 (C-0-D10878-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityDeterminer {
        
        private EntityDeterminer() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.EntityDeterminerDeterminedValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DeterminerInstanceKindValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INSTANCE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10879 (C-0-D10878-V10879-cpt)
    /// </para>
    /// </summary>
    public enum EntityDeterminerDetermined {
        
        KIND,
        
        QUANTIFIED_KIND,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10879 (C-0-D10878-V10879-cpt)
    /// </para>
    /// </summary>
    public sealed class EntityDeterminerDeterminedValidator {
        
        private EntityDeterminerDeterminedValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "KIND",
                        "QUANTIFIED_KIND"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19647 (C-0-D10878-V19647-cpt)
    /// </para>
    /// </summary>
    public enum x_DeterminerInstanceKind {
        
        KIND,
        
        INSTANCE,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19647 (C-0-D10878-V19647-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DeterminerInstanceKindValidator {
        
        private x_DeterminerInstanceKindValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "KIND",
                        "INSTANCE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10609 (C-0-D10609-cpt)
    /// </para>
    /// </summary>
    public sealed class NullFlavor {
        
        private NullFlavor() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.OtherValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.AskedButUnknownValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "UNK",
                                    "NASK",
                                    "TRC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "NI",
                                    "MSK",
                                    "NA",
                                    "INV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "NP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10610 (C-0-D10609-V10610-cpt)
    /// </para>
    /// </summary>
    public sealed class NoInformation {
        
        private NoInformation() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.OtherValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.AskedButUnknownValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "UNK",
                                    "NASK",
                                    "TRC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "NI",
                                    "MSK",
                                    "NA",
                                    "INV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10616 (C-0-D10609-V10610-V10616-cpt)
    /// </para>
    /// </summary>
    public enum Other {
        
        OTH,
        
        NINF,
        
        PINF,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10616 (C-0-D10609-V10610-V10616-cpt)
    /// </para>
    /// </summary>
    public sealed class OtherValidator {
        
        private OtherValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "OTH",
                        "NINF",
                        "PINF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10612 (C-0-D10609-V10610-V10612-cpt)
    /// </para>
    /// </summary>
    public sealed class Unknown {
        
        private Unknown() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.AskedButUnknownValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "UNK",
                                    "NASK",
                                    "TRC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10614 (C-0-D10609-V10610-V10612-V10614-cpt)
    /// </para>
    /// </summary>
    public enum AskedButUnknown {
        
        ASKU,
        
        NAV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10614 (C-0-D10609-V10610-V10612-V10614-cpt)
    /// </para>
    /// </summary>
    public sealed class AskedButUnknownValidator {
        
        private AskedButUnknownValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ASKU",
                        "NAV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D10901 (C-0-D10901-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationType {
        
        private ParticipationType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationAncillaryValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationIndirectTargetValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationInformationGeneratorValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationInformationRecipientValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationPhysicalPerformerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationTargetDeviceValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationTargetSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DIR",
                                    "BBY",
                                    "CSM",
                                    "DON",
                                    "PRD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationTargetLocationValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationVerifierValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_EncounterParticipantValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_EncounterPerformerParticipationValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_InformationRecipientValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ParticipationAuthorPerformerValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ParticipationEntVrfValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ParticipationPrfEntVrfValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ParticipationVrfRespSprfWitValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_ServiceEventPerformerValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CST",
                                    "RESP"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10247 (C-0-D10901-V10247-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationAncillary {
        
        ADM,
        
        ATND,
        
        CALLBCK,
        
        CON,
        
        DIS,
        
        ESC,
        
        REF,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10247 (C-0-D10901-V10247-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationAncillaryValidator {
        
        private ParticipationAncillaryValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ADM",
                        "ATND",
                        "CALLBCK",
                        "CON",
                        "DIS",
                        "ESC",
                        "REF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19032 (C-0-D10901-V19032-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationIndirectTarget {
        
        IND,
        
        BEN,
        
        COV,
        
        HLD,
        
        RCT,
        
        RCV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19032 (C-0-D10901-V19032-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationIndirectTargetValidator {
        
        private ParticipationIndirectTargetValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "IND",
                        "BEN",
                        "COV",
                        "HLD",
                        "RCT",
                        "RCV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10251 (C-0-D10901-V10251-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationInformationGenerator {
        
        AUT,
        
        ENT,
        
        INF,
        
        WIT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10251 (C-0-D10901-V10251-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationInformationGeneratorValidator {
        
        private ParticipationInformationGeneratorValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AUT",
                        "ENT",
                        "INF",
                        "WIT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10263 (C-0-D10901-V10263-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationInformationRecipient {
        
        IRCP,
        
        NOT,
        
        PRCP,
        
        REFB,
        
        REFT,
        
        TRC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10263 (C-0-D10901-V10263-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationInformationRecipientValidator {
        
        private ParticipationInformationRecipientValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "IRCP",
                        "NOT",
                        "PRCP",
                        "REFB",
                        "REFT",
                        "TRC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10248 (C-0-D10901-V10248-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationPhysicalPerformer {
        
        PRF,
        
        DIST,
        
        PPRF,
        
        SPRF,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10248 (C-0-D10901-V10248-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationPhysicalPerformerValidator {
        
        private ParticipationPhysicalPerformerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRF",
                        "DIST",
                        "PPRF",
                        "SPRF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10286 (C-0-D10901-V10286-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationTargetDirect {
        
        private ParticipationTargetDirect() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationTargetDeviceValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ParticipationTargetSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "DIR",
                                    "BBY",
                                    "CSM",
                                    "DON",
                                    "PRD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10298 (C-0-D10901-V10286-V10298-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationTargetDevice {
        
        DEV,
        
        NRD,
        
        RDV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10298 (C-0-D10901-V10286-V10298-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationTargetDeviceValidator {
        
        private ParticipationTargetDeviceValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DEV",
                        "NRD",
                        "RDV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19584 (C-0-D10901-V10286-V19584-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationTargetSubject {
        
        SBJ,
        
        SPC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19584 (C-0-D10901-V10286-V19584-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationTargetSubjectValidator {
        
        private ParticipationTargetSubjectValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SBJ",
                        "SPC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10302 (C-0-D10901-V10302-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationTargetLocation {
        
        LOC,
        
        DST,
        
        ELOC,
        
        ORG,
        
        RML,
        
        VIA,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10302 (C-0-D10901-V10302-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationTargetLocationValidator {
        
        private ParticipationTargetLocationValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "LOC",
                        "DST",
                        "ELOC",
                        "ORG",
                        "RML",
                        "VIA"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10259 (C-0-D10901-V10259-cpt)
    /// </para>
    /// </summary>
    public enum ParticipationVerifier {
        
        VRF,
        
        AUTHEN,
        
        LA,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10259 (C-0-D10901-V10259-cpt)
    /// </para>
    /// </summary>
    public sealed class ParticipationVerifierValidator {
        
        private ParticipationVerifierValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "VRF",
                        "AUTHEN",
                        "LA"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19605 (C-0-D10901-V19605-cpt)
    /// </para>
    /// </summary>
    public enum x_EncounterParticipant {
        
        ADM,
        
        ATND,
        
        CON,
        
        DIS,
        
        REF,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19605 (C-0-D10901-V19605-cpt)
    /// </para>
    /// </summary>
    public sealed class x_EncounterParticipantValidator {
        
        private x_EncounterParticipantValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ADM",
                        "ATND",
                        "CON",
                        "DIS",
                        "REF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16764 (C-0-D10901-V16764-cpt)
    /// </para>
    /// </summary>
    public enum x_EncounterPerformerParticipation {
        
        PRF,
        
        CON,
        
        SPRF,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16764 (C-0-D10901-V16764-cpt)
    /// </para>
    /// </summary>
    public sealed class x_EncounterPerformerParticipationValidator {
        
        private x_EncounterPerformerParticipationValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRF",
                        "CON",
                        "SPRF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19366 (C-0-D10901-V19366-cpt)
    /// </para>
    /// </summary>
    public enum x_InformationRecipient {
        
        PRCP,
        
        TRC,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19366 (C-0-D10901-V19366-cpt)
    /// </para>
    /// </summary>
    public sealed class x_InformationRecipientValidator {
        
        private x_InformationRecipientValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRCP",
                        "TRC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19080 (C-0-D10901-V19080-cpt)
    /// </para>
    /// </summary>
    public enum x_ParticipationAuthorPerformer {
        
        PRF,
        
        AUT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19080 (C-0-D10901-V19080-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ParticipationAuthorPerformerValidator {
        
        private x_ParticipationAuthorPerformerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRF",
                        "AUT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19600 (C-0-D10901-V19600-cpt)
    /// </para>
    /// </summary>
    public enum x_ParticipationEntVrf {
        
        VRF,
        
        ENT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19600 (C-0-D10901-V19600-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ParticipationEntVrfValidator {
        
        private x_ParticipationEntVrfValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "VRF",
                        "ENT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19601 (C-0-D10901-V19601-cpt)
    /// </para>
    /// </summary>
    public enum x_ParticipationPrfEntVrf {
        
        PRF,
        
        VRF,
        
        ENT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19601 (C-0-D10901-V19601-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ParticipationPrfEntVrfValidator {
        
        private x_ParticipationPrfEntVrfValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRF",
                        "VRF",
                        "ENT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19083 (C-0-D10901-V19083-cpt)
    /// </para>
    /// </summary>
    public enum x_ParticipationVrfRespSprfWit {
        
        VRF,
        
        RESP,
        
        SPRF,
        
        WIT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19083 (C-0-D10901-V19083-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ParticipationVrfRespSprfWitValidator {
        
        private x_ParticipationVrfRespSprfWitValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "VRF",
                        "RESP",
                        "SPRF",
                        "WIT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19606 (C-0-D10901-V19606-cpt)
    /// </para>
    /// </summary>
    public enum x_ServiceEventPerformer {
        
        PRF,
        
        PPRF,
        
        SPRF,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19606 (C-0-D10901-V19606-cpt)
    /// </para>
    /// </summary>
    public sealed class x_ServiceEventPerformerValidator {
        
        private x_ServiceEventPerformerValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PRF",
                        "PPRF",
                        "SPRF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D11555 (C-0-D11555-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClass {
        
        private RoleClass() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassEmployeeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInvestigationSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIT",
                                    "COVPTY",
                                    "CRINV",
                                    "CRSPNSR",
                                    "GUAR",
                                    "PAT",
                                    "PAYEE",
                                    "PAYOR",
                                    "POLHOLD",
                                    "QUAL",
                                    "SPNSR",
                                    "STD",
                                    "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CAREGIVER",
                                    "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassDistributedMaterialValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassManufacturedProductValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassServiceDeliveryLocationValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACCESS",
                                    "BIRTHPL",
                                    "EXPR",
                                    "HLD",
                                    "HLTHCHRT",
                                    "IDENT",
                                    "MNT",
                                    "OWN",
                                    "RGPR",
                                    "TERR",
                                    "WRTE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassIsSpeciesEntityValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INST",
                                    "SUBS",
                                    "SUBY"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInactiveIngredientValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INGR",
                                    "ACTI",
                                    "ACTM",
                                    "ADTV",
                                    "BASE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassLocatedEntityValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassSpecimenValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CONT",
                                    "MBR",
                                    "PART"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentEntrySubjectValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentSubjectValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_InformationRecipientRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassAccommodationRequestorValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassCoverageValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassCoverageInvoiceValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "QUAL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassPayeePolicyRelationshipValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ROL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V13940 (C-0-D11555-V13940-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassRoot {
        
        private RoleClassRoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassEmployeeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInvestigationSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIT",
                                    "COVPTY",
                                    "CRINV",
                                    "CRSPNSR",
                                    "GUAR",
                                    "PAT",
                                    "PAYEE",
                                    "PAYOR",
                                    "POLHOLD",
                                    "QUAL",
                                    "SPNSR",
                                    "STD",
                                    "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CAREGIVER",
                                    "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassDistributedMaterialValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassManufacturedProductValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassServiceDeliveryLocationValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACCESS",
                                    "BIRTHPL",
                                    "EXPR",
                                    "HLD",
                                    "HLTHCHRT",
                                    "IDENT",
                                    "MNT",
                                    "OWN",
                                    "RGPR",
                                    "TERR",
                                    "WRTE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassIsSpeciesEntityValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INST",
                                    "SUBS",
                                    "SUBY"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInactiveIngredientValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INGR",
                                    "ACTI",
                                    "ACTM",
                                    "ADTV",
                                    "BASE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassLocatedEntityValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassSpecimenValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CONT",
                                    "MBR",
                                    "PART"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentEntrySubjectValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_DocumentSubjectValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_InformationRecipientRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassAccommodationRequestorValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassCoverageValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassCoverageInvoiceValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "QUAL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.x_RoleClassPayeePolicyRelationshipValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ROL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19313 (C-0-D11555-V13940-V19313-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassAssociative {
        
        private RoleClassAssociative() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassEmployeeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInvestigationSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIT",
                                    "COVPTY",
                                    "CRINV",
                                    "CRSPNSR",
                                    "GUAR",
                                    "PAT",
                                    "PAYEE",
                                    "PAYOR",
                                    "POLHOLD",
                                    "QUAL",
                                    "SPNSR",
                                    "STD",
                                    "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CAREGIVER",
                                    "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassDistributedMaterialValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassManufacturedProductValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassServiceDeliveryLocationValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACCESS",
                                    "BIRTHPL",
                                    "EXPR",
                                    "HLD",
                                    "HLTHCHRT",
                                    "IDENT",
                                    "MNT",
                                    "OWN",
                                    "RGPR",
                                    "TERR",
                                    "WRTE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19316 (C-0-D11555-V13940-V19313-V19316-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassMutualRelationship {
        
        private RoleClassMutualRelationship() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassEmployeeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInvestigationSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIT",
                                    "COVPTY",
                                    "CRINV",
                                    "CRSPNSR",
                                    "GUAR",
                                    "PAT",
                                    "PAYEE",
                                    "PAYOR",
                                    "POLHOLD",
                                    "QUAL",
                                    "SPNSR",
                                    "STD",
                                    "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CAREGIVER",
                                    "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10416 (C-0-D11555-V13940-V19313-V19316-V10416-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassRelationshipFormal {
        
        private RoleClassRelationshipFormal() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassEmployeeValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInvestigationSubjectValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CIT",
                                    "COVPTY",
                                    "CRINV",
                                    "CRSPNSR",
                                    "GUAR",
                                    "PAT",
                                    "PAYEE",
                                    "PAYOR",
                                    "POLHOLD",
                                    "QUAL",
                                    "SPNSR",
                                    "STD",
                                    "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V14006 (C-0-D11555-V13940-V19313-V19316-V10416-V14006-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassAgent {
        
        private RoleClassAgent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "AGNT",
                                    "GUARD"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11595 (C-0-D11555-V13940-V19313-V19316-V10416-V14006-V11595-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassAssignedEntity {
        
        private RoleClassAssignedEntity() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassContactValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "COMPAR",
                                    "SGNOFF"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V12205 (C-0-D11555-V13940-V19313-V19316-V10416-V14006-V11595-V12205-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassContact {
        
        CON,
        
        ECON,
        
        NOK,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V12205 (C-0-D11555-V13940-V19313-V19316-V10416-V14006-V11595-V12205-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassContactValidator {
        
        private RoleClassContactValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "CON",
                        "ECON",
                        "NOK"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11569 (C-0-D11555-V13940-V19313-V19316-V10416-V11569-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassEmployee {
        
        EMP,
        
        MIL,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11569 (C-0-D11555-V13940-V19313-V19316-V10416-V11569-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassEmployeeValidator {
        
        private RoleClassEmployeeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "EMP",
                        "MIL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19587 (C-0-D11555-V13940-V19313-V19316-V10416-V19587-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassInvestigationSubject {
        
        INVSBJ,
        
        CASESBJ,
        
        RESBJ,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19587 (C-0-D11555-V13940-V19313-V19316-V10416-V19587-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassInvestigationSubjectValidator {
        
        private RoleClassInvestigationSubjectValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "INVSBJ",
                        "CASESBJ",
                        "RESBJ"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19105 (C-0-D11555-V13940-V19313-V19105-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassPassive {
        
        private RoleClassPassive() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassDistributedMaterialValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassManufacturedProductValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassServiceDeliveryLocationValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ACCESS",
                                    "BIRTHPL",
                                    "EXPR",
                                    "HLD",
                                    "HLTHCHRT",
                                    "IDENT",
                                    "MNT",
                                    "OWN",
                                    "RGPR",
                                    "TERR",
                                    "WRTE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10418 (C-0-D11555-V13940-V19313-V19105-V10418-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassDistributedMaterial {
        
        DST,
        
        RET,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10418 (C-0-D11555-V13940-V19313-V19105-V10418-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassDistributedMaterialValidator {
        
        private RoleClassDistributedMaterialValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "DST",
                        "RET"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11580 (C-0-D11555-V13940-V19313-V19105-V11580-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassManufacturedProduct {
        
        MANU,
        
        THER,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11580 (C-0-D11555-V13940-V19313-V19105-V11580-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassManufacturedProductValidator {
        
        private RoleClassManufacturedProductValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "MANU",
                        "THER"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16927 (C-0-D11555-V13940-V19313-V19105-V16927-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassServiceDeliveryLocation {
        
        SDLOC,
        
        DSDLOC,
        
        ISDLOC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16927 (C-0-D11555-V13940-V19313-V19105-V16927-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassServiceDeliveryLocationValidator {
        
        private RoleClassServiceDeliveryLocationValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SDLOC",
                        "DSDLOC",
                        "ISDLOC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10428 (C-0-D11555-V13940-V10428-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassOntological {
        
        private RoleClassOntological() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassIsSpeciesEntityValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INST",
                                    "SUBS",
                                    "SUBY"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10441 (C-0-D11555-V13940-V10428-V10441-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassIsSpeciesEntity {
        
        GEN,
        
        GRIC,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10441 (C-0-D11555-V13940-V10428-V10441-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassIsSpeciesEntityValidator {
        
        private RoleClassIsSpeciesEntityValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "GEN",
                        "GRIC"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V10429 (C-0-D11555-V13940-V10429-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassPartitive {
        
        private RoleClassPartitive() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInactiveIngredientValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INGR",
                                    "ACTI",
                                    "ACTM",
                                    "ADTV",
                                    "BASE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse)),
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassLocatedEntityValidator.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassSpecimenValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "CONT",
                                    "MBR",
                                    "PART"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V10430 (C-0-D11555-V13940-V10429-V10430-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassIngredientEntity {
        
        private RoleClassIngredientEntity() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RoleClassInactiveIngredientValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "INGR",
                                    "ACTI",
                                    "ACTM",
                                    "ADTV",
                                    "BASE"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19089 (C-0-D11555-V13940-V10429-V10430-V19089-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassInactiveIngredient {
        
        IACT,
        
        COLR,
        
        FLVR,
        
        PRSV,
        
        STBL,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19089 (C-0-D11555-V13940-V10429-V10430-V19089-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassInactiveIngredientValidator {
        
        private RoleClassInactiveIngredientValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "IACT",
                        "COLR",
                        "FLVR",
                        "PRSV",
                        "STBL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16815 (C-0-D11555-V13940-V10429-V16815-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassLocatedEntity {
        
        LOCE,
        
        STOR,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16815 (C-0-D11555-V13940-V10429-V16815-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassLocatedEntityValidator {
        
        private RoleClassLocatedEntityValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "LOCE",
                        "STOR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11591 (C-0-D11555-V13940-V10429-V11591-cpt)
    /// </para>
    /// </summary>
    public enum RoleClassSpecimen {
        
        SPEC,
        
        ALQT,
        
        ISLT,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V11591 (C-0-D11555-V13940-V10429-V11591-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleClassSpecimenValidator {
        
        private RoleClassSpecimenValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SPEC",
                        "ALQT",
                        "ISLT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19367 (C-0-D11555-V13940-V19367-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentEntrySubject {
        
        SPEC,
        
        PAT,
        
        PRS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19367 (C-0-D11555-V13940-V19367-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentEntrySubjectValidator {
        
        private x_DocumentEntrySubjectValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "SPEC",
                        "PAT",
                        "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19368 (C-0-D11555-V13940-V19368-cpt)
    /// </para>
    /// </summary>
    public enum x_DocumentSubject {
        
        PAT,
        
        PRS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19368 (C-0-D11555-V13940-V19368-cpt)
    /// </para>
    /// </summary>
    public sealed class x_DocumentSubjectValidator {
        
        private x_DocumentSubjectValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PAT",
                        "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16772 (C-0-D11555-V13940-V16772-cpt)
    /// </para>
    /// </summary>
    public enum x_InformationRecipientRole {
        
        ASSIGNED,
        
        HLTHCHRT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16772 (C-0-D11555-V13940-V16772-cpt)
    /// </para>
    /// </summary>
    public sealed class x_InformationRecipientRoleValidator {
        
        private x_InformationRecipientRoleValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "ASSIGNED",
                        "HLTHCHRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19382 (C-0-D11555-V13940-V19382-cpt)
    /// </para>
    /// </summary>
    public enum x_RoleClassAccommodationRequestor {
        
        AGNT,
        
        PAT,
        
        PROV,
        
        PRS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19382 (C-0-D11555-V13940-V19382-cpt)
    /// </para>
    /// </summary>
    public sealed class x_RoleClassAccommodationRequestorValidator {
        
        private x_RoleClassAccommodationRequestorValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "AGNT",
                        "PAT",
                        "PROV",
                        "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14008 (C-0-D11555-V13940-V14008-cpt)
    /// </para>
    /// </summary>
    public enum x_RoleClassCoverage {
        
        COVPTY,
        
        POLHOLD,
        
        SPNSR,
        
        UNDWRT,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14008 (C-0-D11555-V13940-V14008-cpt)
    /// </para>
    /// </summary>
    public sealed class x_RoleClassCoverageValidator {
        
        private x_RoleClassCoverageValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "COVPTY",
                        "POLHOLD",
                        "SPNSR",
                        "UNDWRT"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14013 (C-0-D11555-V13940-V14013-cpt)
    /// </para>
    /// </summary>
    public enum x_RoleClassCoverageInvoice {
        
        PAYEE,
        
        PAYOR,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V14013 (C-0-D11555-V13940-V14013-cpt)
    /// </para>
    /// </summary>
    public sealed class x_RoleClassCoverageInvoiceValidator {
        
        private x_RoleClassCoverageInvoiceValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "PAYEE",
                        "PAYOR"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V16930 (C-0-D11555-V13940-V16930-cpt)
    /// </para>
    /// </summary>
    public sealed class x_RoleClassCredentialedEntity {
        
        private x_RoleClassCredentialedEntity() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.LicensedEntityRoleValidator.TypeDefinition,
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                                    "ASSIGNED",
                                    "QUAL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                                    "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse))});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16773 (C-0-D11555-V13940-V16930-V16773-cpt)
    /// </para>
    /// </summary>
    public enum LicensedEntityRole {
        
        LIC,
        
        NOT,
        
        PROV,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V16773 (C-0-D11555-V13940-V16930-V16773-cpt)
    /// </para>
    /// </summary>
    public sealed class LicensedEntityRoleValidator {
        
        private LicensedEntityRoleValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "LIC",
                        "NOT",
                        "PROV"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19395 (C-0-D11555-V13940-V19395-cpt)
    /// </para>
    /// </summary>
    public enum x_RoleClassPayeePolicyRelationship {
        
        COVPTY,
        
        GUAR,
        
        POLHOLD,
        
        PROV,
        
        PRS,
    }
    
    /// <summary>
    /// <para>
    /// abstDomain: V19395 (C-0-D11555-V13940-V19395-cpt)
    /// </para>
    /// </summary>
    public sealed class x_RoleClassPayeePolicyRelationshipValidator {
        
        private x_RoleClassPayeePolicyRelationshipValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "COVPTY",
                        "GUAR",
                        "POLHOLD",
                        "PROV",
                        "PRS"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// vocSet: D11603 (C-0-D11603-cpt)
    /// </para>
    /// </summary>
    public sealed class RoleLinkType {
        
        private RoleLinkType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.RelatedLinkTypeValidator.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19615 (C-0-D11603-V19615-cpt)
    /// </para>
    /// </summary>
    public enum RelatedLinkType {
        
        REL,
        
        BACKUP,
        
        DIRAUTH,
        
        INDAUTH,
        
        PART,
        
        REPL,
    }
    
    /// <summary>
    /// <para>
    /// specDomain: V19615 (C-0-D11603-V19615-cpt)
    /// </para>
    /// </summary>
    public sealed class RelatedLinkTypeValidator {
        
        private RelatedLinkTypeValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(24)), new object[] {
                        "REL",
                        "BACKUP",
                        "DIRAUTH",
                        "INDAUTH",
                        "PART",
                        "REPL"}, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
    /// </para>
    /// </summary>
    public partial class StrucDocText : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocText(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocText>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocText>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public StrucDocText() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName paragraphXName = System.Xml.Linq.XName.Get("paragraph", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocParagraph> paragraphField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocParagraph> paragraph {
            get {
                if ((this.paragraphField == null)) {
                    this.paragraphField = new XTypedList<StrucDocParagraph>(this, LinqToXsdTypeManager.Instance, paragraphXName);
                }
                return this.paragraphField;
            }
            set {
                if ((value == null)) {
                    this.paragraphField = null;
                }
                else {
                    if ((this.paragraphField == null)) {
                        this.paragraphField = XTypedList<StrucDocParagraph>.Initialize(this, LinqToXsdTypeManager.Instance, value, paragraphXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocParagraph>(this.paragraphField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocList> listField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocList> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<StrucDocList>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<StrucDocList>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocList>(this.listField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTable> tableField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTable> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<StrucDocTable>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<StrucDocTable>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTable>(this.tableField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName mediaTypeXName = System.Xml.Linq.XName.Get("mediaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string mediaTypeFixedValue = "text/x-hl7-text+xml";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mediaType {
            get {
                return mediaTypeFixedValue;
            }
            set {
                if (mediaTypeFixedValue.Equals(value)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, mediaTypeFixedValue);
                }
                this.SetAttribute(mediaTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Text", "urn:hl7-org:v3");
        
        static StrucDocText() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName), new NamedContentModelEntity(paragraphXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(tableXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
            localElementDictionary.Add(paragraphXName, typeof(StrucDocParagraph));
            localElementDictionary.Add(listXName, typeof(StrucDocList));
            localElementDictionary.Add(tableXName, typeof(StrucDocTable));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
    /// </para>
    /// </summary>
    public partial class StrucDocTitle : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTitle(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTitle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTitle>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public StrucDocTitle() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTitleContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTitleContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocTitleContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocTitleContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTitleContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTitleFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTitleFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocTitleFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocTitleFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTitleFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName mediaTypeXName = System.Xml.Linq.XName.Get("mediaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string mediaTypeFixedValue = "text/x-hl7-title+xml";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mediaType {
            get {
                return mediaTypeFixedValue;
            }
            set {
                if (mediaTypeFixedValue.Equals(value)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, mediaTypeFixedValue);
                }
                this.SetAttribute(mediaTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Title", "urn:hl7-org:v3");
        
        static StrucDocTitle() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocTitleContent));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocTitleFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class StrucDocBr : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocBr(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocBr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocBr>(this);
        }
        
        public StrucDocBr() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Br", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
    /// </para>
    /// </summary>
    public partial class StrucDocCaption : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocCaption(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocCaption>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocCaption>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public StrucDocCaption() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (linkHtml | sub | sup | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Caption", "urn:hl7-org:v3");
        
        static StrucDocCaption() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class StrucDocCol : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocCol(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocCol>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocCol>(this);
        }
        
        public StrucDocCol() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string spanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string span {
            get {
                XAttribute x = this.Attribute(spanXName);
                if ((x == null)) {
                    return spanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocCol.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocCol.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocCol.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Col", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (col)*
    /// </para>
    /// </summary>
    public partial class StrucDocColgroup : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocColgroup(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocColgroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocColgroup>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (col)*
        /// </para>
        /// </summary>
        public StrucDocColgroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName colXName = System.Xml.Linq.XName.Get("col", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocCol> colField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (col)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocCol> col {
            get {
                if ((this.colField == null)) {
                    this.colField = new XTypedList<StrucDocCol>(this, LinqToXsdTypeManager.Instance, colXName);
                }
                return this.colField;
            }
            set {
                if ((value == null)) {
                    this.colField = null;
                }
                else {
                    if ((this.colField == null)) {
                        this.colField = XTypedList<StrucDocCol>.Initialize(this, LinqToXsdTypeManager.Instance, value, colXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocCol>(this.colField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string spanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string span {
            get {
                XAttribute x = this.Attribute(spanXName);
                if ((x == null)) {
                    return spanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocColgroup.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocColgroup.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocColgroup.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Colgroup", "urn:hl7-org:v3");
        
        static StrucDocColgroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(colXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(colXName, typeof(StrucDocCol));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
    /// </para>
    /// </summary>
    public partial class StrucDocContent : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocContent(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocContent>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public StrucDocContent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        public enum RevisedEnum {
            
            insert,
            
            delete,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName revisedXName = System.Xml.Linq.XName.Get("revised", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocContent.RevisedEnum? revised {
            get {
                XAttribute x = this.Attribute(revisedXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocContent.RevisedEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocContent.RevisedEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(revisedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Content", "urn:hl7-org:v3");
        
        static StrucDocContent() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
    /// </para>
    /// </summary>
    public partial class StrucDocTitleContent : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTitleContent(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTitleContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTitleContent>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public StrucDocTitleContent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTitleContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTitleContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocTitleContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocTitleContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTitleContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTitleFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTitleFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocTitleFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocTitleFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTitleFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br | footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.TitleContent", "urn:hl7-org:v3");
        
        static StrucDocTitleContent() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocTitleContent));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocTitleFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
    /// </para>
    /// </summary>
    public partial class StrucDocFootnote : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocFootnote(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocFootnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocFootnote>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public StrucDocFootnote() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName paragraphXName = System.Xml.Linq.XName.Get("paragraph", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocParagraph> paragraphField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocParagraph> paragraph {
            get {
                if ((this.paragraphField == null)) {
                    this.paragraphField = new XTypedList<StrucDocParagraph>(this, LinqToXsdTypeManager.Instance, paragraphXName);
                }
                return this.paragraphField;
            }
            set {
                if ((value == null)) {
                    this.paragraphField = null;
                }
                else {
                    if ((this.paragraphField == null)) {
                        this.paragraphField = XTypedList<StrucDocParagraph>.Initialize(this, LinqToXsdTypeManager.Instance, value, paragraphXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocParagraph>(this.paragraphField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocList> listField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocList> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<StrucDocList>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<StrucDocList>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocList>(this.listField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTable> tableField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | renderMultiMedia | paragraph | list | table)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTable> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<StrucDocTable>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<StrucDocTable>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTable>(this.tableField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Footnote", "urn:hl7-org:v3");
        
        static StrucDocFootnote() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(renderMultiMediaXName), new NamedContentModelEntity(paragraphXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(tableXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
            localElementDictionary.Add(paragraphXName, typeof(StrucDocParagraph));
            localElementDictionary.Add(listXName, typeof(StrucDocList));
            localElementDictionary.Add(tableXName, typeof(StrucDocTable));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | sub | sup | br)*
    /// </para>
    /// </summary>
    public partial class StrucDocTitleFootnote : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTitleFootnote(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTitleFootnote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTitleFootnote>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | sub | sup | br)*
        /// </para>
        /// </summary>
        public StrucDocTitleFootnote() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTitleContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTitleContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocTitleContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocTitleContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTitleContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | sub | sup | br)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.TitleFootnote", "urn:hl7-org:v3");
        
        static StrucDocTitleFootnote() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocTitleContent));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class StrucDocFootnoteRef : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocFootnoteRef(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocFootnoteRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocFootnoteRef>(this);
        }
        
        public StrucDocFootnoteRef() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDREFXName = System.Xml.Linq.XName.Get("IDREF", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string IDREF {
            get {
                XAttribute x = this.Attribute(IDREFXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(IDREFXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.FootnoteRef", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
    /// </para>
    /// </summary>
    public partial class StrucDocItem : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocItem(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocItem>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public StrucDocItem() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual StrucDocCaption caption {
            get {
                XElement x = this.GetElement(captionXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocCaption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName paragraphXName = System.Xml.Linq.XName.Get("paragraph", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocParagraph> paragraphField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocParagraph> paragraph {
            get {
                if ((this.paragraphField == null)) {
                    this.paragraphField = new XTypedList<StrucDocParagraph>(this, LinqToXsdTypeManager.Instance, paragraphXName);
                }
                return this.paragraphField;
            }
            set {
                if ((value == null)) {
                    this.paragraphField = null;
                }
                else {
                    if ((this.paragraphField == null)) {
                        this.paragraphField = XTypedList<StrucDocParagraph>.Initialize(this, LinqToXsdTypeManager.Instance, value, paragraphXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocParagraph>(this.paragraphField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocList> listField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocList> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<StrucDocList>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<StrucDocList>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocList>(this.listField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tableXName = System.Xml.Linq.XName.Get("table", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTable> tableField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list | table)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTable> table {
            get {
                if ((this.tableField == null)) {
                    this.tableField = new XTypedList<StrucDocTable>(this, LinqToXsdTypeManager.Instance, tableXName);
                }
                return this.tableField;
            }
            set {
                if ((value == null)) {
                    this.tableField = null;
                }
                else {
                    if ((this.tableField == null)) {
                        this.tableField = XTypedList<StrucDocTable>.Initialize(this, LinqToXsdTypeManager.Instance, value, tableXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTable>(this.tableField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Item", "urn:hl7-org:v3");
        
        static StrucDocItem() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName), new NamedContentModelEntity(paragraphXName), new NamedContentModelEntity(listXName), new NamedContentModelEntity(tableXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(StrucDocCaption));
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
            localElementDictionary.Add(paragraphXName, typeof(StrucDocParagraph));
            localElementDictionary.Add(listXName, typeof(StrucDocList));
            localElementDictionary.Add(tableXName, typeof(StrucDocTable));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (footnote | footnoteRef)*
    /// </para>
    /// </summary>
    public partial class StrucDocLinkHtml : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocLinkHtml(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocLinkHtml>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocLinkHtml>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public StrucDocLinkHtml() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (footnote | footnoteRef)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName relXName = System.Xml.Linq.XName.Get("rel", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rel {
            get {
                XAttribute x = this.Attribute(relXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(relXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName revXName = System.Xml.Linq.XName.Get("rev", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rev {
            get {
                XAttribute x = this.Attribute(revXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(revXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.LinkHtml", "urn:hl7-org:v3");
        
        static StrucDocLinkHtml() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, item+)
    /// </para>
    /// </summary>
    public partial class StrucDocList : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocList(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocList>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, item+)
        /// </para>
        /// </summary>
        public StrucDocList() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, item+)
        /// </para>
        /// </summary>
        public virtual StrucDocCaption caption {
            get {
                XElement x = this.GetElement(captionXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocCaption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName itemXName = System.Xml.Linq.XName.Get("item", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocItem> itemField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (caption?, item+)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocItem> item {
            get {
                if ((this.itemField == null)) {
                    this.itemField = new XTypedList<StrucDocItem>(this, LinqToXsdTypeManager.Instance, itemXName);
                }
                return this.itemField;
            }
            set {
                if ((value == null)) {
                    this.itemField = null;
                }
                else {
                    if ((this.itemField == null)) {
                        this.itemField = XTypedList<StrucDocItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, itemXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocItem>(this.itemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        public enum ListTypeEnum {
            
            ordered,
            
            unordered,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName listTypeXName = System.Xml.Linq.XName.Get("listType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.StrucDocList.ListTypeEnum listTypeDefaultValue = DocumentGenerator.Semd.Evacuation.Base.StrucDocList.ListTypeEnum.unordered;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocList.ListTypeEnum listType {
            get {
                XAttribute x = this.Attribute(listTypeXName);
                if ((x == null)) {
                    return listTypeDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocList.ListTypeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocList.ListTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(listTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.List", "urn:hl7-org:v3");
        
        static StrucDocList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new NamedContentModelEntity(itemXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(StrucDocCaption));
            localElementDictionary.Add(itemXName, typeof(StrucDocItem));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
    /// </para>
    /// </summary>
    public partial class StrucDocParagraph : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocParagraph(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocParagraph>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocParagraph>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public StrucDocParagraph() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual StrucDocCaption caption {
            get {
                XElement x = this.GetElement(captionXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocCaption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Paragraph", "urn:hl7-org:v3");
        
        static StrucDocParagraph() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(StrucDocCaption));
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?)
    /// </para>
    /// </summary>
    public partial class StrucDocRenderMultiMedia : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocRenderMultiMedia(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocRenderMultiMedia>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocRenderMultiMedia>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?)
        /// </para>
        /// </summary>
        public StrucDocRenderMultiMedia() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?)
        /// </para>
        /// </summary>
        public virtual StrucDocCaption caption {
            get {
                XElement x = this.GetElement(captionXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocCaption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName referencedObjectXName = System.Xml.Linq.XName.Get("referencedObject", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<string> referencedObject {
            get {
                XAttribute x = this.Attribute(referencedObjectXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(referencedObjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.RenderMultiMedia", "urn:hl7-org:v3");
        
        static StrucDocRenderMultiMedia() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(StrucDocCaption));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class StrucDocSub : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocSub(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocSub>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocSub>(this);
        }
        
        public StrucDocSub() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Sub", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class StrucDocSup : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocSup(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocSup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocSup>(this);
        }
        
        public StrucDocSup() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Sup", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
    /// </para>
    /// </summary>
    public partial class StrucDocTable : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTable(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTable>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTable>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public StrucDocTable() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName captionXName = System.Xml.Linq.XName.Get("caption", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual StrucDocCaption caption {
            get {
                XElement x = this.GetElement(captionXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocCaption)(x));
            }
            set {
                this.SetElement(captionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName colXName = System.Xml.Linq.XName.Get("col", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocCol> colField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocCol> col {
            get {
                if ((this.colField == null)) {
                    this.colField = new XTypedList<StrucDocCol>(this, LinqToXsdTypeManager.Instance, colXName);
                }
                return this.colField;
            }
            set {
                if ((value == null)) {
                    this.colField = null;
                }
                else {
                    if ((this.colField == null)) {
                        this.colField = XTypedList<StrucDocCol>.Initialize(this, LinqToXsdTypeManager.Instance, value, colXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocCol>(this.colField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName colgroupXName = System.Xml.Linq.XName.Get("colgroup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocColgroup> colgroupField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocColgroup> colgroup {
            get {
                if ((this.colgroupField == null)) {
                    this.colgroupField = new XTypedList<StrucDocColgroup>(this, LinqToXsdTypeManager.Instance, colgroupXName);
                }
                return this.colgroupField;
            }
            set {
                if ((value == null)) {
                    this.colgroupField = null;
                }
                else {
                    if ((this.colgroupField == null)) {
                        this.colgroupField = XTypedList<StrucDocColgroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, colgroupXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocColgroup>(this.colgroupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName theadXName = System.Xml.Linq.XName.Get("thead", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual StrucDocThead thead {
            get {
                XElement x = this.GetElement(theadXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocThead)(x));
            }
            set {
                this.SetElement(theadXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tfootXName = System.Xml.Linq.XName.Get("tfoot", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual StrucDocTfoot tfoot {
            get {
                XElement x = this.GetElement(tfootXName);
                if ((x == null)) {
                    return null;
                }
                return ((StrucDocTfoot)(x));
            }
            set {
                this.SetElement(tfootXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tbodyXName = System.Xml.Linq.XName.Get("tbody", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTbody> tbodyField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (caption?, (col* | colgroup*), thead?, tfoot?, tbody+)
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTbody> tbody {
            get {
                if ((this.tbodyField == null)) {
                    this.tbodyField = new XTypedList<StrucDocTbody>(this, LinqToXsdTypeManager.Instance, tbodyXName);
                }
                return this.tbodyField;
            }
            set {
                if ((value == null)) {
                    this.tbodyField = null;
                }
                else {
                    if ((this.tbodyField == null)) {
                        this.tbodyField = XTypedList<StrucDocTbody>.Initialize(this, LinqToXsdTypeManager.Instance, value, tbodyXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTbody>(this.tbodyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName summaryXName = System.Xml.Linq.XName.Get("summary", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string summary {
            get {
                XAttribute x = this.Attribute(summaryXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(summaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName borderXName = System.Xml.Linq.XName.Get("border", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string border {
            get {
                XAttribute x = this.Attribute(borderXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(borderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName frameXName = System.Xml.Linq.XName.Get("frame", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string frame {
            get {
                XAttribute x = this.Attribute(frameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(frameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        public enum RulesEnum {
            
            none,
            
            groups,
            
            rows,
            
            cols,
            
            all,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName rulesXName = System.Xml.Linq.XName.Get("rules", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTable.RulesEnum? rules {
            get {
                XAttribute x = this.Attribute(rulesXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTable.RulesEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTable.RulesEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(rulesXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName cellspacingXName = System.Xml.Linq.XName.Get("cellspacing", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string cellspacing {
            get {
                XAttribute x = this.Attribute(cellspacingXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(cellspacingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName cellpaddingXName = System.Xml.Linq.XName.Get("cellpadding", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string cellpadding {
            get {
                XAttribute x = this.Attribute(cellpaddingXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(cellpaddingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Table", "urn:hl7-org:v3");
        
        static StrucDocTable() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(captionXName), new ChoiceContentModelEntity(new NamedContentModelEntity(colXName), new NamedContentModelEntity(colgroupXName)), new NamedContentModelEntity(theadXName), new NamedContentModelEntity(tfootXName), new NamedContentModelEntity(tbodyXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(captionXName, typeof(StrucDocCaption));
            localElementDictionary.Add(colXName, typeof(StrucDocCol));
            localElementDictionary.Add(colgroupXName, typeof(StrucDocColgroup));
            localElementDictionary.Add(theadXName, typeof(StrucDocThead));
            localElementDictionary.Add(tfootXName, typeof(StrucDocTfoot));
            localElementDictionary.Add(tbodyXName, typeof(StrucDocTbody));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr)+
    /// </para>
    /// </summary>
    public partial class StrucDocTbody : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTbody(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTbody>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTbody>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public StrucDocTbody() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTr> trField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<StrucDocTr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<StrucDocTr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTr>(this.trField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTbody.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTbody.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTbody.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Tbody", "urn:hl7-org:v3");
        
        static StrucDocTbody() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(StrucDocTr));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
    /// </para>
    /// </summary>
    public partial class StrucDocTd : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTd(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTd>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public StrucDocTd() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName paragraphXName = System.Xml.Linq.XName.Get("paragraph", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocParagraph> paragraphField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocParagraph> paragraph {
            get {
                if ((this.paragraphField == null)) {
                    this.paragraphField = new XTypedList<StrucDocParagraph>(this, LinqToXsdTypeManager.Instance, paragraphXName);
                }
                return this.paragraphField;
            }
            set {
                if ((value == null)) {
                    this.paragraphField = null;
                }
                else {
                    if ((this.paragraphField == null)) {
                        this.paragraphField = XTypedList<StrucDocParagraph>.Initialize(this, LinqToXsdTypeManager.Instance, value, paragraphXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocParagraph>(this.paragraphField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName listXName = System.Xml.Linq.XName.Get("list", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocList> listField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia | paragraph | list)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocList> list {
            get {
                if ((this.listField == null)) {
                    this.listField = new XTypedList<StrucDocList>(this, LinqToXsdTypeManager.Instance, listXName);
                }
                return this.listField;
            }
            set {
                if ((value == null)) {
                    this.listField = null;
                }
                else {
                    if ((this.listField == null)) {
                        this.listField = XTypedList<StrucDocList>.Initialize(this, LinqToXsdTypeManager.Instance, value, listXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocList>(this.listField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(abbrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(abbrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName axisXName = System.Xml.Linq.XName.Get("axis", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string axis {
            get {
                XAttribute x = this.Attribute(axisXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(axisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName headersXName = System.Xml.Linq.XName.Get("headers", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> headers {
            get {
                XAttribute x = this.Attribute(headersXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(headersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        public enum ScopeEnum {
            
            row,
            
            col,
            
            rowgroup,
            
            colgroup,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName scopeXName = System.Xml.Linq.XName.Get("scope", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ScopeEnum? scope {
            get {
                XAttribute x = this.Attribute(scopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ScopeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ScopeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(scopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName rowspanXName = System.Xml.Linq.XName.Get("rowspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string rowspanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowspan {
            get {
                XAttribute x = this.Attribute(rowspanXName);
                if ((x == null)) {
                    return rowspanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(rowspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName colspanXName = System.Xml.Linq.XName.Get("colspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string colspanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colspan {
            get {
                XAttribute x = this.Attribute(colspanXName);
                if ((x == null)) {
                    return colspanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(colspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTd.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Td", "urn:hl7-org:v3");
        
        static StrucDocTd() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName), new NamedContentModelEntity(paragraphXName), new NamedContentModelEntity(listXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
            localElementDictionary.Add(paragraphXName, typeof(StrucDocParagraph));
            localElementDictionary.Add(listXName, typeof(StrucDocList));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr)+
    /// </para>
    /// </summary>
    public partial class StrucDocTfoot : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTfoot(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTfoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTfoot>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public StrucDocTfoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTr> trField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<StrucDocTr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<StrucDocTr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTr>(this.trField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTfoot.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTfoot.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTfoot.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Tfoot", "urn:hl7-org:v3");
        
        static StrucDocTfoot() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(StrucDocTr));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
    /// </para>
    /// </summary>
    public partial class StrucDocTh : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTh(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTh>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTh>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public StrucDocTh() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocContent> contentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocContent> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<StrucDocContent>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<StrucDocContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocContent>(this.contentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName linkHtmlXName = System.Xml.Linq.XName.Get("linkHtml", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocLinkHtml> linkHtmlField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocLinkHtml> linkHtml {
            get {
                if ((this.linkHtmlField == null)) {
                    this.linkHtmlField = new XTypedList<StrucDocLinkHtml>(this, LinqToXsdTypeManager.Instance, linkHtmlXName);
                }
                return this.linkHtmlField;
            }
            set {
                if ((value == null)) {
                    this.linkHtmlField = null;
                }
                else {
                    if ((this.linkHtmlField == null)) {
                        this.linkHtmlField = XTypedList<StrucDocLinkHtml>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkHtmlXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocLinkHtml>(this.linkHtmlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName subXName = System.Xml.Linq.XName.Get("sub", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSub> subField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSub> sub {
            get {
                if ((this.subField == null)) {
                    this.subField = new XTypedList<StrucDocSub>(this, LinqToXsdTypeManager.Instance, subXName);
                }
                return this.subField;
            }
            set {
                if ((value == null)) {
                    this.subField = null;
                }
                else {
                    if ((this.subField == null)) {
                        this.subField = XTypedList<StrucDocSub>.Initialize(this, LinqToXsdTypeManager.Instance, value, subXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSub>(this.subField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName supXName = System.Xml.Linq.XName.Get("sup", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocSup> supField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocSup> sup {
            get {
                if ((this.supField == null)) {
                    this.supField = new XTypedList<StrucDocSup>(this, LinqToXsdTypeManager.Instance, supXName);
                }
                return this.supField;
            }
            set {
                if ((value == null)) {
                    this.supField = null;
                }
                else {
                    if ((this.supField == null)) {
                        this.supField = XTypedList<StrucDocSup>.Initialize(this, LinqToXsdTypeManager.Instance, value, supXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocSup>(this.supField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName brXName = System.Xml.Linq.XName.Get("br", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocBr> brField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocBr> br {
            get {
                if ((this.brField == null)) {
                    this.brField = new XTypedList<StrucDocBr>(this, LinqToXsdTypeManager.Instance, brXName);
                }
                return this.brField;
            }
            set {
                if ((value == null)) {
                    this.brField = null;
                }
                else {
                    if ((this.brField == null)) {
                        this.brField = XTypedList<StrucDocBr>.Initialize(this, LinqToXsdTypeManager.Instance, value, brXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocBr>(this.brField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteXName = System.Xml.Linq.XName.Get("footnote", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnote> footnoteField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnote> footnote {
            get {
                if ((this.footnoteField == null)) {
                    this.footnoteField = new XTypedList<StrucDocFootnote>(this, LinqToXsdTypeManager.Instance, footnoteXName);
                }
                return this.footnoteField;
            }
            set {
                if ((value == null)) {
                    this.footnoteField = null;
                }
                else {
                    if ((this.footnoteField == null)) {
                        this.footnoteField = XTypedList<StrucDocFootnote>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnote>(this.footnoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName footnoteRefXName = System.Xml.Linq.XName.Get("footnoteRef", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocFootnoteRef> footnoteRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocFootnoteRef> footnoteRef {
            get {
                if ((this.footnoteRefField == null)) {
                    this.footnoteRefField = new XTypedList<StrucDocFootnoteRef>(this, LinqToXsdTypeManager.Instance, footnoteRefXName);
                }
                return this.footnoteRefField;
            }
            set {
                if ((value == null)) {
                    this.footnoteRefField = null;
                }
                else {
                    if ((this.footnoteRefField == null)) {
                        this.footnoteRefField = XTypedList<StrucDocFootnoteRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, footnoteRefXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocFootnoteRef>(this.footnoteRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName renderMultiMediaXName = System.Xml.Linq.XName.Get("renderMultiMedia", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocRenderMultiMedia> renderMultiMediaField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (content | linkHtml | sub | sup | br | footnote | footnoteRef | renderMultiMedia)*
        /// </para>
        /// </summary>
        public virtual IList<StrucDocRenderMultiMedia> renderMultiMedia {
            get {
                if ((this.renderMultiMediaField == null)) {
                    this.renderMultiMediaField = new XTypedList<StrucDocRenderMultiMedia>(this, LinqToXsdTypeManager.Instance, renderMultiMediaXName);
                }
                return this.renderMultiMediaField;
            }
            set {
                if ((value == null)) {
                    this.renderMultiMediaField = null;
                }
                else {
                    if ((this.renderMultiMediaField == null)) {
                        this.renderMultiMediaField = XTypedList<StrucDocRenderMultiMedia>.Initialize(this, LinqToXsdTypeManager.Instance, value, renderMultiMediaXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocRenderMultiMedia>(this.renderMultiMediaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName abbrXName = System.Xml.Linq.XName.Get("abbr", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string abbr {
            get {
                XAttribute x = this.Attribute(abbrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(abbrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName axisXName = System.Xml.Linq.XName.Get("axis", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string axis {
            get {
                XAttribute x = this.Attribute(axisXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(axisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName headersXName = System.Xml.Linq.XName.Get("headers", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> headers {
            get {
                XAttribute x = this.Attribute(headersXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetListAttribute(headersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        public enum ScopeEnum {
            
            row,
            
            col,
            
            rowgroup,
            
            colgroup,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName scopeXName = System.Xml.Linq.XName.Get("scope", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ScopeEnum? scope {
            get {
                XAttribute x = this.Attribute(scopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ScopeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ScopeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(scopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName rowspanXName = System.Xml.Linq.XName.Get("rowspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string rowspanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rowspan {
            get {
                XAttribute x = this.Attribute(rowspanXName);
                if ((x == null)) {
                    return rowspanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(rowspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName colspanXName = System.Xml.Linq.XName.Get("colspan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string colspanDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string colspan {
            get {
                XAttribute x = this.Attribute(colspanXName);
                if ((x == null)) {
                    return colspanDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(colspanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTh.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Th", "urn:hl7-org:v3");
        
        static StrucDocTh() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(contentXName), new NamedContentModelEntity(linkHtmlXName), new NamedContentModelEntity(subXName), new NamedContentModelEntity(supXName), new NamedContentModelEntity(brXName), new NamedContentModelEntity(footnoteXName), new NamedContentModelEntity(footnoteRefXName), new NamedContentModelEntity(renderMultiMediaXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contentXName, typeof(StrucDocContent));
            localElementDictionary.Add(linkHtmlXName, typeof(StrucDocLinkHtml));
            localElementDictionary.Add(subXName, typeof(StrucDocSub));
            localElementDictionary.Add(supXName, typeof(StrucDocSup));
            localElementDictionary.Add(brXName, typeof(StrucDocBr));
            localElementDictionary.Add(footnoteXName, typeof(StrucDocFootnote));
            localElementDictionary.Add(footnoteRefXName, typeof(StrucDocFootnoteRef));
            localElementDictionary.Add(renderMultiMediaXName, typeof(StrucDocRenderMultiMedia));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tr)+
    /// </para>
    /// </summary>
    public partial class StrucDocThead : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocThead(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocThead>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocThead>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public StrucDocThead() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName trXName = System.Xml.Linq.XName.Get("tr", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTr> trField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tr)+
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTr> tr {
            get {
                if ((this.trField == null)) {
                    this.trField = new XTypedList<StrucDocTr>(this, LinqToXsdTypeManager.Instance, trXName);
                }
                return this.trField;
            }
            set {
                if ((value == null)) {
                    this.trField = null;
                }
                else {
                    if ((this.trField == null)) {
                        this.trField = XTypedList<StrucDocTr>.Initialize(this, LinqToXsdTypeManager.Instance, value, trXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTr>(this.trField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocThead.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocThead.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocThead.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Thead", "urn:hl7-org:v3");
        
        static StrucDocThead() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(trXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(trXName, typeof(StrucDocTr));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (th | td)+
    /// </para>
    /// </summary>
    public partial class StrucDocTr : XTypedElement, IXMetaData {
        
		public static explicit operator StrucDocTr(XElement xe) { return XTypedServices.ToXTypedElement<StrucDocTr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StrucDocTr>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public StrucDocTr() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName thXName = System.Xml.Linq.XName.Get("th", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTh> thField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTh> th {
            get {
                if ((this.thField == null)) {
                    this.thField = new XTypedList<StrucDocTh>(this, LinqToXsdTypeManager.Instance, thXName);
                }
                return this.thField;
            }
            set {
                if ((value == null)) {
                    this.thField = null;
                }
                else {
                    if ((this.thField == null)) {
                        this.thField = XTypedList<StrucDocTh>.Initialize(this, LinqToXsdTypeManager.Instance, value, thXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTh>(this.thField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName tdXName = System.Xml.Linq.XName.Get("td", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StrucDocTd> tdField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (th | td)+
        /// </para>
        /// </summary>
        public virtual IList<StrucDocTd> td {
            get {
                if ((this.tdField == null)) {
                    this.tdField = new XTypedList<StrucDocTd>(this, LinqToXsdTypeManager.Instance, tdXName);
                }
                return this.tdField;
            }
            set {
                if ((value == null)) {
                    this.tdField = null;
                }
                else {
                    if ((this.tdField == null)) {
                        this.tdField = XTypedList<StrucDocTd>.Initialize(this, LinqToXsdTypeManager.Instance, value, tdXName);
                    }
                    else {
                        XTypedServices.SetList<StrucDocTd>(this.tdField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName styleCodeXName = System.Xml.Linq.XName.Get("styleCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> styleCode {
            get {
                XAttribute x = this.Attribute(styleCodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetListAttribute(styleCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName alignXName = System.Xml.Linq.XName.Get("align", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string align {
            get {
                XAttribute x = this.Attribute(alignXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(alignXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @charXName = System.Xml.Linq.XName.Get("char", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @char {
            get {
                XAttribute x = this.Attribute(@charXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@charXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName charoffXName = System.Xml.Linq.XName.Get("charoff", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string charoff {
            get {
                XAttribute x = this.Attribute(charoffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(charoffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        public enum ValignEnum {
            
            top,
            
            middle,
            
            bottom,
            
            baseline,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valignXName = System.Xml.Linq.XName.Get("valign", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.StrucDocTr.ValignEnum? valign {
            get {
                XAttribute x = this.Attribute(valignXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.StrucDocTr.ValignEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.StrucDocTr.ValignEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(valignXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StrucDoc.Tr", "urn:hl7-org:v3");
        
        static StrucDocTr() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(thXName), new NamedContentModelEntity(tdXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(thXName, typeof(StrucDocTh));
            localElementDictionary.Add(tdXName, typeof(StrucDocTd));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (structuredBody)
    /// </para>
    /// </summary>
    public partial class POCD_MT000040Component2 : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040Component2(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040Component2>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040Component2>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (structuredBody)
        /// </para>
        /// </summary>
        public POCD_MT000040Component2() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName structuredBodyXName = System.Xml.Linq.XName.Get("structuredBody", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (structuredBody)
        /// </para>
        /// </summary>
        public virtual structuredBody_224 structuredBody {
            get {
                XElement x = this.GetElement(structuredBodyXName);
                return ((structuredBody_224)(x));
            }
            set {
                this.SetElement(structuredBodyXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.Component2", "urn:hl7-org:v3");
        
        static POCD_MT000040Component2() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(structuredBodyXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(structuredBodyXName, typeof(structuredBody_224));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (component+)
    /// </para>
    /// </summary>
    public partial class structuredBody_224 : XTypedElement, IXMetaData {
        
		public static explicit operator structuredBody_224(XElement xe) { return XTypedServices.ToXTypedElement<structuredBody_224>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<structuredBody_224>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (component+)
        /// </para>
        /// </summary>
        public structuredBody_224() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName componentXName = System.Xml.Linq.XName.Get("component", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<component_225> componentField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (component+)
        /// </para>
        /// </summary>
        public virtual IList<component_225> component {
            get {
                if ((this.componentField == null)) {
                    this.componentField = new XTypedList<component_225>(this, LinqToXsdTypeManager.Instance, componentXName);
                }
                return this.componentField;
            }
            set {
                if ((value == null)) {
                    this.componentField = null;
                }
                else {
                    if ((this.componentField == null)) {
                        this.componentField = XTypedList<component_225>.Initialize(this, LinqToXsdTypeManager.Instance, value, componentXName);
                    }
                    else {
                        XTypedServices.SetList<component_225>(this.componentField, value);
                    }
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("structuredBody_224", "urn:hl7-org:v3");
        
        static structuredBody_224() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(componentXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(componentXName, typeof(component_225));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (section)
    /// </para>
    /// </summary>
    public partial class component_225 : XTypedElement, IXMetaData {
        
		public static explicit operator component_225(XElement xe) { return XTypedServices.ToXTypedElement<component_225>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<component_225>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (section)
        /// </para>
        /// </summary>
        public component_225() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName sectionXName = System.Xml.Linq.XName.Get("section", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (section)
        /// </para>
        /// </summary>
        public virtual section_226 section {
            get {
                XElement x = this.GetElement(sectionXName);
                return ((section_226)(x));
            }
            set {
                this.SetElement(sectionXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("component_225", "urn:hl7-org:v3");
        
        static component_225() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sectionXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sectionXName, typeof(section_226));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (code, entry+)
    /// </para>
    /// </summary>
    public partial class section_226 : XTypedElement, IXMetaData {
        
		public static explicit operator section_226(XElement xe) { return XTypedServices.ToXTypedElement<section_226>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<section_226>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, entry+)
        /// </para>
        /// </summary>
        public section_226() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, entry+)
        /// </para>
        /// </summary>
        public virtual code_227 code {
            get {
                XElement x = this.GetElement(codeXName);
                return ((code_227)(x));
            }
            set {
                this.SetElement(codeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName entryXName = System.Xml.Linq.XName.Get("entry", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entry_228> entryField;
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (code, entry+)
        /// </para>
        /// </summary>
        public virtual IList<entry_228> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entry_228>(this, LinqToXsdTypeManager.Instance, entryXName);
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entry_228>.Initialize(this, LinqToXsdTypeManager.Instance, value, entryXName);
                    }
                    else {
                        XTypedServices.SetList<entry_228>(this.entryField, value);
                    }
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("section_226", "urn:hl7-org:v3");
        
        static section_226() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeXName), new NamedContentModelEntity(entryXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeXName, typeof(code_227));
            localElementDictionary.Add(entryXName, typeof(entry_228));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class code_227 : XTypedElement, IXMetaData {
        
		public static explicit operator code_227(XElement xe) { return XTypedServices.ToXTypedElement<code_227>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<code_227>(this);
        }
        
        public code_227() {
        }
        
        public enum CodeEnum {
            
            SCOPORG,
            
            BENEFITS,
            
            WORK,
            
            DGN,
            
            ELU,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.code_227.CodeEnum code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.code_227.CodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.code_227.CodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(codeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, void.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("code_227", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((act | observation))
    /// </para>
    /// </summary>
    public partial class entry_228 : XTypedElement, IXMetaData {
        
		public static explicit operator entry_228(XElement xe) { return XTypedServices.ToXTypedElement<entry_228>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entry_228>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((act | observation))
        /// </para>
        /// </summary>
        public entry_228() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName actXName = System.Xml.Linq.XName.Get("act", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((act | observation))
        /// </para>
        /// </summary>
        public virtual act_229 act {
            get {
                XElement x = this.GetElement(actXName);
                if ((x == null)) {
                    return null;
                }
                return ((act_229)(x));
            }
            set {
                this.SetElement(actXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName observationXName = System.Xml.Linq.XName.Get("observation", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((act | observation))
        /// </para>
        /// </summary>
        public virtual observation_271 observation {
            get {
                XElement x = this.GetElement(observationXName);
                if ((x == null)) {
                    return null;
                }
                return ((observation_271)(x));
            }
            set {
                this.SetElement(observationXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("entry_228", "urn:hl7-org:v3");
        
        static entry_228() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(actXName), new NamedContentModelEntity(observationXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(actXName, typeof(act_229));
            localElementDictionary.Add(observationXName, typeof(observation_271));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (code, performer, entryRelationship*)
    /// </para>
    /// </summary>
    public partial class act_229 : XTypedElement, IXMetaData {
        
		public static explicit operator act_229(XElement xe) { return XTypedServices.ToXTypedElement<act_229>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<act_229>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, performer, entryRelationship*)
        /// </para>
        /// </summary>
        public act_229() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, performer, entryRelationship*)
        /// </para>
        /// </summary>
        public virtual code_230 code {
            get {
                XElement x = this.GetElement(codeXName);
                return ((code_230)(x));
            }
            set {
                this.SetElement(codeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName performerXName = System.Xml.Linq.XName.Get("performer", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, performer, entryRelationship*)
        /// </para>
        /// </summary>
        public virtual performer_231 performer {
            get {
                XElement x = this.GetElement(performerXName);
                return ((performer_231)(x));
            }
            set {
                this.SetElement(performerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName entryRelationshipXName = System.Xml.Linq.XName.Get("entryRelationship", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entryRelationship_245> entryRelationshipField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (code, performer, entryRelationship*)
        /// </para>
        /// </summary>
        public virtual IList<entryRelationship_245> entryRelationship {
            get {
                if ((this.entryRelationshipField == null)) {
                    this.entryRelationshipField = new XTypedList<entryRelationship_245>(this, LinqToXsdTypeManager.Instance, entryRelationshipXName);
                }
                return this.entryRelationshipField;
            }
            set {
                if ((value == null)) {
                    this.entryRelationshipField = null;
                }
                else {
                    if ((this.entryRelationshipField == null)) {
                        this.entryRelationshipField = XTypedList<entryRelationship_245>.Initialize(this, LinqToXsdTypeManager.Instance, value, entryRelationshipXName);
                    }
                    else {
                        XTypedServices.SetList<entryRelationship_245>(this.entryRelationshipField, value);
                    }
                }
            }
        }
        
        public enum ClassCodeEnum {
            
            ACT,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.act_229.ClassCodeEnum classCode {
            get {
                XAttribute x = this.Attribute(classCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.act_229.ClassCodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.act_229.ClassCodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(classCodeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        public enum MoodCodeEnum {
            
            RQO,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName moodCodeXName = System.Xml.Linq.XName.Get("moodCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.act_229.MoodCodeEnum moodCode {
            get {
                XAttribute x = this.Attribute(moodCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.act_229.MoodCodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.act_229.MoodCodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(moodCodeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("act_229", "urn:hl7-org:v3");
        
        static act_229() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeXName), new NamedContentModelEntity(performerXName), new NamedContentModelEntity(entryRelationshipXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeXName, typeof(code_230));
            localElementDictionary.Add(performerXName, typeof(performer_231));
            localElementDictionary.Add(entryRelationshipXName, typeof(entryRelationship_245));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class code_230 : XTypedElement, IXMetaData {
        
		public static explicit operator code_230(XElement xe) { return XTypedServices.ToXTypedElement<code_230>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<code_230>(this);
        }
        
        public code_230() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, void.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("code_230", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (assignedEntity)
    /// </para>
    /// </summary>
    public partial class performer_231 : XTypedElement, IXMetaData {
        
		public static explicit operator performer_231(XElement xe) { return XTypedServices.ToXTypedElement<performer_231>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<performer_231>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (assignedEntity)
        /// </para>
        /// </summary>
        public performer_231() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName assignedEntityXName = System.Xml.Linq.XName.Get("assignedEntity", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (assignedEntity)
        /// </para>
        /// </summary>
        public virtual assignedEntity_232 assignedEntity {
            get {
                XElement x = this.GetElement(assignedEntityXName);
                return ((assignedEntity_232)(x));
            }
            set {
                this.SetElement(assignedEntityXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("performer_231", "urn:hl7-org:v3");
        
        static performer_231() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(assignedEntityXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(assignedEntityXName, typeof(assignedEntity_232));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (id, representedOrganization)
    /// </para>
    /// </summary>
    public partial class assignedEntity_232 : XTypedElement, IXMetaData {
        
		public static explicit operator assignedEntity_232(XElement xe) { return XTypedServices.ToXTypedElement<assignedEntity_232>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<assignedEntity_232>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (id, representedOrganization)
        /// </para>
        /// </summary>
        public assignedEntity_232() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, representedOrganization)
        /// </para>
        /// </summary>
        public virtual id_233 id {
            get {
                XElement x = this.GetElement(idXName);
                return ((id_233)(x));
            }
            set {
                this.SetElement(idXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName representedOrganizationXName = System.Xml.Linq.XName.Get("representedOrganization", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, representedOrganization)
        /// </para>
        /// </summary>
        public virtual representedOrganization_234 representedOrganization {
            get {
                XElement x = this.GetElement(representedOrganizationXName);
                return ((representedOrganization_234)(x));
            }
            set {
                this.SetElement(representedOrganizationXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("assignedEntity_232", "urn:hl7-org:v3");
        
        static assignedEntity_232() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(idXName), new NamedContentModelEntity(representedOrganizationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(idXName, typeof(id_233));
            localElementDictionary.Add(representedOrganizationXName, typeof(representedOrganization_234));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class id_233 : XTypedElement, IXMetaData {
        
		public static explicit operator id_233(XElement xe) { return XTypedServices.ToXTypedElement<id_233>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<id_233>(this);
        }
        
        public id_233() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, void.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("id_233", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (id, name, telecom*, addr?)
    /// </para>
    /// </summary>
    public partial class representedOrganization_234 : XTypedElement, IXMetaData {
        
		public static explicit operator representedOrganization_234(XElement xe) { return XTypedServices.ToXTypedElement<representedOrganization_234>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<representedOrganization_234>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public representedOrganization_234() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual id_235 id {
            get {
                XElement x = this.GetElement(idXName);
                return ((id_235)(x));
            }
            set {
                this.SetElement(idXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(nameXName, value, "name", global::DocumentGenerator.Semd.Evacuation.Base.ON.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName telecomXName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<telecom_237> telecomField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual IList<telecom_237> telecom {
            get {
                if ((this.telecomField == null)) {
                    this.telecomField = new XTypedList<telecom_237>(this, LinqToXsdTypeManager.Instance, telecomXName);
                }
                return this.telecomField;
            }
            set {
                if ((value == null)) {
                    this.telecomField = null;
                }
                else {
                    if ((this.telecomField == null)) {
                        this.telecomField = XTypedList<telecom_237>.Initialize(this, LinqToXsdTypeManager.Instance, value, telecomXName);
                    }
                    else {
                        XTypedServices.SetList<telecom_237>(this.telecomField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName addrXName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual AD addr {
            get {
                XElement x = this.GetElement(addrXName);
                if ((x == null)) {
                    return null;
                }
                return ((AD)(x));
            }
            set {
                this.SetElement(addrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object classCode {
            get {
                XAttribute x = this.Attribute(classCodeXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "classCode", this, classCodeXName, void.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("representedOrganization_234", "urn:hl7-org:v3");
        
        static representedOrganization_234() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(idXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(telecomXName), new NamedContentModelEntity(addrXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(idXName, typeof(id_235));
            localElementDictionary.Add(nameXName, typeof(string));
            localElementDictionary.Add(telecomXName, typeof(telecom_237));
            localElementDictionary.Add(addrXName, typeof(AD));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class id_235 : XTypedElement, IXMetaData {
        
		public static explicit operator id_235(XElement xe) { return XTypedServices.ToXTypedElement<id_235>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<id_235>(this);
        }
        
        public id_235() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName rootXName = System.Xml.Linq.XName.Get("root", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object root {
            get {
                XAttribute x = this.Attribute(rootXName);
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "root", this, rootXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName extensionXName = System.Xml.Linq.XName.Get("extension", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string extension {
            get {
                XAttribute x = this.Attribute(extensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(extensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("id_235", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class telecom_237 : XTypedElement, IXMetaData {
        
		public static explicit operator telecom_237(XElement xe) { return XTypedServices.ToXTypedElement<telecom_237>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<telecom_237>(this);
        }
        
        public telecom_237() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<object> use {
            get {
                XAttribute x = this.Attribute(useXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("telecom_237", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (observation)
    /// </para>
    /// </summary>
    public partial class entryRelationship_245 : XTypedElement, IXMetaData {
        
		public static explicit operator entryRelationship_245(XElement xe) { return XTypedServices.ToXTypedElement<entryRelationship_245>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entryRelationship_245>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (observation)
        /// </para>
        /// </summary>
        public entryRelationship_245() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName observationXName = System.Xml.Linq.XName.Get("observation", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (observation)
        /// </para>
        /// </summary>
        public virtual observation_246 observation {
            get {
                XElement x = this.GetElement(observationXName);
                return ((observation_246)(x));
            }
            set {
                this.SetElement(observationXName, value);
            }
        }
        
        public enum TypeCodeEnum {
            
            COMP,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName typeCodeXName = System.Xml.Linq.XName.Get("typeCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.entryRelationship_245.TypeCodeEnum typeCode {
            get {
                XAttribute x = this.Attribute(typeCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.entryRelationship_245.TypeCodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.entryRelationship_245.TypeCodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeCodeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("entryRelationship_245", "urn:hl7-org:v3");
        
        static entryRelationship_245() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(observationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(observationXName, typeof(observation_246));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (code, value)
    /// </para>
    /// </summary>
    public partial class observation_246 : XTypedElement, IXMetaData {
        
		public static explicit operator observation_246(XElement xe) { return XTypedServices.ToXTypedElement<observation_246>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<observation_246>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, value)
        /// </para>
        /// </summary>
        public observation_246() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, value)
        /// </para>
        /// </summary>
        public virtual code_247 code {
            get {
                XElement x = this.GetElement(codeXName);
                return ((code_247)(x));
            }
            set {
                this.SetElement(codeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, value)
        /// </para>
        /// </summary>
        public virtual ANY value {
            get {
                XElement x = this.GetElement(valueXName);
                return ((ANY)(x));
            }
            set {
                this.SetElement(valueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object classCode {
            get {
                XAttribute x = this.Attribute(classCodeXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "classCode", this, classCodeXName, void.TypeDefinition);
            }
        }
        
        public enum MoodCodeEnum {
            
            RQO,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName moodCodeXName = System.Xml.Linq.XName.Get("moodCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.observation_246.MoodCodeEnum moodCode {
            get {
                XAttribute x = this.Attribute(moodCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.observation_246.MoodCodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.observation_246.MoodCodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(moodCodeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("observation_246", "urn:hl7-org:v3");
        
        static observation_246() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeXName), new NamedContentModelEntity(valueXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeXName, typeof(code_247));
            localElementDictionary.Add(valueXName, typeof(ANY));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class code_247 : XTypedElement, IXMetaData {
        
		public static explicit operator code_247(XElement xe) { return XTypedServices.ToXTypedElement<code_247>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<code_247>(this);
        }
        
        public code_247() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, void.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("code_247", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class translation_249 : XTypedElement, IXMetaData {
        
		public static explicit operator translation_249(XElement xe) { return XTypedServices.ToXTypedElement<translation_249>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<translation_249>(this);
        }
        
        public translation_249() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "value", this, valueXName, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("translation_249", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (code, text?, value?)
    /// </para>
    /// </summary>
    public partial class observation_271 : XTypedElement, IXMetaData {
        
		public static explicit operator observation_271(XElement xe) { return XTypedServices.ToXTypedElement<observation_271>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<observation_271>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (code, text?, value?)
        /// </para>
        /// </summary>
        public observation_271() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (code, text?, value?)
        /// </para>
        /// </summary>
        public virtual code_272 code {
            get {
                XElement x = this.GetElement(codeXName);
                return ((code_272)(x));
            }
            set {
                this.SetElement(codeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName textXName = System.Xml.Linq.XName.Get("text", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, text?, value?)
        /// </para>
        /// </summary>
        public virtual ED text {
            get {
                XElement x = this.GetElement(textXName);
                if ((x == null)) {
                    return null;
                }
                return ((ED)(x));
            }
            set {
                this.SetElement(textXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (code, text?, value?)
        /// </para>
        /// </summary>
        public virtual ANY value {
            get {
                XElement x = this.GetElement(valueXName);
                if ((x == null)) {
                    return null;
                }
                return ((ANY)(x));
            }
            set {
                this.SetElement(valueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object classCode {
            get {
                XAttribute x = this.Attribute(classCodeXName);
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "classCode", this, classCodeXName, void.TypeDefinition);
            }
        }
        
        public enum MoodCodeEnum {
            
            EVN,
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName moodCodeXName = System.Xml.Linq.XName.Get("moodCode", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.observation_271.MoodCodeEnum moodCode {
            get {
                XAttribute x = this.Attribute(moodCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.observation_271.MoodCodeEnum)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.observation_271.MoodCodeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(moodCodeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("observation_271", "urn:hl7-org:v3");
        
        static observation_271() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeXName), new NamedContentModelEntity(textXName), new NamedContentModelEntity(valueXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeXName, typeof(code_272));
            localElementDictionary.Add(textXName, typeof(ED));
            localElementDictionary.Add(valueXName, typeof(ANY));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class code_272 : XTypedElement, IXMetaData {
        
		public static explicit operator code_272(XElement xe) { return XTypedServices.ToXTypedElement<code_272>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<code_272>(this);
        }
        
        public code_272() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, void.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("code_272", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Defines the basic properties of every data value. This
    ///            is an abstract type, meaning that no value can be just
    ///            a data value without belonging to any concrete type.
    ///            Every concrete type is a specialization of this
    ///            general abstract DataValue type.
    ///			
    /// </para>
    /// </summary>
    public abstract partial class ANY : XTypedElement, IXMetaData {
        
		public static explicit operator ANY(XElement xe) {  return (ANY)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///            Defines the basic properties of every data value. This
        ///            is an abstract type, meaning that no value can be just
        ///            a data value without belonging to any concrete type.
        ///            Every concrete type is a specialization of this
        ///            general abstract DataValue type.
        ///			
        /// </para>
        /// </summary>
        public ANY() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// 
        ///               An exceptional value expressing missing information
        ///               and possibly the reason why the information is missing.
        ///				
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ANY", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The Boolean type stands for the values of two-valued logic.
    ///            A Boolean value can be either true or
    ///            false, or, as any other value may be NULL.
    ///			
    /// </para>
    /// </summary>
    public sealed class bl {
        
        private bl() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "true|false"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The Boolean type stands for the values of two-valued logic.
    ///            A Boolean value can be either true or
    ///            false, or, as any other value may be NULL.
    ///			
    /// </para>
    /// </summary>
    public partial class BL : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator BL(XElement xe) { return XTypedServices.ToXTypedElement<BL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BL>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The Boolean type stands for the values of two-valued logic.
        ///            A Boolean value can be either true or
        ///            false, or, as any other value may be NULL.
        ///			
        /// </para>
        /// </summary>
        public BL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The BooleanNonNull type is used where a Boolean cannot
    ///            have a null value. A Boolean value can be either
    ///            true or false.
    ///			
    /// </para>
    /// </summary>
    public sealed class bn {
        
        private bn() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "true|false"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The BooleanNonNull type is used where a Boolean cannot
    ///            have a null value. A Boolean value can be either
    ///            true or false.
    ///			
    /// </para>
    /// </summary>
    public partial class ANYNonNull : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator ANYNonNull(XElement xe) { return XTypedServices.ToXTypedElement<ANYNonNull>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ANYNonNull>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The BooleanNonNull type is used where a Boolean cannot
        ///            have a null value. A Boolean value can be either
        ///            true or false.
        ///			
        /// </para>
        /// </summary>
        public ANYNonNull() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ANYNonNull", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The BooleanNonNull type is used where a Boolean cannot
    ///            have a null value. A Boolean value can be either
    ///            true or false.
    ///			
    /// </para>
    /// </summary>
    public partial class BN : global::DocumentGenerator.Semd.Evacuation.Base.ANYNonNull, IXMetaData {
        
		public static explicit operator BN(XElement xe) { return XTypedServices.ToXTypedElement<BN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BN>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The BooleanNonNull type is used where a Boolean cannot
        ///            have a null value. A Boolean value can be either
        ///            true or false.
        ///			
        /// </para>
        /// </summary>
        public BN() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BN", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Binary data is a raw block of bits. Binary data is a
    ///            protected type that MUST not be used outside the data
    ///            type specification.
    ///			
    /// </para>
    /// </summary>
    public abstract partial class BIN : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator BIN(XElement xe) {  return (BIN)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///            Binary data is a raw block of bits. Binary data is a
        ///            protected type that MUST not be used outside the data
        ///            type specification.
        ///			
        /// </para>
        /// </summary>
        public BIN() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName representationXName = System.Xml.Linq.XName.Get("representation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.BinaryDataEncoding representationDefaultValue = DocumentGenerator.Semd.Evacuation.Base.BinaryDataEncoding.TXT;
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies the representation of the binary data that
        ///                     is the content of the binary data value.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.BinaryDataEncoding representation {
            get {
                XAttribute x = this.Attribute(representationXName);
                if ((x == null)) {
                    return representationDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.BinaryDataEncoding)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.BinaryDataEncoding), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetAttribute(representationXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BIN", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Binary data is a raw block of bits. Binary data is a
    ///            protected type that MUST not be used outside the data
    ///            type specification.
    ///			
    /// </para>
    /// </summary>
    public sealed class bin {
        
        private bin() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary), null);
    }
    
    public enum BinaryDataEncoding {
        
        B64,
        
        TXT,
    }
    
    public sealed class BinaryDataEncodingValidator {
        
        private BinaryDataEncodingValidator() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "B64",
                        "TXT"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Data that is primarily intended for human interpretation
    ///            or for further machine processing is outside the scope of
    ///            HL7. This includes unformatted or formatted written language,
    ///            multimedia data, or structured information as defined by a
    ///            different standard (e.g., XML-signatures.)  Instead of the
    ///            data itself, an ED may contain 
    ///            only a reference (see TEL.) Note
    ///            that the ST data type is a
    ///            specialization of the ED data type
    ///            when the ED media type is text/plain.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (reference?, thumbnail?)
    /// </para>
    /// </summary>
    public partial class ED : global::DocumentGenerator.Semd.Evacuation.Base.BIN, IXMetaData {
        
		public static explicit operator ED(XElement xe) { return XTypedServices.ToXTypedElement<ED>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ED>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Data that is primarily intended for human interpretation
        ///            or for further machine processing is outside the scope of
        ///            HL7. This includes unformatted or formatted written language,
        ///            multimedia data, or structured information as defined by a
        ///            different standard (e.g., XML-signatures.)  Instead of the
        ///            data itself, an ED may contain 
        ///            only a reference (see TEL.) Note
        ///            that the ST data type is a
        ///            specialization of the ED data type
        ///            when the ED media type is text/plain.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (reference?, thumbnail?)
        /// </para>
        /// </summary>
        public ED() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName referenceXName = System.Xml.Linq.XName.Get("reference", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        A telecommunication address (TEL), such as a URL
        ///                        for HTTP or FTP, which will resolve to precisely
        ///                        the same binary data that could as well have been
        ///                        provided as inline data.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reference?, thumbnail?)
        /// </para>
        /// </summary>
        public virtual TEL reference {
            get {
                XElement x = this.GetElement(referenceXName);
                if ((x == null)) {
                    return null;
                }
                return ((TEL)(x));
            }
            set {
                this.SetElement(referenceXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName thumbnailXName = System.Xml.Linq.XName.Get("thumbnail", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (reference?, thumbnail?)
        /// </para>
        /// </summary>
        public virtual thumbnail thumbnail {
            get {
                XElement x = this.GetElement(thumbnailXName);
                if ((x == null)) {
                    return null;
                }
                return ((thumbnail)(x));
            }
            set {
                this.SetElement(thumbnailXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName mediaTypeXName = System.Xml.Linq.XName.Get("mediaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string mediaTypeDefaultValue = "text/plain";
        
        /// <summary>
        /// <para>
        /// 
        ///                     Identifies the type of the encapsulated data and
        ///                     identifies a method to interpret or render the data.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mediaType {
            get {
                XAttribute x = this.Attribute(mediaTypeXName);
                if ((x == null)) {
                    return mediaTypeDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(mediaTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     For character based information the language property
        ///                     specifies the human language of the text.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName compressionXName = System.Xml.Linq.XName.Get("compression", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Indicates whether the raw byte data is compressed,
        ///                     and what compression algorithm was used.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.CompressionAlgorithm? compression {
            get {
                XAttribute x = this.Attribute(compressionXName);
                if ((x == null)) {
                    return null;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.CompressionAlgorithm)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.CompressionAlgorithm), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(compressionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName integrityCheckXName = System.Xml.Linq.XName.Get("integrityCheck", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The integrity check is a short binary value representing
        ///                     a cryptographically strong checksum that is calculated
        ///                     over the binary data. The purpose of this property, when
        ///                     communicated with a reference is for anyone to validate
        ///                     later whether the reference still resolved to the same
        ///                     data that the reference resolved to when the encapsulated
        ///                     data value with reference was created.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual byte[] integrityCheck {
            get {
                XAttribute x = this.Attribute(integrityCheckXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
            set {
                this.SetAttribute(integrityCheckXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName integrityCheckAlgorithmXName = System.Xml.Linq.XName.Get("integrityCheckAlgorithm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string integrityCheckAlgorithmDefaultValue = "SHA-1";
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies the algorithm used to compute the
        ///                     integrityCheck value.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string integrityCheckAlgorithm {
            get {
                XAttribute x = this.Attribute(integrityCheckAlgorithmXName);
                if ((x == null)) {
                    return integrityCheckAlgorithmDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(integrityCheckAlgorithmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ED", "urn:hl7-org:v3");
        
        static ED() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(referenceXName), new NamedContentModelEntity(thumbnailXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(referenceXName, typeof(TEL));
            localElementDictionary.Add(thumbnailXName, typeof(thumbnail));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                     A thumbnail is an abbreviated rendition of the full
    ///                     data. A thumbnail requires significantly fewer
    ///                     resources than the full data, while still maintaining
    ///                     some distinctive similarity with the full data. A
    ///                     thumbnail is typically used with by-reference
    ///                     encapsulated data. It allows a user to select data
    ///                     more efficiently before actually downloading through
    ///                     the reference.
    ///			
    /// </para>
    /// </summary>
    public partial class thumbnail : global::DocumentGenerator.Semd.Evacuation.Base.ED, IXMetaData {
        
		public static explicit operator thumbnail(XElement xe) { return XTypedServices.ToXTypedElement<thumbnail>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<thumbnail>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                     A thumbnail is an abbreviated rendition of the full
        ///                     data. A thumbnail requires significantly fewer
        ///                     resources than the full data, while still maintaining
        ///                     some distinctive similarity with the full data. A
        ///                     thumbnail is typically used with by-reference
        ///                     encapsulated data. It allows a user to select data
        ///                     more efficiently before actually downloading through
        ///                     the reference.
        ///			
        /// </para>
        /// </summary>
        public thumbnail() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("thumbnail", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The character string data type stands for text data,
    ///            primarily intended for machine processing (e.g.,
    ///            sorting, querying, indexing, etc.) Used for names,
    ///            symbols, and formal expressions.
    ///			
    /// </para>
    /// </summary>
    public sealed class st {
        
        private st() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Coded data in its simplest form, consists of a code.
    ///            The code system and code system version is fixed by 
    ///            the context in which the CS value occurs. CS is used
    ///            for coded attributes that have a single HL7-defined
    ///            value set.
    ///			
    /// </para>
    /// </summary>
    public sealed class cs {
        
        private cs() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[^\\s]+"}, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A concept descriptor represents any kind of concept usually
    ///            by giving a code defined in a code system.  A concept
    ///            descriptor can contain the original text or phrase that
    ///            served as the basis of the coding and one or more
    ///            translations into different coding systems. A concept
    ///            descriptor can also contain qualifiers to describe, e.g.,
    ///            the concept of a "left foot" as a postcoordinated term built
    ///            from the primary code "FOOT" and the qualifier "LEFT".
    ///            In exceptional cases, the concept descriptor need not
    ///            contain a code but only the original text describing
    ///            that concept.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (originalText?, qualifier*, translation*)
    /// </para>
    /// </summary>
    public partial class CD : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator CD(XElement xe) { return XTypedServices.ToXTypedElement<CD>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CD>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A concept descriptor represents any kind of concept usually
        ///            by giving a code defined in a code system.  A concept
        ///            descriptor can contain the original text or phrase that
        ///            served as the basis of the coding and one or more
        ///            translations into different coding systems. A concept
        ///            descriptor can also contain qualifiers to describe, e.g.,
        ///            the concept of a "left foot" as a postcoordinated term built
        ///            from the primary code "FOOT" and the qualifier "LEFT".
        ///            In exceptional cases, the concept descriptor need not
        ///            contain a code but only the original text describing
        ///            that concept.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public CD() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName originalTextXName = System.Xml.Linq.XName.Get("originalText", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The text or phrase used as the basis for the coding.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public virtual ED originalText {
            get {
                XElement x = this.GetElement(originalTextXName);
                if ((x == null)) {
                    return null;
                }
                return ((ED)(x));
            }
            set {
                this.SetElement(originalTextXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName qualifierXName = System.Xml.Linq.XName.Get("qualifier", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CR> qualifierField;
        
        /// <summary>
        /// <para>
        /// 
        ///                        Specifies additional codes that increase the
        ///                        specificity of the primary code.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public virtual IList<CR> qualifier {
            get {
                if ((this.qualifierField == null)) {
                    this.qualifierField = new XTypedList<CR>(this, LinqToXsdTypeManager.Instance, qualifierXName);
                }
                return this.qualifierField;
            }
            set {
                if ((value == null)) {
                    this.qualifierField = null;
                }
                else {
                    if ((this.qualifierField == null)) {
                        this.qualifierField = XTypedList<CR>.Initialize(this, LinqToXsdTypeManager.Instance, value, qualifierXName);
                    }
                    else {
                        XTypedServices.SetList<CR>(this.qualifierField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName translationXName = System.Xml.Linq.XName.Get("translation", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CD> translationField;
        
        /// <summary>
        /// <para>
        /// 
        ///                        A set of other concept descriptors that translate
        ///                        this concept descriptor into other code systems.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (originalText?, qualifier*, translation*)
        /// </para>
        /// </summary>
        public virtual IList<CD> translation {
            get {
                if ((this.translationField == null)) {
                    this.translationField = new XTypedList<CD>(this, LinqToXsdTypeManager.Instance, translationXName);
                }
                return this.translationField;
            }
            set {
                if ((value == null)) {
                    this.translationField = null;
                }
                else {
                    if ((this.translationField == null)) {
                        this.translationField = XTypedList<CD>.Initialize(this, LinqToXsdTypeManager.Instance, value, translationXName);
                    }
                    else {
                        XTypedServices.SetList<CD>(this.translationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The plain code symbol defined by the code system.
        ///                     For example, "784.0" is the code symbol of the ICD-9
        ///                     code "784.0" for headache.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies the code system that defines the code.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A common name of the coding system.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     If applicable, a version descriptor defined
        ///                     specifically for the given code system.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A name or title for the code, under which the sending
        ///                     system shows the code value to its users.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CD", "urn:hl7-org:v3");
        
        static CD() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName), new NamedContentModelEntity(qualifierXName), new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
            localElementDictionary.Add(qualifierXName, typeof(CR));
            localElementDictionary.Add(translationXName, typeof(CD));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Coded data, consists of a coded value (CV)
    ///            and, optionally, coded value(s) from other coding systems
    ///            that identify the same concept. Used when alternative
    ///            codes may exist.
    ///			
    /// </para>
    /// </summary>
    public partial class CE : global::DocumentGenerator.Semd.Evacuation.Base.CD, IXMetaData {
        
		public static explicit operator CE(XElement xe) { return XTypedServices.ToXTypedElement<CE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CE>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Coded data, consists of a coded value (CV)
        ///            and, optionally, coded value(s) from other coding systems
        ///            that identify the same concept. Used when alternative
        ///            codes may exist.
        ///			
        /// </para>
        /// </summary>
        public CE() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CE", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Coded data, consists of a code, display name, code system,
    ///            and original text. Used when a single code value must be sent.
    ///			
    /// </para>
    /// </summary>
    public partial class CV : global::DocumentGenerator.Semd.Evacuation.Base.CE, IXMetaData {
        
		public static explicit operator CV(XElement xe) { return XTypedServices.ToXTypedElement<CV>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CV>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Coded data, consists of a code, display name, code system,
        ///            and original text. Used when a single code value must be sent.
        ///			
        /// </para>
        /// </summary>
        public CV() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CV", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Coded data, where the domain from which the codeset comes
    ///            is ordered. The Coded Ordinal data type adds semantics
    ///            related to ordering so that models that make use of such
    ///            domains may introduce model elements that involve statements
    ///            about the order of the terms in a domain. 
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (originalText?)
    /// </para>
    /// </summary>
    public partial class CO : global::DocumentGenerator.Semd.Evacuation.Base.CV, IXMetaData {
        
		public static explicit operator CO(XElement xe) { return XTypedServices.ToXTypedElement<CO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CO>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Coded data, where the domain from which the codeset comes
        ///            is ordered. The Coded Ordinal data type adds semantics
        ///            related to ordering so that models that make use of such
        ///            domains may introduce model elements that involve statements
        ///            about the order of the terms in a domain. 
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (originalText?)
        /// </para>
        /// </summary>
        public CO() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CO", "urn:hl7-org:v3");
        
        static CO() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A concept qualifier code with optionally named role.
    ///            Both qualifier role and value codes must be defined by
    ///            the coding system.  For example, if SNOMED RT defines a
    ///            concept "leg", a role relation "has-laterality", and
    ///            another concept "left", the concept role relation allows
    ///            to add the qualifier "has-laterality: left" to a primary
    ///            code "leg" to construct the meaning "left leg".
    ///			
    /// </para>
    /// <para>
    /// 
    ///                        A value component is required or else the
    ///                        code role is NULL.
    ///							
    /// </para>
    /// <para>
    /// Regular expression: (name?, value?)
    /// </para>
    /// </summary>
    public partial class CR : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator CR(XElement xe) { return XTypedServices.ToXTypedElement<CR>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CR>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A concept qualifier code with optionally named role.
        ///            Both qualifier role and value codes must be defined by
        ///            the coding system.  For example, if SNOMED RT defines a
        ///            concept "leg", a role relation "has-laterality", and
        ///            another concept "left", the concept role relation allows
        ///            to add the qualifier "has-laterality: left" to a primary
        ///            code "leg" to construct the meaning "left leg".
        ///			
        /// </para>
        /// <para>
        /// 
        ///                        A value component is required or else the
        ///                        code role is NULL.
        ///							
        /// </para>
        /// <para>
        /// Regular expression: (name?, value?)
        /// </para>
        /// </summary>
        public CR() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        Specifies the manner in which the concept role value
        ///                        contributes to the meaning of a code phrase.  For
        ///                        example, if SNOMED RT defines a concept "leg", a role
        ///                        relation "has-laterality", and another concept "left",
        ///                        the concept role relation allows to add the qualifier
        ///                        "has-laterality: left" to a primary code "leg" to
        ///                        construct the meaning "left leg".  In this example
        ///                        "has-laterality" is the CR.name.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, value?)
        /// </para>
        /// </summary>
        public virtual CV name {
            get {
                XElement x = this.GetElement(nameXName);
                if ((x == null)) {
                    return null;
                }
                return ((CV)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The concept that modifies the primary code of a code
        ///                        phrase through the role relation.  For example, if
        ///                        SNOMED RT defines a concept "leg", a role relation
        ///                        "has-laterality", and another concept "left", the
        ///                        concept role relation allows adding the qualifier
        ///                        "has-laterality: left" to a primary code "leg" to
        ///                        construct the meaning "left leg".  In this example
        ///                        "left" is the CR.value.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (name?, value?)
        /// </para>
        /// </summary>
        public virtual CD value {
            get {
                XElement x = this.GetElement(valueXName);
                if ((x == null)) {
                    return null;
                }
                return ((CD)(x));
            }
            set {
                this.SetElement(valueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName invertedXName = System.Xml.Linq.XName.Get("inverted", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool invertedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Indicates if the sense of the role name is inverted.
        ///                     This can be used in cases where the underlying code
        ///                     system defines inversion but does not provide reciprocal
        ///                     pairs of role names. By default, inverted is false.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool inverted {
            get {
                XAttribute x = this.Attribute(invertedXName);
                if ((x == null)) {
                    return invertedDefaultValue;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(invertedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CR", "urn:hl7-org:v3");
        
        static CR() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName), new NamedContentModelEntity(valueXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(CV));
            localElementDictionary.Add(valueXName, typeof(CD));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A ST that optionally may have a code attached.
    ///            The text must always be present if a code is present. The
    ///            code is often a local code.
    ///			
    /// </para>
    /// </summary>
    public partial class SC : global::DocumentGenerator.Semd.Evacuation.Base.ST, IXMetaData {
        
		public static explicit operator SC(XElement xe) { return XTypedServices.ToXTypedElement<SC>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SC>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A ST that optionally may have a code attached.
        ///            The text must always be present if a code is present. The
        ///            code is often a local code.
        ///			
        /// </para>
        /// </summary>
        public SC() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The plain code symbol defined by the code system.
        ///                     For example, "784.0" is the code symbol of the ICD-9
        ///                     code "784.0" for headache.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies the code system that defines the code.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A common name of the coding system.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     If applicable, a version descriptor defined
        ///                     specifically for the given code system.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     A name or title for the code, under which the sending
        ///                     system shows the code value to its users.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SC", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A unique identifier string is a character string which
    ///            identifies an object in a globally unique and timeless
    ///            manner. The allowable formats and values and procedures
    ///            of this data type are strictly controlled by HL7. At this
    ///            time, user-assigned identifiers may be certain character
    ///            representations of ISO Object Identifiers (OID) and DCE
    ///            Universally Unique Identifiers (UUID). HL7 also reserves
    ///            the right to assign other forms of UIDs, such as mnemonic
    ///            identifiers for code systems.
    ///			
    /// </para>
    /// </summary>
    public sealed class uid {
        
        private uid() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    DocumentGenerator.Semd.Evacuation.Base.oid.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.uuid.TypeDefinition,
                    DocumentGenerator.Semd.Evacuation.Base.ruid.TypeDefinition});
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A globally unique string representing an ISO Object Identifier
    ///            (OID) in a form that consists only of non-negative numbers with
    ///            no leading zeros and dots (e.g., "2.16.840.1.113883.3.1").
    ///            According to ISO, OIDs are paths in a tree structure, with the
    ///            left-most number representing the root and the right-most number
    ///            representing a leaf.
    ///			
    /// </para>
    /// </summary>
    public sealed class oid {
        
        private oid() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[0-2](\\.(0|[1-9][0-9]*))*"}, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A DCE Universal Unique Identifier is a globally unique
    ///            string consisting of 5 groups of upper- or lower-case
    ///            hexadecimal digits having 8, 4, 4, 4, and 12 places
    ///            respectively. UUIDs are assigned using Ethernet MAC
    ///            addresses, the point in time of creation and some random
    ///            components. This mix is believed to generate sufficiently
    ///            unique identifiers without any organizational policy for
    ///            identifier assignment (in fact this piggy-backs on the
    ///            organization of MAC address assignment.)
    ///			
    /// </para>
    /// </summary>
    public sealed class uuid {
        
        private uuid() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12}"}, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            HL7 reserved identifiers are strings consisting only of
    ///            (US-ASCII) letters, digits and hyphens, where the first
    ///            character must be a letter. HL7 may assign these reserved
    ///            identifiers as mnemonic identifiers for major concepts of
    ///            interest to HL7.
    ///			
    /// </para>
    /// </summary>
    public sealed class ruid {
        
        private ruid() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[A-Za-z][A-Za-z0-9\\-]*"}, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A telecommunications address  specified according to
    ///            Internet standard RFC 1738
    ///            [http://www.ietf.org/rfc/rfc1738.txt]. The
    ///            URL specifies the protocol and the contact point defined
    ///            by that protocol for the resource.  Notable uses of the
    ///            telecommunication address data type are for telephone and
    ///            telefax numbers, e-mail addresses, Hypertext references,
    ///            FTP references, etc.
    ///			
    /// </para>
    /// </summary>
    public sealed class url {
        
        private url() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), null);
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A telecommunications address  specified according to
    ///            Internet standard RFC 1738
    ///            [http://www.ietf.org/rfc/rfc1738.txt]. The
    ///            URL specifies the protocol and the contact point defined
    ///            by that protocol for the resource.  Notable uses of the
    ///            telecommunication address data type are for telephone and
    ///            telefax numbers, e-mail addresses, Hypertext references,
    ///            FTP references, etc.
    ///			
    /// </para>
    /// </summary>
    public abstract partial class URL : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator URL(XElement xe) {  return (URL)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///            A telecommunications address  specified according to
        ///            Internet standard RFC 1738
        ///            [http://www.ietf.org/rfc/rfc1738.txt]. The
        ///            URL specifies the protocol and the contact point defined
        ///            by that protocol for the resource.  Notable uses of the
        ///            telecommunication address data type are for telephone and
        ///            telefax numbers, e-mail addresses, Hypertext references,
        ///            FTP references, etc.
        ///			
        /// </para>
        /// </summary>
        public URL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("URL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A quantity specifying a point on the axis of natural time.
    ///            A point in time is most often represented as a calendar
    ///            expression.
    ///			
    /// </para>
    /// </summary>
    public sealed class ts {
        
        private ts() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        @"[0-9]{4}|[0-9]{4}(0[0-9]|1[0-2])|[0-9]{4}(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])|([0-9]{4}(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])([0-1][0-9]|2[0-3])|[0-9]{4}(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])([0-1][0-9]|2[0-3])([0-5][0-9])|[0-9]{4}(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])([0-1][0-9]|2[0-3])([0-5][0-9])([0-5][0-9]))([+\-][0-9]{4})"}, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A quantity specifying a point on the axis of natural time.
    ///            A point in time is most often represented as a calendar
    ///            expression.
    ///			
    /// </para>
    /// <para>
    /// PQ
    /// </para>
    /// </summary>
    public partial class TS : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator TS(XElement xe) { return XTypedServices.ToXTypedElement<TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A quantity specifying a point on the axis of natural time.
        ///            A point in time is most often represented as a calendar
        ///            expression.
        ///			
        /// </para>
        /// <para>
        /// PQ
        /// </para>
        /// </summary>
        public TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TS", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A character string that may have a type-tag signifying its
    ///            role in the address. Typical parts that exist in about
    ///            every address are street, house number, or post box,
    ///            postal code, city, country but other roles may be defined
    ///            regionally, nationally, or on an enterprise level (e.g. in
    ///            military addresses). Addresses are usually broken up into
    ///            lines, which are indicated by special line-breaking
    ///            delimiter elements (e.g., DEL).
    ///			
    /// </para>
    /// </summary>
    public partial class ADXP : global::DocumentGenerator.Semd.Evacuation.Base.ST, IXMetaData {
        
		public static explicit operator ADXP(XElement xe) { return XTypedServices.ToXTypedElement<ADXP>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ADXP>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A character string that may have a type-tag signifying its
        ///            role in the address. Typical parts that exist in about
        ///            every address are street, house number, or post box,
        ///            postal code, city, country but other roles may be defined
        ///            regionally, nationally, or on an enterprise level (e.g. in
        ///            military addresses). Addresses are usually broken up into
        ///            lines, which are indicated by special line-breaking
        ///            delimiter elements (e.g., DEL).
        ///			
        /// </para>
        /// </summary>
        public ADXP() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName partTypeXName = System.Xml.Linq.XName.Get("partType", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Specifies whether an address part names the street,
        ///                     city, country, postal code, post box, etc. If the type
        ///                     is NULL the address part is unclassified and would
        ///                     simply appear on an address label as is.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object partType {
            get {
                XAttribute x = this.Attribute(partTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.AddressPartType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "partType", this, partTypeXName, global::DocumentGenerator.Semd.Evacuation.Base.AddressPartType.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ADXP", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A character string token representing a part of a name.
    ///            May have a type code signifying the role of the part in
    ///            the whole entity name, and a qualifier code for more detail
    ///            about the name part type. Typical name parts for person
    ///            names are given names, and family names, titles, etc.
    ///			
    /// </para>
    /// </summary>
    public partial class ENXP : global::DocumentGenerator.Semd.Evacuation.Base.ST, IXMetaData {
        
		public static explicit operator ENXP(XElement xe) { return XTypedServices.ToXTypedElement<ENXP>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ENXP>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A character string token representing a part of a name.
        ///            May have a type code signifying the role of the part in
        ///            the whole entity name, and a qualifier code for more detail
        ///            about the name part type. Typical name parts for person
        ///            names are given names, and family names, titles, etc.
        ///			
        /// </para>
        /// </summary>
        public ENXP() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName partTypeXName = System.Xml.Linq.XName.Get("partType", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     Indicates whether the name part is a given name, family
        ///                     name, prefix, suffix, etc.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object partType {
            get {
                XAttribute x = this.Attribute(partTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.EntityNamePartType.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "partType", this, partTypeXName, global::DocumentGenerator.Semd.Evacuation.Base.EntityNamePartType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName qualifierXName = System.Xml.Linq.XName.Get("qualifier", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The qualifier is a set of codes each of which specifies
        ///                     a certain subcategory of the name part in addition to
        ///                     the main name part type. For example, a given name may
        ///                     be flagged as a nickname, a family name may be a
        ///                     pseudonym or a name of public records.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<object> qualifier {
            get {
                XAttribute x = this.Attribute(qualifierXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetListAttribute(qualifierXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ENXP", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class endelimiter : global::DocumentGenerator.Semd.Evacuation.Base.ENXP, IXMetaData {
        
		public static explicit operator endelimiter(XElement xe) { return XTypedServices.ToXTypedElement<endelimiter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<endelimiter>(this);
        }
        
        public endelimiter() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("en.delimiter", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A name for a person. A sequence of name parts, such as
    ///            given name or family name, prefix, suffix, etc. PN differs
    ///            from EN because the qualifier type cannot include LS
    ///            (Legal Status).
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (family, given, Patronymic?)
    /// </para>
    /// </summary>
    public partial class PN : global::DocumentGenerator.Semd.Evacuation.Base.EN, IXMetaData {
        
		public static explicit operator PN(XElement xe) { return XTypedServices.ToXTypedElement<PN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PN>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A name for a person. A sequence of name parts, such as
        ///            given name or family name, prefix, suffix, etc. PN differs
        ///            from EN because the qualifier type cannot include LS
        ///            (Legal Status).
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (family, given, Patronymic?)
        /// </para>
        /// </summary>
        public PN() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PN", "urn:hl7-org:v3");
        
        static PN() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(familyXName), new NamedContentModelEntity(givenXName), new NamedContentModelEntity(PatronymicXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(familyXName, typeof(string));
            localElementDictionary.Add(givenXName, typeof(string));
            localElementDictionary.Add(PatronymicXName, typeof(urn.hl7.ru.identity.Patronymic));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The quantity data type is an abstract generalization
    ///            for all data types (1) whose value set has an order
    ///            relation (less-or-equal) and (2) where difference is
    ///            defined in all of the data type's totally ordered value
    ///            subsets.  The quantity type abstraction is needed in
    ///            defining certain other types, such as the interval and
    ///            the probability distribution.
    ///			
    /// </para>
    /// <para>
    /// QTY
    /// </para>
    /// </summary>
    public abstract partial class QTY : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator QTY(XElement xe) {  return (QTY)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///            The quantity data type is an abstract generalization
        ///            for all data types (1) whose value set has an order
        ///            relation (less-or-equal) and (2) where difference is
        ///            defined in all of the data type's totally ordered value
        ///            subsets.  The quantity type abstraction is needed in
        ///            defining certain other types, such as the interval and
        ///            the probability distribution.
        ///			
        /// </para>
        /// <para>
        /// QTY
        /// </para>
        /// </summary>
        public QTY() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QTY", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise
    ///            numbers that are results of counting and enumerating.
    ///            Integer numbers are discrete, the set of integers is
    ///            infinite but countable.  No arbitrary limit is imposed on
    ///            the range of integer numbers. Two NULL flavors are
    ///            defined for the positive and negative infinity.
    ///			
    /// </para>
    /// </summary>
    public sealed class @int {
        
        private @int() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null);
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise
    ///            numbers that are results of counting and enumerating.
    ///            Integer numbers are discrete, the set of integers is
    ///            infinite but countable.  No arbitrary limit is imposed on
    ///            the range of integer numbers. Two NULL flavors are
    ///            defined for the positive and negative infinity.
    ///			
    /// </para>
    /// <para>
    /// INT
    /// </para>
    /// </summary>
    public partial class INT : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator INT(XElement xe) { return XTypedServices.ToXTypedElement<INT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<INT>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise
        ///            numbers that are results of counting and enumerating.
        ///            Integer numbers are discrete, the set of integers is
        ///            infinite but countable.  No arbitrary limit is imposed on
        ///            the range of integer numbers. Two NULL flavors are
        ///            defined for the positive and negative infinity.
        ///			
        /// </para>
        /// <para>
        /// INT
        /// </para>
        /// </summary>
        public INT() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("INT", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Fractional numbers. Typically used whenever quantities
    ///            are measured, estimated, or computed from other real
    ///            numbers.  The typical representation is decimal, where
    ///            the number of significant decimal digits is known as the
    ///            precision. Real numbers are needed beyond integers
    ///            whenever quantities of the real world are measured,
    ///            estimated, or computed from other real numbers. The term
    ///            "Real number" in this specification is used to mean
    ///            that fractional values are covered without necessarily
    ///            implying the full set of the mathematical real numbers.
    ///			
    /// </para>
    /// </summary>
    public sealed class real {
        
        private real() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null)});
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            Fractional numbers. Typically used whenever quantities
    ///            are measured, estimated, or computed from other real
    ///            numbers.  The typical representation is decimal, where
    ///            the number of significant decimal digits is known as the
    ///            precision. Real numbers are needed beyond integers
    ///            whenever quantities of the real world are measured,
    ///            estimated, or computed from other real numbers. The term
    ///            "Real number" in this specification is used to mean
    ///            that fractional values are covered without necessarily
    ///            implying the full set of the mathematical real numbers.
    ///			
    /// </para>
    /// <para>
    /// REAL
    /// </para>
    /// </summary>
    public partial class REAL : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator REAL(XElement xe) { return XTypedServices.ToXTypedElement<REAL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<REAL>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            Fractional numbers. Typically used whenever quantities
        ///            are measured, estimated, or computed from other real
        ///            numbers.  The typical representation is decimal, where
        ///            the number of significant decimal digits is known as the
        ///            precision. Real numbers are needed beyond integers
        ///            whenever quantities of the real world are measured,
        ///            estimated, or computed from other real numbers. The term
        ///            "Real number" in this specification is used to mean
        ///            that fractional values are covered without necessarily
        ///            implying the full set of the mathematical real numbers.
        ///			
        /// </para>
        /// <para>
        /// REAL
        /// </para>
        /// </summary>
        public REAL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "value", this, valueXName, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("REAL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A representation of a physical quantity in a unit from
    ///            any code system. Used to show alternative representation
    ///            for a physical quantity.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (originalText?)
    /// </para>
    /// </summary>
    public partial class PQR : global::DocumentGenerator.Semd.Evacuation.Base.CV, IXMetaData {
        
		public static explicit operator PQR(XElement xe) { return XTypedServices.ToXTypedElement<PQR>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PQR>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A representation of a physical quantity in a unit from
        ///            any code system. Used to show alternative representation
        ///            for a physical quantity.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (originalText?)
        /// </para>
        /// </summary>
        public PQR() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The magnitude of the measurement value in terms of
        ///                     the unit specified in the code.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "value", this, valueXName, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PQR", "urn:hl7-org:v3");
        
        static PQR() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(originalTextXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(originalTextXName, typeof(ED));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A dimensioned quantity expressing the result of a
    ///            measurement act.
    ///			
    /// </para>
    /// <para>
    /// PQ
    /// </para>
    /// <para>
    /// Regular expression: (translation*)
    /// </para>
    /// </summary>
    public partial class PQ : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator PQ(XElement xe) { return XTypedServices.ToXTypedElement<PQ>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PQ>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A dimensioned quantity expressing the result of a
        ///            measurement act.
        ///			
        /// </para>
        /// <para>
        /// PQ
        /// </para>
        /// <para>
        /// Regular expression: (translation*)
        /// </para>
        /// </summary>
        public PQ() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName translationXName = System.Xml.Linq.XName.Get("translation", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PQR> translationField;
        
        /// <summary>
        /// <para>
        /// 
        ///                        An alternative representation of the same physical
        ///                        quantity expressed in a different unit, of a different
        ///                        unit code system and possibly with a different value.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (translation*)
        /// </para>
        /// </summary>
        public virtual IList<PQR> translation {
            get {
                if ((this.translationField == null)) {
                    this.translationField = new XTypedList<PQR>(this, LinqToXsdTypeManager.Instance, translationXName);
                }
                return this.translationField;
            }
            set {
                if ((value == null)) {
                    this.translationField = null;
                }
                else {
                    if ((this.translationField == null)) {
                        this.translationField = XTypedList<PQR>.Initialize(this, LinqToXsdTypeManager.Instance, value, translationXName);
                    }
                    else {
                        XTypedServices.SetList<PQR>(this.translationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The magnitude of the quantity measured in terms of
        ///                     the unit.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "value", this, valueXName, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string unitDefaultValue = "1";
        
        /// <summary>
        /// <para>
        /// 
        ///                     The unit of measure specified in the Unified Code for
        ///                     Units of Measure (UCUM)
        ///                     [http://aurora.rg.iupui.edu/UCUM].
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unit {
            get {
                XAttribute x = this.Attribute(unitXName);
                if ((x == null)) {
                    return unitDefaultValue;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PQ", "urn:hl7-org:v3");
        
        static PQ() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(translationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(translationXName, typeof(PQR));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A monetary amount is a quantity expressing the amount of
    ///            money in some currency. Currencies are the units in which
    ///            monetary amounts are denominated in different economic
    ///            regions. While the monetary amount is a single kind of
    ///            quantity (money) the exchange rates between the different
    ///            units are variable.  This is the principle difference
    ///            between physical quantity and monetary amounts, and the
    ///            reason why currency units are not physical units.
    ///			
    /// </para>
    /// <para>
    /// MO
    /// </para>
    /// </summary>
    public partial class MO : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator MO(XElement xe) { return XTypedServices.ToXTypedElement<MO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MO>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A monetary amount is a quantity expressing the amount of
        ///            money in some currency. Currencies are the units in which
        ///            monetary amounts are denominated in different economic
        ///            regions. While the monetary amount is a single kind of
        ///            quantity (money) the exchange rates between the different
        ///            units are variable.  This is the principle difference
        ///            between physical quantity and monetary amounts, and the
        ///            reason why currency units are not physical units.
        ///			
        /// </para>
        /// <para>
        /// MO
        /// </para>
        /// </summary>
        public MO() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The magnitude of the monetary amount in terms of the
        ///                     currency unit.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object value {
            get {
                XAttribute x = this.Attribute(valueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "value", this, valueXName, global::DocumentGenerator.Semd.Evacuation.Base.real.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName currencyXName = System.Xml.Linq.XName.Get("currency", "");
        
        /// <summary>
        /// <para>
        /// 
        ///                     The currency unit as defined in ISO 4217.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string currency {
            get {
                XAttribute x = this.Attribute(currencyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(currencyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MO", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            A quantity constructed as the quotient of a numerator
    ///            quantity divided by a denominator quantity. Common
    ///            factors in the numerator and denominator are not
    ///            automatically cancelled out.  RTO supports titers
    ///            (e.g., "1:128") and other quantities produced by
    ///            laboratories that truly represent ratios. Ratios are
    ///            not simply "structured numerics", particularly blood
    ///            pressure measurements (e.g. "120/60") are not ratios.
    ///            In many cases REAL should be used instead
    ///            of RTO.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (numerator, denominator)
    /// </para>
    /// </summary>
    public partial class RTO : global::DocumentGenerator.Semd.Evacuation.Base.RTO_QTY_QTY, IXMetaData {
        
		public static explicit operator RTO(XElement xe) { return XTypedServices.ToXTypedElement<RTO>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RTO>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            A quantity constructed as the quotient of a numerator
        ///            quantity divided by a denominator quantity. Common
        ///            factors in the numerator and denominator are not
        ///            automatically cancelled out.  RTO supports titers
        ///            (e.g., "1:128") and other quantities produced by
        ///            laboratories that truly represent ratios. Ratios are
        ///            not simply "structured numerics", particularly blood
        ///            pressure measurements (e.g. "120/60") are not ratios.
        ///            In many cases REAL should be used instead
        ///            of RTO.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public RTO() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTO", "urn:hl7-org:v3");
        
        static RTO() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(numeratorXName), new NamedContentModelEntity(denominatorXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(numeratorXName, typeof(QTY));
            localElementDictionary.Add(denominatorXName, typeof(QTY));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///               The probability assigned to the value, a decimal number
    ///               between 0 (very uncertain) and 1 (certain).
    ///			
    /// </para>
    /// </summary>
    public sealed class probability {
        
        private probability() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1D, 0, null, 0D, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                        A code for a common (periodical) activity of daily
    ///                        living based on which the event related periodic
    ///                        interval is specified.
    ///			
    /// </para>
    /// </summary>
    public partial class EIVLevent : global::DocumentGenerator.Semd.Evacuation.Base.CE, IXMetaData {
        
		public static explicit operator EIVLevent(XElement xe) { return XTypedServices.ToXTypedElement<EIVLevent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EIVLevent>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                        A code for a common (periodical) activity of daily
        ///                        living based on which the event related periodic
        ///                        interval is specified.
        ///			
        /// </para>
        /// </summary>
        public EIVLevent() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EIVL.event", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class SXCM_TS : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
        
		public static explicit operator SXCM_TS(XElement xe) { return XTypedServices.ToXTypedElement<SXCM_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SXCM_TS>(this);
        }
        
        public SXCM_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName @operatorXName = System.Xml.Linq.XName.Get("operator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static DocumentGenerator.Semd.Evacuation.Base.SetOperator @operatorDefaultValue = DocumentGenerator.Semd.Evacuation.Base.SetOperator.I;
        
        /// <summary>
        /// <para>
        /// 
        ///                     A code specifying whether the set component is included
        ///                     (union) or excluded (set-difference) from the set, or
        ///                     other set operations with the current set component and
        ///                     the set as constructed from the representation stream
        ///                     up to the current point.
        ///						
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.SetOperator @operator {
            get {
                XAttribute x = this.Attribute(@operatorXName);
                if ((x == null)) {
                    return @operatorDefaultValue;
                }
                return ((DocumentGenerator.Semd.Evacuation.Base.SetOperator)(Enum.Parse(typeof(DocumentGenerator.Semd.Evacuation.Base.SetOperator), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(@operatorXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SXCM_TS", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class set_TelecommunicationAddressUse {
        
        private set_TelecommunicationAddressUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, DocumentGenerator.Semd.Evacuation.Base.TelecommunicationAddressUse.TypeDefinition);
    }
    
    public sealed class set_PostalAddressUse {
        
        private set_PostalAddressUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, DocumentGenerator.Semd.Evacuation.Base.PostalAddressUse.TypeDefinition);
    }
    
    public sealed class set_EntityNamePartQualifier {
        
        private set_EntityNamePartQualifier() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, DocumentGenerator.Semd.Evacuation.Base.EntityNamePartQualifier.TypeDefinition);
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
    /// </para>
    /// </summary>
    public partial class IVL_TS : global::DocumentGenerator.Semd.Evacuation.Base.SXCM_TS, IXMetaData {
        
		public static explicit operator IVL_TS(XElement xe) { return XTypedServices.ToXTypedElement<IVL_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_TS>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public IVL_TS() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The low limit of the interval.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IVXB_TS low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((IVXB_TS)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PQ> widthField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The difference between high and low boundary. The
        ///                           purpose of distinguishing a width property is to
        ///                           handle all cases of incomplete information
        ///                           symmetrically. In any interval representation only
        ///                           two of the three properties high, low, and width need
        ///                           to be stated and the third can be derived.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<PQ> width {
            get {
                if ((this.widthField == null)) {
                    this.widthField = new XTypedList<PQ>(this, LinqToXsdTypeManager.Instance, widthXName);
                }
                return this.widthField;
            }
            set {
                if ((value == null)) {
                    this.widthField = null;
                }
                else {
                    if ((this.widthField == null)) {
                        this.widthField = XTypedList<PQ>.Initialize(this, LinqToXsdTypeManager.Instance, value, widthXName);
                    }
                    else {
                        XTypedServices.SetList<PQ>(this.widthField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IVXB_TS> highField;
        
        /// <summary>
        /// <para>
        /// 
        ///                           The high limit of the interval.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual IList<IVXB_TS> high {
            get {
                if ((this.highField == null)) {
                    this.highField = new XTypedList<IVXB_TS>(this, LinqToXsdTypeManager.Instance, highXName);
                }
                return this.highField;
            }
            set {
                if ((value == null)) {
                    this.highField = null;
                }
                else {
                    if ((this.highField == null)) {
                        this.highField = XTypedList<IVXB_TS>.Initialize(this, LinqToXsdTypeManager.Instance, value, highXName);
                    }
                    else {
                        XTypedServices.SetList<IVXB_TS>(this.highField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName centerXName = System.Xml.Linq.XName.Get("center", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                           The arithmetic mean of the interval (low plus high
        ///                           divided by 2). The purpose of distinguishing the center
        ///                           as a semantic property is for conversions of intervals
        ///                           from and to point values.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, (width? | high?)?)|high | (width, high?)|(center, width?))?
        /// </para>
        /// </summary>
        public virtual TS center {
            get {
                XElement x = this.GetElement(centerXName);
                return ((TS)(x));
            }
            set {
                this.SetElement(centerXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_TS", "urn:hl7-org:v3");
        
        static IVL_TS() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new ChoiceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName))), new NamedContentModelEntity(highXName), new SequenceContentModelEntity(new NamedContentModelEntity(widthXName), new NamedContentModelEntity(highXName)), new SequenceContentModelEntity(new NamedContentModelEntity(centerXName), new NamedContentModelEntity(widthXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(IVXB_TS));
            localElementDictionary.Add(widthXName, typeof(PQ));
            localElementDictionary.Add(highXName, typeof(IVXB_TS));
            localElementDictionary.Add(centerXName, typeof(TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class IVXB_TS : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
        
		public static explicit operator IVXB_TS(XElement xe) { return XTypedServices.ToXTypedElement<IVXB_TS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVXB_TS>(this);
        }
        
        public IVXB_TS() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVXB_TS", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class set_EntityNameUse {
        
        private set_EntityNameUse() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, DocumentGenerator.Semd.Evacuation.Base.EntityNameUse.TypeDefinition);
    }
    
    /// <summary>
    /// <para>
    /// RTO_QTY_QTY
    /// </para>
    /// <para>
    /// Regular expression: (numerator, denominator)
    /// </para>
    /// </summary>
    public partial class RTO_QTY_QTY : global::DocumentGenerator.Semd.Evacuation.Base.QTY, IXMetaData {
        
		public static explicit operator RTO_QTY_QTY(XElement xe) { return XTypedServices.ToXTypedElement<RTO_QTY_QTY>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RTO_QTY_QTY>(this);
        }
        
        /// <summary>
        /// <para>
        /// RTO_QTY_QTY
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public RTO_QTY_QTY() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName numeratorXName = System.Xml.Linq.XName.Get("numerator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that is being divided in the ratio.  The
        ///                        default is the integer number 1 (one).
        ///							
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual QTY numerator {
            get {
                XElement x = this.GetElement(numeratorXName);
                return ((QTY)(x));
            }
            set {
                this.SetElement(numeratorXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName denominatorXName = System.Xml.Linq.XName.Get("denominator", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// 
        ///                        The quantity that devides the numerator in the ratio.
        ///                        The default is the integer number 1 (one).
        ///                        The denominator must not be zero.
        ///							
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (numerator, denominator)
        /// </para>
        /// </summary>
        public virtual QTY denominator {
            get {
                XElement x = this.GetElement(denominatorXName);
                return ((QTY)(x));
            }
            set {
                this.SetElement(denominatorXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RTO_QTY_QTY", "urn:hl7-org:v3");
        
        static RTO_QTY_QTY() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(numeratorXName), new NamedContentModelEntity(denominatorXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(numeratorXName, typeof(QTY));
            localElementDictionary.Add(denominatorXName, typeof(QTY));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class CE_non_elements : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator CE_non_elements(XElement xe) { return XTypedServices.ToXTypedElement<CE_non_elements>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CE_non_elements>(this);
        }
        
        public CE_non_elements() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemXName = System.Xml.Linq.XName.Get("codeSystem", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object codeSystem {
            get {
                XAttribute x = this.Attribute(codeSystemXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "codeSystem", this, codeSystemXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemNameXName = System.Xml.Linq.XName.Get("codeSystemName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemName {
            get {
                XAttribute x = this.Attribute(codeSystemNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeSystemVersionXName = System.Xml.Linq.XName.Get("codeSystemVersion", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string codeSystemVersion {
            get {
                XAttribute x = this.Attribute(codeSystemVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeSystemVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayNameXName = System.Xml.Linq.XName.Get("displayName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string displayName {
            get {
                XAttribute x = this.Attribute(displayNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(displayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CE_non_elements", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name)
    /// </para>
    /// </summary>
    public partial class POCD_MT000040Person : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040Person(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040Person>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040Person>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public POCD_MT000040Person() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public virtual PN name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((PN)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.Person", "urn:hl7-org:v3");
        
        static POCD_MT000040Person() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(PN));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (id, name, telecom*, addr?)
    /// </para>
    /// </summary>
    public partial class POCD_MT000040Organization : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040Organization(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040Organization>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040Organization>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public POCD_MT000040Organization() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// уникальный идентификатор медицинской организации по ФРМО
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual II_id_org_non_NF id {
            get {
                XElement x = this.GetElement(idXName);
                return ((II_id_org_non_NF)(x));
            }
            set {
                this.SetElement(idXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// наименование медицинской организации
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XElement x = this.GetElement(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(nameXName, value, "name", global::DocumentGenerator.Semd.Evacuation.Base.ON.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName telecomXName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization.telecomLocalType> telecomField;
        
        /// <summary>
        /// <para>
        /// контакты медицинской организации
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual IList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization.telecomLocalType> telecom {
            get {
                if ((this.telecomField == null)) {
                    this.telecomField = new XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization.telecomLocalType>(this, LinqToXsdTypeManager.Instance, telecomXName);
                }
                return this.telecomField;
            }
            set {
                if ((value == null)) {
                    this.telecomField = null;
                }
                else {
                    if ((this.telecomField == null)) {
                        this.telecomField = XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization.telecomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, telecomXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization.telecomLocalType>(this.telecomField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName addrXName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// адрес медицинской организации
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (id, name, telecom*, addr?)
        /// </para>
        /// </summary>
        public virtual addrLocalType addr {
            get {
                XElement x = this.GetElement(addrXName);
                if ((x == null)) {
                    return null;
                }
                return ((addrLocalType)(x));
            }
            set {
                this.SetElement(addrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string classCodeFixedValue = "ORG";
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object classCode {
            get {
                return classCodeFixedValue;
            }
            set {
                if (classCodeFixedValue.Equals(value)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, classCodeFixedValue);
                }
                this.SetUnionAttribute(value, "classCode", this, classCodeXName, global::DocumentGenerator.Semd.Evacuation.Base.EntityClassOrganization.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.Organization", "urn:hl7-org:v3");
        
        static POCD_MT000040Organization() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(idXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(telecomXName), new NamedContentModelEntity(addrXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(idXName, typeof(II_id_org_non_NF));
            localElementDictionary.Add(nameXName, typeof(string));
            localElementDictionary.Add(telecomXName, typeof(telecomLocalType));
            localElementDictionary.Add(addrXName, typeof(addrLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class telecomLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TEL, IXMetaData {
            
		public static explicit operator telecomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<telecomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<telecomLocalType>(this);
            }
            
            public telecomLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
        /// </para>
        /// </summary>
        public partial class addrLocalType : XTypedElement, IXMetaData {
            
		public static explicit operator addrLocalType(XElement xe) { return XTypedServices.ToXTypedElement<addrLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<addrLocalType>(this);
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public addrLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName streetAddressLineXName = System.Xml.Linq.XName.Get("streetAddressLine", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// адрес текстом
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual string streetAddressLine {
                get {
                    XElement x = this.GetElement(streetAddressLineXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(streetAddressLineXName, value, "streetAddressLine", global::DocumentGenerator.Semd.Evacuation.Base.adxpstreetAddressLine.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName stateCodeXName = System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address");
            
            /// <summary>
            /// <para>
            /// код субъекта РФ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual urn.hl7.ru.address.stateCode stateCode {
                get {
                    XElement x = this.GetElement(stateCodeXName);
                    return ((urn.hl7.ru.address.stateCode)(x));
                }
                set {
                    this.SetElement(stateCodeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName postalCodeXName = System.Xml.Linq.XName.Get("postalCode", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// почтовый индекс
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual adxppostalCode postalCode {
                get {
                    XElement x = this.GetElement(postalCodeXName);
                    return ((adxppostalCode)(x));
                }
                set {
                    this.SetElement(postalCodeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName AddressXName = System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias");
            
            /// <summary>
            /// <para>
            /// коды адреса по ФИАС
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual urn.hl7.ru.fias.Address Address {
                get {
                    XElement x = this.GetElement(AddressXName);
                    return ((urn.hl7.ru.fias.Address)(x));
                }
                set {
                    this.SetElement(AddressXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual IList<object> use {
                get {
                    XAttribute x = this.Attribute(useXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
            
            static addrLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(streetAddressLineXName), new NamedContentModelEntity(stateCodeXName), new NamedContentModelEntity(postalCodeXName), new NamedContentModelEntity(AddressXName)));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(streetAddressLineXName, typeof(string));
                localElementDictionary.Add(stateCodeXName, typeof(urn.hl7.ru.address.stateCode));
                localElementDictionary.Add(postalCodeXName, typeof(adxppostalCode));
                localElementDictionary.Add(AddressXName, typeof(urn.hl7.ru.fias.Address));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    public partial class POCD_MT000040code_profession : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator POCD_MT000040code_profession(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040code_profession>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040code_profession>(this);
        }
        
        public POCD_MT000040code_profession() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.code_profession", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class POCD_MT000040time : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
        
		public static explicit operator POCD_MT000040time(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040time>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040time>(this);
        }
        
        public POCD_MT000040time() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.time", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class II_id : global::DocumentGenerator.Semd.Evacuation.Base.II, IXMetaData {
        
		public static explicit operator II_id(XElement xe) { return XTypedServices.ToXTypedElement<II_id>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<II_id>(this);
        }
        
        public II_id() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("II_id", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class II_id_patient : global::DocumentGenerator.Semd.Evacuation.Base.II, IXMetaData {
        
		public static explicit operator II_id_patient(XElement xe) { return XTypedServices.ToXTypedElement<II_id_patient>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<II_id_patient>(this);
        }
        
        public II_id_patient() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("II_id_patient", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class CD_addressStateCode : global::DocumentGenerator.Semd.Evacuation.Base.CD, IXMetaData {
        
		public static explicit operator CD_addressStateCode(XElement xe) { return XTypedServices.ToXTypedElement<CD_addressStateCode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CD_addressStateCode>(this);
        }
        
        public CD_addressStateCode() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CD_addressStateCode", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class II_id_org_non_NF : global::DocumentGenerator.Semd.Evacuation.Base.II, IXMetaData {
        
		public static explicit operator II_id_org_non_NF(XElement xe) { return XTypedServices.ToXTypedElement<II_id_org_non_NF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<II_id_org_non_NF>(this);
        }
        
        public II_id_org_non_NF() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("II_id_org_non_NF", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class ST_non_NF : global::DocumentGenerator.Semd.Evacuation.Base.ST, IXMetaData {
        
		public static explicit operator ST_non_NF(XElement xe) { return XTypedServices.ToXTypedElement<ST_non_NF>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ST_non_NF>(this);
        }
        
        public ST_non_NF() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ST_non_NF", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class II_id_org : global::DocumentGenerator.Semd.Evacuation.Base.II, IXMetaData {
        
		public static explicit operator II_id_org(XElement xe) { return XTypedServices.ToXTypedElement<II_id_org>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<II_id_org>(this);
        }
        
        public II_id_org() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("II_id_org", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (low, high?)
    /// </para>
    /// </summary>
    public partial class IVL_TS_1 : XTypedElement, IXMetaData {
        
		public static explicit operator IVL_TS_1(XElement xe) { return XTypedServices.ToXTypedElement<IVL_TS_1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IVL_TS_1>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (low, high?)
        /// </para>
        /// </summary>
        public IVL_TS_1() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// дата и время начала
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (low, high?)
        /// </para>
        /// </summary>
        public virtual lowLocalType low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((lowLocalType)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// дата и время окончания
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (low, high?)
        /// </para>
        /// </summary>
        public virtual highLocalType high {
            get {
                XElement x = this.GetElement(highXName);
                if ((x == null)) {
                    return null;
                }
                return ((highLocalType)(x));
            }
            set {
                this.SetElement(highXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IVL_TS_1", "urn:hl7-org:v3");
        
        static IVL_TS_1() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new NamedContentModelEntity(highXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(lowLocalType));
            localElementDictionary.Add(highXName, typeof(highLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class lowLocalType : global::DocumentGenerator.Semd.Evacuation.Base.IVXB_TS, IXMetaData {
            
		public static explicit operator lowLocalType(XElement xe) { return XTypedServices.ToXTypedElement<lowLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<lowLocalType>(this);
            }
            
            public lowLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("low", "urn:hl7-org:v3");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        public partial class highLocalType : global::DocumentGenerator.Semd.Evacuation.Base.IVXB_TS, IXMetaData {
            
		public static explicit operator highLocalType(XElement xe) { return XTypedServices.ToXTypedElement<highLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<highLocalType>(this);
            }
            
            public highLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("high", "urn:hl7-org:v3");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
    /// </para>
    /// </summary>
    public partial class POCD_MT000040AssignedEntity : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040AssignedEntity(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040AssignedEntity>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040AssignedEntity>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public POCD_MT000040AssignedEntity() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<II_id> idField;
        
        /// <summary>
        /// <para>
        /// уникальный идентификатор исполнителя
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual IList<II_id> id {
            get {
                if ((this.idField == null)) {
                    this.idField = new XTypedList<II_id>(this, LinqToXsdTypeManager.Instance, idXName);
                }
                return this.idField;
            }
            set {
                if ((value == null)) {
                    this.idField = null;
                }
                else {
                    if ((this.idField == null)) {
                        this.idField = XTypedList<II_id>.Initialize(this, LinqToXsdTypeManager.Instance, value, idXName);
                    }
                    else {
                        XTypedServices.SetList<II_id>(this.idField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// код должности исполнителя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual POCD_MT000040code_profession code {
            get {
                XElement x = this.GetElement(codeXName);
                return ((POCD_MT000040code_profession)(x));
            }
            set {
                this.SetElement(codeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName addrXName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// адрес исполнителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual addrLocalType addr {
            get {
                XElement x = this.GetElement(addrXName);
                if ((x == null)) {
                    return null;
                }
                return ((addrLocalType)(x));
            }
            set {
                this.SetElement(addrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName telecomXName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.telecomLocalType> telecomField;
        
        /// <summary>
        /// <para>
        /// контакты исполнителя
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual IList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.telecomLocalType> telecom {
            get {
                if ((this.telecomField == null)) {
                    this.telecomField = new XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.telecomLocalType>(this, LinqToXsdTypeManager.Instance, telecomXName);
                }
                return this.telecomField;
            }
            set {
                if ((value == null)) {
                    this.telecomField = null;
                }
                else {
                    if ((this.telecomField == null)) {
                        this.telecomField = XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.telecomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, telecomXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.telecomLocalType>(this.telecomField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName assignedPersonXName = System.Xml.Linq.XName.Get("assignedPerson", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// ФИО исполнителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual POCD_MT000040Person assignedPerson {
            get {
                XElement x = this.GetElement(assignedPersonXName);
                if ((x == null)) {
                    return null;
                }
                return ((POCD_MT000040Person)(x));
            }
            set {
                this.SetElement(assignedPersonXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName representedOrganizationXName = System.Xml.Linq.XName.Get("representedOrganization", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// место работы исполнителя
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (id+, code, addr?, telecom*, assignedPerson?, representedOrganization?)
        /// </para>
        /// </summary>
        public virtual representedOrganizationLocalType representedOrganization {
            get {
                XElement x = this.GetElement(representedOrganizationXName);
                if ((x == null)) {
                    return null;
                }
                return ((representedOrganizationLocalType)(x));
            }
            set {
                this.SetElement(representedOrganizationXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.AssignedEntity", "urn:hl7-org:v3");
        
        static POCD_MT000040AssignedEntity() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(idXName), new NamedContentModelEntity(codeXName), new NamedContentModelEntity(addrXName), new NamedContentModelEntity(telecomXName), new NamedContentModelEntity(assignedPersonXName), new NamedContentModelEntity(representedOrganizationXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(idXName, typeof(II_id));
            localElementDictionary.Add(codeXName, typeof(POCD_MT000040code_profession));
            localElementDictionary.Add(addrXName, typeof(addrLocalType));
            localElementDictionary.Add(telecomXName, typeof(telecomLocalType));
            localElementDictionary.Add(assignedPersonXName, typeof(POCD_MT000040Person));
            localElementDictionary.Add(representedOrganizationXName, typeof(representedOrganizationLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
        /// </para>
        /// </summary>
        public partial class addrLocalType : XTypedElement, IXMetaData {
            
		public static explicit operator addrLocalType(XElement xe) { return XTypedServices.ToXTypedElement<addrLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<addrLocalType>(this);
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public addrLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName streetAddressLineXName = System.Xml.Linq.XName.Get("streetAddressLine", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// адрес текстом
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual string streetAddressLine {
                get {
                    XElement x = this.GetElement(streetAddressLineXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(streetAddressLineXName, value, "streetAddressLine", global::DocumentGenerator.Semd.Evacuation.Base.adxpstreetAddressLine.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName stateCodeXName = System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address");
            
            /// <summary>
            /// <para>
            /// код субъекта РФ
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual urn.hl7.ru.address.stateCode stateCode {
                get {
                    XElement x = this.GetElement(stateCodeXName);
                    return ((urn.hl7.ru.address.stateCode)(x));
                }
                set {
                    this.SetElement(stateCodeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName postalCodeXName = System.Xml.Linq.XName.Get("postalCode", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// почтовый индекс
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual adxppostalCode postalCode {
                get {
                    XElement x = this.GetElement(postalCodeXName);
                    return ((adxppostalCode)(x));
                }
                set {
                    this.SetElement(postalCodeXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName AddressXName = System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias");
            
            /// <summary>
            /// <para>
            /// коды адреса по ФИАС
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public virtual urn.hl7.ru.fias.Address Address {
                get {
                    XElement x = this.GetElement(AddressXName);
                    return ((urn.hl7.ru.fias.Address)(x));
                }
                set {
                    this.SetElement(AddressXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual IList<object> use {
                get {
                    XAttribute x = this.Attribute(useXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
            
            static addrLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(streetAddressLineXName), new NamedContentModelEntity(stateCodeXName), new NamedContentModelEntity(postalCodeXName), new NamedContentModelEntity(AddressXName)));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(streetAddressLineXName, typeof(string));
                localElementDictionary.Add(stateCodeXName, typeof(urn.hl7.ru.address.stateCode));
                localElementDictionary.Add(postalCodeXName, typeof(adxppostalCode));
                localElementDictionary.Add(AddressXName, typeof(urn.hl7.ru.fias.Address));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        public partial class telecomLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TEL, IXMetaData {
            
		public static explicit operator telecomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<telecomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<telecomLocalType>(this);
            }
            
            public telecomLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((id, name, telecom*, addr?))?
        /// </para>
        /// </summary>
        public partial class representedOrganizationLocalType : XTypedElement, IXMetaData {
            
		public static explicit operator representedOrganizationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<representedOrganizationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<representedOrganizationLocalType>(this);
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((id, name, telecom*, addr?))?
            /// </para>
            /// </summary>
            public representedOrganizationLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// уникальный идентификатор медицинской организации по ФРМО
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((id, name, telecom*, addr?))?
            /// </para>
            /// </summary>
            public virtual II_id_org_non_NF id {
                get {
                    XElement x = this.GetElement(idXName);
                    return ((II_id_org_non_NF)(x));
                }
                set {
                    this.SetElement(idXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// наименование медицинской организации
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((id, name, telecom*, addr?))?
            /// </para>
            /// </summary>
            public virtual string name {
                get {
                    XElement x = this.GetElement(nameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(nameXName, value, "name", global::DocumentGenerator.Semd.Evacuation.Base.ON.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName telecomXName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.representedOrganizationLocalType.telecomLocalType> telecomField;
            
            /// <summary>
            /// <para>
            /// контакты медицинской организации
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((id, name, telecom*, addr?))?
            /// </para>
            /// </summary>
            public virtual IList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.representedOrganizationLocalType.telecomLocalType> telecom {
                get {
                    if ((this.telecomField == null)) {
                        this.telecomField = new XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.representedOrganizationLocalType.telecomLocalType>(this, LinqToXsdTypeManager.Instance, telecomXName);
                    }
                    return this.telecomField;
                }
                set {
                    if ((value == null)) {
                        this.telecomField = null;
                    }
                    else {
                        if ((this.telecomField == null)) {
                            this.telecomField = XTypedList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.representedOrganizationLocalType.telecomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, telecomXName);
                        }
                        else {
                            XTypedServices.SetList<DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity.representedOrganizationLocalType.telecomLocalType>(this.telecomField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName addrXName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
            
            /// <summary>
            /// <para>
            /// адрес медицинской организации
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((id, name, telecom*, addr?))?
            /// </para>
            /// </summary>
            public virtual addrLocalType addr {
                get {
                    XElement x = this.GetElement(addrXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((addrLocalType)(x));
                }
                set {
                    this.SetElement(addrXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName classCodeXName = System.Xml.Linq.XName.Get("classCode", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static string classCodeFixedValue = "ORG";
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual object classCode {
                get {
                    return classCodeFixedValue;
                }
                set {
                    if (classCodeFixedValue.Equals(value)) {
                    }
                    else {
                        throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, classCodeFixedValue);
                    }
                    this.SetUnionAttribute(value, "classCode", this, classCodeXName, global::DocumentGenerator.Semd.Evacuation.Base.EntityClassOrganization.TypeDefinition);
                }
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("representedOrganization", "urn:hl7-org:v3");
            
            static representedOrganizationLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(idXName), new NamedContentModelEntity(nameXName), new NamedContentModelEntity(telecomXName), new NamedContentModelEntity(addrXName)));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(idXName, typeof(II_id_org_non_NF));
                localElementDictionary.Add(nameXName, typeof(string));
                localElementDictionary.Add(telecomXName, typeof(telecomLocalType));
                localElementDictionary.Add(addrXName, typeof(addrLocalType));
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public partial class telecomLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TEL, IXMetaData {
                
		public static explicit operator telecomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<telecomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<telecomLocalType>(this);
                }
                
                public telecomLocalType() {
                }
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("telecom", "urn:hl7-org:v3");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
            /// </para>
            /// </summary>
            public partial class addrLocalType : XTypedElement, IXMetaData {
                
		public static explicit operator addrLocalType(XElement xe) { return XTypedServices.ToXTypedElement<addrLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<addrLocalType>(this);
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
                /// </para>
                /// </summary>
                public addrLocalType() {
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                protected internal static readonly System.Xml.Linq.XName streetAddressLineXName = System.Xml.Linq.XName.Get("streetAddressLine", "urn:hl7-org:v3");
                
                /// <summary>
                /// <para>
                /// адрес текстом
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
                /// </para>
                /// </summary>
                public virtual string streetAddressLine {
                    get {
                        XElement x = this.GetElement(streetAddressLineXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(streetAddressLineXName, value, "streetAddressLine", global::DocumentGenerator.Semd.Evacuation.Base.adxpstreetAddressLine.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                protected internal static readonly System.Xml.Linq.XName stateCodeXName = System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address");
                
                /// <summary>
                /// <para>
                /// код субъекта РФ
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
                /// </para>
                /// </summary>
                public virtual urn.hl7.ru.address.stateCode stateCode {
                    get {
                        XElement x = this.GetElement(stateCodeXName);
                        return ((urn.hl7.ru.address.stateCode)(x));
                    }
                    set {
                        this.SetElement(stateCodeXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                protected internal static readonly System.Xml.Linq.XName postalCodeXName = System.Xml.Linq.XName.Get("postalCode", "urn:hl7-org:v3");
                
                /// <summary>
                /// <para>
                /// почтовый индекс
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
                /// </para>
                /// </summary>
                public virtual adxppostalCode postalCode {
                    get {
                        XElement x = this.GetElement(postalCodeXName);
                        return ((adxppostalCode)(x));
                    }
                    set {
                        this.SetElement(postalCodeXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                protected internal static readonly System.Xml.Linq.XName AddressXName = System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias");
                
                /// <summary>
                /// <para>
                /// коды адреса по ФИАС
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Setter: Appends
                /// </para>
                /// <para>
                /// Regular expression: ((streetAddressLine, stateCode, postalCode, Address))?
                /// </para>
                /// </summary>
                public virtual urn.hl7.ru.fias.Address Address {
                    get {
                        XElement x = this.GetElement(AddressXName);
                        return ((urn.hl7.ru.fias.Address)(x));
                    }
                    set {
                        this.SetElement(AddressXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual IList<object> use {
                    get {
                        XAttribute x = this.Attribute(useXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                    }
                    set {
                        this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                    }
                }
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("addr", "urn:hl7-org:v3");
                
                static addrLocalType() {
                    BuildElementDictionary();
                    contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(streetAddressLineXName), new NamedContentModelEntity(stateCodeXName), new NamedContentModelEntity(postalCodeXName), new NamedContentModelEntity(AddressXName)));
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(streetAddressLineXName, typeof(string));
                    localElementDictionary.Add(stateCodeXName, typeof(urn.hl7.ru.address.stateCode));
                    localElementDictionary.Add(postalCodeXName, typeof(adxppostalCode));
                    localElementDictionary.Add(AddressXName, typeof(urn.hl7.ru.fias.Address));
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
            }
        }
    }
    
    public partial class ST_ST : XTypedElement, IXMetaData {
        
		public static explicit operator ST_ST(XElement xe) { return XTypedServices.ToXTypedElement<ST_ST>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ST_ST>(this);
        }
        
        public ST_ST() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ST_ST", "urn:hl7-org:v3");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class ON {
        
        private ON() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    public sealed class enfamily {
        
        private enfamily() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    public sealed class engiven {
        
        private engiven() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (family, given, Patronymic?)
    /// </para>
    /// </summary>
    public partial class EN : global::DocumentGenerator.Semd.Evacuation.Base.ANYNonNull, IXMetaData {
        
		public static explicit operator EN(XElement xe) { return XTypedServices.ToXTypedElement<EN>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EN>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (family, given, Patronymic?)
        /// </para>
        /// </summary>
        public EN() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName familyXName = System.Xml.Linq.XName.Get("family", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// фамилия
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (family, given, Patronymic?)
        /// </para>
        /// </summary>
        public virtual string family {
            get {
                XElement x = this.GetElement(familyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(familyXName, value, "family", global::DocumentGenerator.Semd.Evacuation.Base.enfamily.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName givenXName = System.Xml.Linq.XName.Get("given", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// имя
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (family, given, Patronymic?)
        /// </para>
        /// </summary>
        public virtual string given {
            get {
                XElement x = this.GetElement(givenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(givenXName, value, "given", global::DocumentGenerator.Semd.Evacuation.Base.engiven.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName PatronymicXName = System.Xml.Linq.XName.Get("Patronymic", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// отчество
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (family, given, Patronymic?)
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.Patronymic Patronymic {
            get {
                XElement x = this.GetElement(PatronymicXName);
                if ((x == null)) {
                    return null;
                }
                return ((urn.hl7.ru.identity.Patronymic)(x));
            }
            set {
                this.SetElement(PatronymicXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EN", "urn:hl7-org:v3");
        
        static EN() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(familyXName), new NamedContentModelEntity(givenXName), new NamedContentModelEntity(PatronymicXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(familyXName, typeof(string));
            localElementDictionary.Add(givenXName, typeof(string));
            localElementDictionary.Add(PatronymicXName, typeof(urn.hl7.ru.identity.Patronymic));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class adxppostalCode : global::DocumentGenerator.Semd.Evacuation.Base.ST, IXMetaData {
        
		public static explicit operator adxppostalCode(XElement xe) { return XTypedServices.ToXTypedElement<adxppostalCode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<adxppostalCode>(this);
        }
        
        public adxppostalCode() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("adxp.postalCode", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public sealed class adxpstreetAddressLine {
        
        private adxpstreetAddressLine() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
    /// </para>
    /// </summary>
    public partial class AD : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator AD(XElement xe) { return XTypedServices.ToXTypedElement<AD>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AD>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
        /// </para>
        /// </summary>
        public AD() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName streetAddressLineXName = System.Xml.Linq.XName.Get("streetAddressLine", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// адрес текстом
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
        /// </para>
        /// </summary>
        public virtual string streetAddressLine {
            get {
                XElement x = this.GetElement(streetAddressLineXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(streetAddressLineXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(streetAddressLineXName, value, "streetAddressLine", global::DocumentGenerator.Semd.Evacuation.Base.adxpstreetAddressLine.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName stateCodeXName = System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address");
        
        /// <summary>
        /// <para>
        /// код субъекта РФ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.address.stateCode stateCode {
            get {
                XElement x = this.GetElement(stateCodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((urn.hl7.ru.address.stateCode)(x));
            }
            set {
                this.SetElement(stateCodeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName postalCodeXName = System.Xml.Linq.XName.Get("postalCode", "urn:hl7-org:v3");
        
        /// <summary>
        /// <para>
        /// почтовый индекс
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
        /// </para>
        /// </summary>
        public virtual adxppostalCode postalCode {
            get {
                XElement x = this.GetElement(postalCodeXName);
                if ((x == null)) {
                    return null;
                }
                return ((adxppostalCode)(x));
            }
            set {
                this.SetElement(postalCodeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName AddressXName = System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias");
        
        /// <summary>
        /// <para>
        /// коды адреса по ФИАС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (streetAddressLine, stateCode, postalCode, Address)?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.fias.Address Address {
            get {
                XElement x = this.GetElement(AddressXName);
                if ((x == null)) {
                    return null;
                }
                return ((urn.hl7.ru.fias.Address)(x));
            }
            set {
                this.SetElement(AddressXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<object> use {
            get {
                XAttribute x = this.Attribute(useXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AD", "urn:hl7-org:v3");
        
        static AD() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(streetAddressLineXName), new NamedContentModelEntity(stateCodeXName), new NamedContentModelEntity(postalCodeXName), new NamedContentModelEntity(AddressXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(streetAddressLineXName, typeof(string));
            localElementDictionary.Add(stateCodeXName, typeof(urn.hl7.ru.address.stateCode));
            localElementDictionary.Add(postalCodeXName, typeof(adxppostalCode));
            localElementDictionary.Add(AddressXName, typeof(urn.hl7.ru.fias.Address));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class ST : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator ST(XElement xe) { return XTypedServices.ToXTypedElement<ST>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ST>(this);
        }
        
        public ST() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ST", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class CS : global::DocumentGenerator.Semd.Evacuation.Base.CV, IXMetaData {
        
		public static explicit operator CS(XElement xe) { return XTypedServices.ToXTypedElement<CS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CS>(this);
        }
        
        public CS() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CS", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class TEL : global::DocumentGenerator.Semd.Evacuation.Base.URL, IXMetaData {
        
		public static explicit operator TEL(XElement xe) { return XTypedServices.ToXTypedElement<TEL>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TEL>(this);
        }
        
        public TEL() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName useXName = System.Xml.Linq.XName.Get("use", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<object> use {
            get {
                XAttribute x = this.Attribute(useXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseListValue<object>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetListAttribute(useXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TEL", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class II : global::DocumentGenerator.Semd.Evacuation.Base.ANY, IXMetaData {
        
		public static explicit operator II(XElement xe) { return XTypedServices.ToXTypedElement<II>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<II>(this);
        }
        
        public II() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName rootXName = System.Xml.Linq.XName.Get("root", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object root {
            get {
                XAttribute x = this.Attribute(rootXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "root", this, rootXName, global::DocumentGenerator.Semd.Evacuation.Base.uid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName extensionXName = System.Xml.Linq.XName.Get("extension", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string extension {
            get {
                XAttribute x = this.Attribute(extensionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(extensionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName assigningAuthorityNameXName = System.Xml.Linq.XName.Get("assigningAuthorityName", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string assigningAuthorityName {
            get {
                XAttribute x = this.Attribute(assigningAuthorityNameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(assigningAuthorityNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName displayableXName = System.Xml.Linq.XName.Get("displayable", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? displayable {
            get {
                XAttribute x = this.Attribute(displayableXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(displayableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("II", "urn:hl7-org:v3");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
}
namespace urn.hl7.ru.fias {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using DocumentGenerator.Semd.Evacuation.Base;
    using urn.hl7.ru.address;
    using urn.hl7.ru.identity;
    using urn.hl7.ru.medService;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: ((AOGUID, HOUSEGUID))?
    /// </para>
    /// </summary>
    public partial class FiasAddress : XTypedElement, IXMetaData {
        
		public static explicit operator FiasAddress(XElement xe) { return XTypedServices.ToXTypedElement<FiasAddress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FiasAddress>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AOGUID, HOUSEGUID))?
        /// </para>
        /// </summary>
        public FiasAddress() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName AOGUIDXName = System.Xml.Linq.XName.Get("AOGUID", "urn:hl7-ru:fias");
        
        /// <summary>
        /// <para>
        /// глобальный уникальный идентификатор адресного объекта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AOGUID, HOUSEGUID))?
        /// </para>
        /// </summary>
        public virtual string AOGUID {
            get {
                XElement x = this.GetElement(AOGUIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(AOGUIDXName, value, "AOGUID", global::DocumentGenerator.Semd.Evacuation.Base.uuid.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName HOUSEGUIDXName = System.Xml.Linq.XName.Get("HOUSEGUID", "urn:hl7-ru:fias");
        
        /// <summary>
        /// <para>
        /// глобальный уникальный идентификатор дома
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AOGUID, HOUSEGUID))?
        /// </para>
        /// </summary>
        public virtual HOUSEGUIDLocalType HOUSEGUID {
            get {
                XElement x = this.GetElement(HOUSEGUIDXName);
                return ((HOUSEGUIDLocalType)(x));
            }
            set {
                this.SetElement(HOUSEGUIDXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FiasAddress", "urn:hl7-ru:fias");
        
        static FiasAddress() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(AOGUIDXName), new NamedContentModelEntity(HOUSEGUIDXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AOGUIDXName, typeof(string));
            localElementDictionary.Add(HOUSEGUIDXName, typeof(HOUSEGUIDLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class HOUSEGUIDLocalType : XTypedElement, IXMetaData {
            
		public static explicit operator HOUSEGUIDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HOUSEGUIDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HOUSEGUIDLocalType>(this);
            }
            
            public HOUSEGUIDLocalType() {
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValueWithValidation(value, "TypedValue", global::urn.hl7.ru.fias.uuid.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual object nullFlavor {
                get {
                    XAttribute x = this.Attribute(nullFlavorXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
                }
                set {
                    this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
                }
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HOUSEGUID", "urn:hl7-ru:fias");
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    public sealed class uuid {
        
        private uuid() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12})?"}, 0, XmlSchemaWhiteSpace.Preserve));
    }
    
    public partial class Address : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Address Load(string xmlFile) {
            return XTypedServices.Load<Address, FiasAddress>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Address Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Address, FiasAddress>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Address Parse(string xml) {
            return XTypedServices.Parse<Address, FiasAddress>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Address(XElement xe) { return XTypedServices.ToXTypedElement<Address, FiasAddress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Address(((FiasAddress)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FiasAddress ContentField;
        
        public Address() {
            SetInnerType(new FiasAddress());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FiasAddress Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(FiasAddress ContentField) {
            this.ContentField = ((FiasAddress)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Address(FiasAddress content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// глобальный уникальный идентификатор адресного объекта
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AOGUID, HOUSEGUID))?
        /// </para>
        /// </summary>
        public virtual string AOGUID {
            get {
                return this.ContentField.AOGUID;
            }
            set {
                this.ContentField.AOGUID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// глобальный уникальный идентификатор дома
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AOGUID, HOUSEGUID))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.fias.FiasAddress.HOUSEGUIDLocalType HOUSEGUID {
            get {
                return this.ContentField.HOUSEGUID;
            }
            set {
                this.ContentField.HOUSEGUID = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                return this.ContentField.nullFlavor;
            }
            set {
                this.ContentField.nullFlavor = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private LinqToXsdTypeManager() {
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("PIVL_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PIVL_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EIVL_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.EIVL_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PPD_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PPD_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PIVL_PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PIVL_PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EIVL_PPD_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.EIVL_PPD_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_PPD_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_PPD_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_PPD_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_PPD_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_PPD_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_PPD_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXPR_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXPR_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_CD", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_CD));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_MO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_MO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_INT", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_INT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_REAL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_REAL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_INT", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_INT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_INT", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_INT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_REAL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_REAL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_REAL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_REAL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_MO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_MO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_MO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_MO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HXIT_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.HXIT_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HXIT_CE", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.HXIT_CE));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BXIT_CD", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.BXIT_CD));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BXIT_IVL_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.BXIT_IVL_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SLIST_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SLIST_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SLIST_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SLIST_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GLIST_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.GLIST_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GLIST_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.GLIST_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RTO_PQ_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.RTO_PQ_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RTO_MO_PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.RTO_MO_PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UVP_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.UVP_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Text", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocText));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Title", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTitle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Br", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocBr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Caption", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocCaption));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Col", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocCol));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Colgroup", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocColgroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Content", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocContent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.TitleContent", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTitleContent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Footnote", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocFootnote));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.TitleFootnote", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTitleFootnote));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.FootnoteRef", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocFootnoteRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Item", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocItem));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.LinkHtml", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocLinkHtml));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.List", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Paragraph", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocParagraph));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.RenderMultiMedia", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocRenderMultiMedia));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Sub", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocSub));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Sup", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocSup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Table", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTable));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Tbody", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTbody));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Td", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTd));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Tfoot", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTfoot));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Th", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTh));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Thead", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocThead));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StrucDoc.Tr", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.StrucDocTr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.Component2", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Component2));
            typeDictionary.Add(System.Xml.Linq.XName.Get("structuredBody_224", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.structuredBody_224));
            typeDictionary.Add(System.Xml.Linq.XName.Get("component_225", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.component_225));
            typeDictionary.Add(System.Xml.Linq.XName.Get("section_226", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.section_226));
            typeDictionary.Add(System.Xml.Linq.XName.Get("code_227", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.code_227));
            typeDictionary.Add(System.Xml.Linq.XName.Get("entry_228", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.entry_228));
            typeDictionary.Add(System.Xml.Linq.XName.Get("act_229", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.act_229));
            typeDictionary.Add(System.Xml.Linq.XName.Get("code_230", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.code_230));
            typeDictionary.Add(System.Xml.Linq.XName.Get("performer_231", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.performer_231));
            typeDictionary.Add(System.Xml.Linq.XName.Get("assignedEntity_232", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.assignedEntity_232));
            typeDictionary.Add(System.Xml.Linq.XName.Get("id_233", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.id_233));
            typeDictionary.Add(System.Xml.Linq.XName.Get("representedOrganization_234", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.representedOrganization_234));
            typeDictionary.Add(System.Xml.Linq.XName.Get("id_235", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.id_235));
            typeDictionary.Add(System.Xml.Linq.XName.Get("telecom_237", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.telecom_237));
            typeDictionary.Add(System.Xml.Linq.XName.Get("entryRelationship_245", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.entryRelationship_245));
            typeDictionary.Add(System.Xml.Linq.XName.Get("observation_246", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.observation_246));
            typeDictionary.Add(System.Xml.Linq.XName.Get("code_247", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.code_247));
            typeDictionary.Add(System.Xml.Linq.XName.Get("translation_249", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.translation_249));
            typeDictionary.Add(System.Xml.Linq.XName.Get("observation_271", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.observation_271));
            typeDictionary.Add(System.Xml.Linq.XName.Get("code_272", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.code_272));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FiasAddress", "urn:hl7-ru:fias"), typeof(global::urn.hl7.ru.fias.FiasAddress));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ANY", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ANY));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.BL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ANYNonNull", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ANYNonNull));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BN", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.BN));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BIN", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.BIN));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ED", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ED));
            typeDictionary.Add(System.Xml.Linq.XName.Get("thumbnail", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.thumbnail));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CD", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CD));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CE", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CE));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CV", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CV));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CR", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CR));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SC", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SC));
            typeDictionary.Add(System.Xml.Linq.XName.Get("URL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.URL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ADXP", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ADXP));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ENXP", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ENXP));
            typeDictionary.Add(System.Xml.Linq.XName.Get("en.delimiter", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.endelimiter));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PN", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PN));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QTY", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.QTY));
            typeDictionary.Add(System.Xml.Linq.XName.Get("INT", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.INT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("REAL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.REAL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PQR", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PQR));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PQ", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.PQ));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.MO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RTO", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.RTO));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EIVL.event", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.EIVLevent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SXCM_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.SXCM_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVXB_TS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVXB_TS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RTO_QTY_QTY", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.RTO_QTY_QTY));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CE_non_elements", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.Person", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Person));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.Organization", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040Organization));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.code_profession", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040code_profession));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.time", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040time));
            typeDictionary.Add(System.Xml.Linq.XName.Get("II_id", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.II_id));
            typeDictionary.Add(System.Xml.Linq.XName.Get("II_id_patient", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.II_id_patient));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CD_addressStateCode", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode));
            typeDictionary.Add(System.Xml.Linq.XName.Get("II_id_org_non_NF", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.II_id_org_non_NF));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ST_non_NF", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ST_non_NF));
            typeDictionary.Add(System.Xml.Linq.XName.Get("II_id_org", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.II_id_org));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IVL_TS_1", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.IVL_TS_1));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.AssignedEntity", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.POCD_MT000040AssignedEntity));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ST_ST", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ST_ST));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EN", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.EN));
            typeDictionary.Add(System.Xml.Linq.XName.Get("adxp.postalCode", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.adxppostalCode));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AD", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.AD));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ST", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.ST));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CS", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TEL", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.TEL));
            typeDictionary.Add(System.Xml.Linq.XName.Get("II", "urn:hl7-org:v3"), typeof(global::DocumentGenerator.Semd.Evacuation.Base.II));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Type", "urn:hl7-ru:address"), typeof(global::urn.hl7.ru.address.TypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.IdentityDoc", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.POCD_MT000040IdentityDoc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.InsurancePolicy", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.POCD_MT000040InsurancePolicy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.Props", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.POCD_MT000040Props));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.AuthorityDoc", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.POCD_MT000040AuthorityDoc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("POCD_MT000040.DocInfo", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.POCD_MT000040DocInfo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Effective_time", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.Effective_time));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocType", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.DocTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("serviceForm", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceFormType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("serviceType", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("serviceCond", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceCondType));
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias"), typeof(global::urn.hl7.ru.fias.Address));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address"), typeof(global::urn.hl7.ru.address.stateCode));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Type", "urn:hl7-ru:address"), typeof(global::urn.hl7.ru.address.Type));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Patronymic", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.Patronymic));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Dept", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.Dept));
            elementDictionary.Add(System.Xml.Linq.XName.Get("IdentityDoc", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.IdentityDoc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InsurancePolicy", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.InsurancePolicy));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Props", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.Props));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AuthorityDoc", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.AuthorityDoc));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DocInfo", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.DocInfo));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Device", "urn:hl7-ru:identity"), typeof(global::urn.hl7.ru.identity.Device));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DocType", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.DocType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("serviceForm", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceForm));
            elementDictionary.Add(System.Xml.Linq.XName.Get("serviceType", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("serviceCond", "urn:hl7-ru:medService"), typeof(global::urn.hl7.ru.medService.serviceCond));
        }
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(urn.hl7.ru.fias.Address), typeof(global::urn.hl7.ru.fias.FiasAddress));
            wrapperDictionary.Add(typeof(urn.hl7.ru.address.stateCode), typeof(global::DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode));
            wrapperDictionary.Add(typeof(urn.hl7.ru.address.Type), typeof(global::urn.hl7.ru.address.TypeType));
            wrapperDictionary.Add(typeof(urn.hl7.ru.identity.IdentityDoc), typeof(global::urn.hl7.ru.identity.POCD_MT000040IdentityDoc));
            wrapperDictionary.Add(typeof(urn.hl7.ru.identity.InsurancePolicy), typeof(global::urn.hl7.ru.identity.POCD_MT000040InsurancePolicy));
            wrapperDictionary.Add(typeof(urn.hl7.ru.identity.Props), typeof(global::urn.hl7.ru.identity.POCD_MT000040Props));
            wrapperDictionary.Add(typeof(urn.hl7.ru.identity.AuthorityDoc), typeof(global::urn.hl7.ru.identity.POCD_MT000040AuthorityDoc));
            wrapperDictionary.Add(typeof(urn.hl7.ru.identity.DocInfo), typeof(global::urn.hl7.ru.identity.POCD_MT000040DocInfo));
            wrapperDictionary.Add(typeof(urn.hl7.ru.medService.DocType), typeof(global::urn.hl7.ru.medService.DocTypeType));
            wrapperDictionary.Add(typeof(urn.hl7.ru.medService.serviceForm), typeof(global::urn.hl7.ru.medService.serviceFormType));
            wrapperDictionary.Add(typeof(urn.hl7.ru.medService.serviceType), typeof(global::urn.hl7.ru.medService.serviceTypeType));
            wrapperDictionary.Add(typeof(urn.hl7.ru.medService.serviceCond), typeof(global::urn.hl7.ru.medService.serviceCondType));
        }
        
        private static XmlSchemaSet schemaSet;
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Address", "urn:hl7-ru:fias")];
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(Address root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Address Address {  get {return rootObject as Address; } }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRoot() {
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRoot(global::urn.hl7.ru.fias.Address root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.fias.Address Address {  get {return rootObject as global::urn.hl7.ru.fias.Address; } }
        
        public XRoot(global::urn.hl7.ru.address.stateCode root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.address.stateCode stateCode {  get {return rootObject as global::urn.hl7.ru.address.stateCode; } }
        
        public XRoot(global::urn.hl7.ru.address.Type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.address.Type Type {  get {return rootObject as global::urn.hl7.ru.address.Type; } }
        
        public XRoot(global::urn.hl7.ru.identity.Patronymic root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.Patronymic Patronymic {  get {return rootObject as global::urn.hl7.ru.identity.Patronymic; } }
        
        public XRoot(global::urn.hl7.ru.identity.Dept root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.Dept Dept {  get {return rootObject as global::urn.hl7.ru.identity.Dept; } }
        
        public XRoot(global::urn.hl7.ru.identity.IdentityDoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.IdentityDoc IdentityDoc {  get {return rootObject as global::urn.hl7.ru.identity.IdentityDoc; } }
        
        public XRoot(global::urn.hl7.ru.identity.InsurancePolicy root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.InsurancePolicy InsurancePolicy {  get {return rootObject as global::urn.hl7.ru.identity.InsurancePolicy; } }
        
        public XRoot(global::urn.hl7.ru.identity.Props root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.Props Props {  get {return rootObject as global::urn.hl7.ru.identity.Props; } }
        
        public XRoot(global::urn.hl7.ru.identity.AuthorityDoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.AuthorityDoc AuthorityDoc {  get {return rootObject as global::urn.hl7.ru.identity.AuthorityDoc; } }
        
        public XRoot(global::urn.hl7.ru.identity.DocInfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.DocInfo DocInfo {  get {return rootObject as global::urn.hl7.ru.identity.DocInfo; } }
        
        public XRoot(global::urn.hl7.ru.identity.Device root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.identity.Device Device {  get {return rootObject as global::urn.hl7.ru.identity.Device; } }
        
        public XRoot(global::urn.hl7.ru.medService.DocType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.medService.DocType DocType {  get {return rootObject as global::urn.hl7.ru.medService.DocType; } }
        
        public XRoot(global::urn.hl7.ru.medService.serviceForm root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.medService.serviceForm serviceForm {  get {return rootObject as global::urn.hl7.ru.medService.serviceForm; } }
        
        public XRoot(global::urn.hl7.ru.medService.serviceType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.medService.serviceType serviceType {  get {return rootObject as global::urn.hl7.ru.medService.serviceType; } }
        
        public XRoot(global::urn.hl7.ru.medService.serviceCond root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::urn.hl7.ru.medService.serviceCond serviceCond {  get {return rootObject as global::urn.hl7.ru.medService.serviceCond; } }
    }
}
namespace urn.hl7.ru.address {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using urn.hl7.ru.fias;
    
    
    public partial class TypeType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator TypeType(XElement xe) { return XTypedServices.ToXTypedElement<TypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TypeType>(this);
        }
        
        public TypeType() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Type", "urn:hl7-ru:address");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class stateCode : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static stateCode Load(string xmlFile) {
            return XTypedServices.Load<stateCode, DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stateCode Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<stateCode, DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stateCode Parse(string xml) {
            return XTypedServices.Parse<stateCode, DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator stateCode(XElement xe) { return XTypedServices.ToXTypedElement<stateCode, DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new stateCode(((DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode ContentField;
        
        public stateCode() {
            SetInnerType(new DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode ContentField) {
            this.ContentField = ((DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public stateCode(DocumentGenerator.Semd.Evacuation.Base.CD_addressStateCode content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stateCode", "urn:hl7-ru:address");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Type : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Type Load(string xmlFile) {
            return XTypedServices.Load<Type, TypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Type Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Type, TypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Type Parse(string xml) {
            return XTypedServices.Parse<Type, TypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Type(XElement xe) { return XTypedServices.ToXTypedElement<Type, TypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Type(((TypeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TypeType ContentField;
        
        public Type() {
            SetInnerType(new TypeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual TypeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(TypeType ContentField) {
            this.ContentField = ((TypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Type(TypeType content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Type", "urn:hl7-ru:address");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(stateCode root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public stateCode stateCode {  get {return rootObject as stateCode; } }
        
        public XRootNamespace(Type root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Type Type {  get {return rootObject as Type; } }
    }
}
namespace urn.hl7.ru.identity {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using urn.hl7.ru.fias;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
    /// </para>
    /// </summary>
    public partial class POCD_MT000040IdentityDoc : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040IdentityDoc(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040IdentityDoc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040IdentityDoc>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public POCD_MT000040IdentityDoc() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IdentityCardTypeXName = System.Xml.Linq.XName.Get("IdentityCardType", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// тип документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual IdentityCardTypeLocalType IdentityCardType {
            get {
                XElement x = this.GetElement(IdentityCardTypeXName);
                return ((IdentityCardTypeLocalType)(x));
            }
            set {
                this.SetElement(IdentityCardTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName SeriesXName = System.Xml.Linq.XName.Get("Series", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                XElement x = this.GetElement(SeriesXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(SeriesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                XElement x = this.GetElement(NumberXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST_non_NF)(x));
            }
            set {
                this.SetElement(NumberXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IssueOrgNameXName = System.Xml.Linq.XName.Get("IssueOrgName", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// кем выдан документ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgName {
            get {
                XElement x = this.GetElement(IssueOrgNameXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(IssueOrgNameXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IssueOrgCodeXName = System.Xml.Linq.XName.Get("IssueOrgCode", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// кем выдан документ, код подразделения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgCode {
            get {
                XElement x = this.GetElement(IssueOrgCodeXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(IssueOrgCodeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IssueDateXName = System.Xml.Linq.XName.Get("IssueDate", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// дата выдачи документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual IssueDateLocalType IssueDate {
            get {
                XElement x = this.GetElement(IssueDateXName);
                return ((IssueDateLocalType)(x));
            }
            set {
                this.SetElement(IssueDateXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.IdentityDoc", "urn:hl7-ru:identity");
        
        static POCD_MT000040IdentityDoc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(IdentityCardTypeXName), new NamedContentModelEntity(SeriesXName), new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(IssueOrgNameXName), new NamedContentModelEntity(IssueOrgCodeXName), new NamedContentModelEntity(IssueDateXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentityCardTypeXName, typeof(IdentityCardTypeLocalType));
            localElementDictionary.Add(SeriesXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(NumberXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST_non_NF));
            localElementDictionary.Add(IssueOrgNameXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(IssueOrgCodeXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(IssueDateXName, typeof(IssueDateLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class IdentityCardTypeLocalType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
            
		public static explicit operator IdentityCardTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IdentityCardTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<IdentityCardTypeLocalType>(this);
            }
            
            public IdentityCardTypeLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentityCardType", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        public partial class IssueDateLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
            
		public static explicit operator IssueDateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IssueDateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<IssueDateLocalType>(this);
            }
            
            public IssueDateLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IssueDate", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((InsurancePolicyType, Series?, Number))?
    /// </para>
    /// </summary>
    public partial class POCD_MT000040InsurancePolicy : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040InsurancePolicy(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040InsurancePolicy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040InsurancePolicy>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public POCD_MT000040InsurancePolicy() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName InsurancePolicyTypeXName = System.Xml.Linq.XName.Get("InsurancePolicyType", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// тип полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual InsurancePolicyTypeLocalType InsurancePolicyType {
            get {
                XElement x = this.GetElement(InsurancePolicyTypeXName);
                return ((InsurancePolicyTypeLocalType)(x));
            }
            set {
                this.SetElement(InsurancePolicyTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName SeriesXName = System.Xml.Linq.XName.Get("Series", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// серия полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual string Series {
            get {
                XElement x = this.GetElement(SeriesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SeriesXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SeriesXName, value, "Series", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// номер полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                XElement x = this.GetElement(NumberXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST_non_NF)(x));
            }
            set {
                this.SetElement(NumberXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.InsurancePolicy", "urn:hl7-ru:identity");
        
        static POCD_MT000040InsurancePolicy() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(InsurancePolicyTypeXName), new NamedContentModelEntity(SeriesXName), new NamedContentModelEntity(NumberXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InsurancePolicyTypeXName, typeof(InsurancePolicyTypeLocalType));
            localElementDictionary.Add(SeriesXName, typeof(string));
            localElementDictionary.Add(NumberXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST_non_NF));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class InsurancePolicyTypeLocalType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
            
		public static explicit operator InsurancePolicyTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InsurancePolicyTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InsurancePolicyTypeLocalType>(this);
            }
            
            public InsurancePolicyTypeLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InsurancePolicyType", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
    /// </para>
    /// </summary>
    public partial class POCD_MT000040Props : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040Props(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040Props>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040Props>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public POCD_MT000040Props() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName OgrnXName = System.Xml.Linq.XName.Get("Ogrn", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// код ОГРН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Ogrn {
            get {
                XElement x = this.GetElement(OgrnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OgrnXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OgrnXName, value, "Ogrn", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName OgrnipXName = System.Xml.Linq.XName.Get("Ogrnip", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// код ОГРНИП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Ogrnip {
            get {
                XElement x = this.GetElement(OgrnipXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OgrnipXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OgrnipXName, value, "Ogrnip", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName OkpoXName = System.Xml.Linq.XName.Get("Okpo", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// код ОКПО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Okpo {
            get {
                XElement x = this.GetElement(OkpoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OkpoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OkpoXName, value, "Okpo", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName OkatoXName = System.Xml.Linq.XName.Get("Okato", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// код ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Okato {
            get {
                XElement x = this.GetElement(OkatoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OkatoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OkatoXName, value, "Okato", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.Props", "urn:hl7-ru:identity");
        
        static POCD_MT000040Props() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(OgrnXName), new NamedContentModelEntity(OgrnipXName), new NamedContentModelEntity(OkpoXName), new NamedContentModelEntity(OkatoXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OgrnXName, typeof(string));
            localElementDictionary.Add(OgrnipXName, typeof(string));
            localElementDictionary.Add(OkpoXName, typeof(string));
            localElementDictionary.Add(OkatoXName, typeof(string));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
    /// </para>
    /// </summary>
    public partial class POCD_MT000040AuthorityDoc : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040AuthorityDoc(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040AuthorityDoc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040AuthorityDoc>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public POCD_MT000040AuthorityDoc() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IdentityCardTypeXName = System.Xml.Linq.XName.Get("IdentityCardType", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// тип документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual IdentityCardTypeLocalType IdentityCardType {
            get {
                XElement x = this.GetElement(IdentityCardTypeXName);
                return ((IdentityCardTypeLocalType)(x));
            }
            set {
                this.SetElement(IdentityCardTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName SeriesXName = System.Xml.Linq.XName.Get("Series", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                XElement x = this.GetElement(SeriesXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(SeriesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                XElement x = this.GetElement(NumberXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST_non_NF)(x));
            }
            set {
                this.SetElement(NumberXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IssueOrgNameXName = System.Xml.Linq.XName.Get("IssueOrgName", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// кем выдан документ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgName {
            get {
                XElement x = this.GetElement(IssueOrgNameXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(IssueOrgNameXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IssueDateXName = System.Xml.Linq.XName.Get("IssueDate", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// дата выдачи документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual IssueDateLocalType IssueDate {
            get {
                XElement x = this.GetElement(IssueDateXName);
                return ((IssueDateLocalType)(x));
            }
            set {
                this.SetElement(IssueDateXName, value);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.AuthorityDoc", "urn:hl7-ru:identity");
        
        static POCD_MT000040AuthorityDoc() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(IdentityCardTypeXName), new NamedContentModelEntity(SeriesXName), new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(IssueOrgNameXName), new NamedContentModelEntity(IssueDateXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentityCardTypeXName, typeof(IdentityCardTypeLocalType));
            localElementDictionary.Add(SeriesXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(NumberXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST_non_NF));
            localElementDictionary.Add(IssueOrgNameXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(IssueDateXName, typeof(IssueDateLocalType));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class IdentityCardTypeLocalType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
            
		public static explicit operator IdentityCardTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IdentityCardTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<IdentityCardTypeLocalType>(this);
            }
            
            public IdentityCardTypeLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentityCardType", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        public partial class IssueDateLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
            
		public static explicit operator IssueDateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IssueDateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<IssueDateLocalType>(this);
            }
            
            public IssueDateLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IssueDate", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
    /// </para>
    /// </summary>
    public partial class POCD_MT000040DocInfo : XTypedElement, IXMetaData {
        
		public static explicit operator POCD_MT000040DocInfo(XElement xe) { return XTypedServices.ToXTypedElement<POCD_MT000040DocInfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<POCD_MT000040DocInfo>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public POCD_MT000040DocInfo() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName IdentityDocTypeXName = System.Xml.Linq.XName.Get("IdentityDocType", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// тип документа основания
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual IdentityDocTypeLocalType IdentityDocType {
            get {
                XElement x = this.GetElement(IdentityDocTypeXName);
                return ((IdentityDocTypeLocalType)(x));
            }
            set {
                this.SetElement(IdentityDocTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName InsurancePolicyTypeXName = System.Xml.Linq.XName.Get("InsurancePolicyType", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// тип полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual InsurancePolicyTypeLocalType InsurancePolicyType {
            get {
                XElement x = this.GetElement(InsurancePolicyTypeXName);
                return ((InsurancePolicyTypeLocalType)(x));
            }
            set {
                this.SetElement(InsurancePolicyTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName SeriesXName = System.Xml.Linq.XName.Get("Series", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                XElement x = this.GetElement(SeriesXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(SeriesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Number {
            get {
                XElement x = this.GetElement(NumberXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(NumberXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName INNXName = System.Xml.Linq.XName.Get("INN", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// ИНН организации или физического лица
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST INN {
            get {
                XElement x = this.GetElement(INNXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.ST)(x));
            }
            set {
                this.SetElement(INNXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName effectiveTimeXName = System.Xml.Linq.XName.Get("effectiveTime", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// срок действия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual Effective_time effectiveTime {
            get {
                XElement x = this.GetElement(effectiveTimeXName);
                return ((Effective_time)(x));
            }
            set {
                this.SetElement(effectiveTimeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, void.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, void.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("POCD_MT000040.DocInfo", "urn:hl7-ru:identity");
        
        static POCD_MT000040DocInfo() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(IdentityDocTypeXName), new NamedContentModelEntity(InsurancePolicyTypeXName), new NamedContentModelEntity(SeriesXName), new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(INNXName), new NamedContentModelEntity(effectiveTimeXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IdentityDocTypeXName, typeof(IdentityDocTypeLocalType));
            localElementDictionary.Add(InsurancePolicyTypeXName, typeof(InsurancePolicyTypeLocalType));
            localElementDictionary.Add(SeriesXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(NumberXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(INNXName, typeof(DocumentGenerator.Semd.Evacuation.Base.ST));
            localElementDictionary.Add(effectiveTimeXName, typeof(Effective_time));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class IdentityDocTypeLocalType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
            
		public static explicit operator IdentityDocTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IdentityDocTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<IdentityDocTypeLocalType>(this);
            }
            
            public IdentityDocTypeLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentityDocType", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
        
        public partial class InsurancePolicyTypeLocalType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
            
		public static explicit operator InsurancePolicyTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InsurancePolicyTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InsurancePolicyTypeLocalType>(this);
            }
            
            public InsurancePolicyTypeLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InsurancePolicyType", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((low, high))?
    /// </para>
    /// </summary>
    public partial class Effective_time : XTypedElement, IXMetaData {
        
		public static explicit operator Effective_time(XElement xe) { return XTypedServices.ToXTypedElement<Effective_time>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Effective_time>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((low, high))?
        /// </para>
        /// </summary>
        public Effective_time() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName lowXName = System.Xml.Linq.XName.Get("low", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// дата начала действия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, high))?
        /// </para>
        /// </summary>
        public virtual lowLocalType low {
            get {
                XElement x = this.GetElement(lowXName);
                return ((lowLocalType)(x));
            }
            set {
                this.SetElement(lowXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName highXName = System.Xml.Linq.XName.Get("high", "urn:hl7-ru:identity");
        
        /// <summary>
        /// <para>
        /// дата окончания действия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((low, high))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.TS high {
            get {
                XElement x = this.GetElement(highXName);
                return ((DocumentGenerator.Semd.Evacuation.Base.TS)(x));
            }
            set {
                this.SetElement(highXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName nullFlavorXName = System.Xml.Linq.XName.Get("nullFlavor", "");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                XAttribute x = this.Attribute(nullFlavorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseUnionValue(x, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "nullFlavor", this, nullFlavorXName, global::DocumentGenerator.Semd.Evacuation.Base.NullFlavor.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Effective_time", "urn:hl7-ru:identity");
        
        static Effective_time() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(lowXName), new NamedContentModelEntity(highXName)));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(lowXName, typeof(lowLocalType));
            localElementDictionary.Add(highXName, typeof(DocumentGenerator.Semd.Evacuation.Base.TS));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public partial class lowLocalType : global::DocumentGenerator.Semd.Evacuation.Base.TS, IXMetaData {
            
		public static explicit operator lowLocalType(XElement xe) { return XTypedServices.ToXTypedElement<lowLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<lowLocalType>(this);
            }
            
            public lowLocalType() {
            }
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("low", "urn:hl7-ru:identity");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The character string data type stands for text data,
    ///            primarily intended for machine processing (e.g.,
    ///            sorting, querying, indexing, etc.) Used for names,
    ///            symbols, and formal expressions.
    ///			
    /// </para>
    /// </summary>
    public partial class Patronymic : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Patronymic Load(string xmlFile) {
            return XTypedServices.Load<Patronymic>(xmlFile);
        }
        
        public static Patronymic Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Patronymic>(xmlFile);
        }
        
        public static Patronymic Parse(string xml) {
            return XTypedServices.Parse<Patronymic>(xml);
        }
        
		public static explicit operator Patronymic(XElement xe) { return XTypedServices.ToXTypedElement<Patronymic>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Patronymic>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Patronymic() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Patronymic(string content) {
            this.TypedValue = content;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Patronymic", "urn:hl7-ru:identity");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The character string data type stands for text data,
    ///            primarily intended for machine processing (e.g.,
    ///            sorting, querying, indexing, etc.) Used for names,
    ///            symbols, and formal expressions.
    ///			
    /// </para>
    /// </summary>
    public partial class Dept : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Dept Load(string xmlFile) {
            return XTypedServices.Load<Dept>(xmlFile);
        }
        
        public static Dept Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Dept>(xmlFile);
        }
        
        public static Dept Parse(string xml) {
            return XTypedServices.Parse<Dept>(xml);
        }
        
		public static explicit operator Dept(XElement xe) { return XTypedServices.ToXTypedElement<Dept>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Dept>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Dept() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Dept(string content) {
            this.TypedValue = content;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dept", "urn:hl7-ru:identity");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class IdentityDoc : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static IdentityDoc Load(string xmlFile) {
            return XTypedServices.Load<IdentityDoc, POCD_MT000040IdentityDoc>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static IdentityDoc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<IdentityDoc, POCD_MT000040IdentityDoc>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static IdentityDoc Parse(string xml) {
            return XTypedServices.Parse<IdentityDoc, POCD_MT000040IdentityDoc>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator IdentityDoc(XElement xe) { return XTypedServices.ToXTypedElement<IdentityDoc, POCD_MT000040IdentityDoc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new IdentityDoc(((POCD_MT000040IdentityDoc)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private POCD_MT000040IdentityDoc ContentField;
        
        public IdentityDoc() {
            SetInnerType(new POCD_MT000040IdentityDoc());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual POCD_MT000040IdentityDoc Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(POCD_MT000040IdentityDoc ContentField) {
            this.ContentField = ((POCD_MT000040IdentityDoc)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public IdentityDoc(POCD_MT000040IdentityDoc content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// тип документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040IdentityDoc.IdentityCardTypeLocalType IdentityCardType {
            get {
                return this.ContentField.IdentityCardType;
            }
            set {
                this.ContentField.IdentityCardType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                return this.ContentField.Number;
            }
            set {
                this.ContentField.Number = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// кем выдан документ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgName {
            get {
                return this.ContentField.IssueOrgName;
            }
            set {
                this.ContentField.IssueOrgName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// кем выдан документ, код подразделения
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgCode {
            get {
                return this.ContentField.IssueOrgCode;
            }
            set {
                this.ContentField.IssueOrgCode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// дата выдачи документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueOrgCode, IssueDate))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040IdentityDoc.IssueDateLocalType IssueDate {
            get {
                return this.ContentField.IssueDate;
            }
            set {
                this.ContentField.IssueDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                return this.ContentField.nullFlavor;
            }
            set {
                this.ContentField.nullFlavor = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentityDoc", "urn:hl7-ru:identity");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class InsurancePolicy : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InsurancePolicy Load(string xmlFile) {
            return XTypedServices.Load<InsurancePolicy, POCD_MT000040InsurancePolicy>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InsurancePolicy Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InsurancePolicy, POCD_MT000040InsurancePolicy>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InsurancePolicy Parse(string xml) {
            return XTypedServices.Parse<InsurancePolicy, POCD_MT000040InsurancePolicy>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator InsurancePolicy(XElement xe) { return XTypedServices.ToXTypedElement<InsurancePolicy, POCD_MT000040InsurancePolicy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new InsurancePolicy(((POCD_MT000040InsurancePolicy)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private POCD_MT000040InsurancePolicy ContentField;
        
        public InsurancePolicy() {
            SetInnerType(new POCD_MT000040InsurancePolicy());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual POCD_MT000040InsurancePolicy Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(POCD_MT000040InsurancePolicy ContentField) {
            this.ContentField = ((POCD_MT000040InsurancePolicy)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public InsurancePolicy(POCD_MT000040InsurancePolicy content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// тип полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040InsurancePolicy.InsurancePolicyTypeLocalType InsurancePolicyType {
            get {
                return this.ContentField.InsurancePolicyType;
            }
            set {
                this.ContentField.InsurancePolicyType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// серия полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual string Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// номер полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InsurancePolicyType, Series?, Number))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                return this.ContentField.Number;
            }
            set {
                this.ContentField.Number = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                return this.ContentField.nullFlavor;
            }
            set {
                this.ContentField.nullFlavor = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InsurancePolicy", "urn:hl7-ru:identity");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class Props : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Props Load(string xmlFile) {
            return XTypedServices.Load<Props, POCD_MT000040Props>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Props Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Props, POCD_MT000040Props>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Props Parse(string xml) {
            return XTypedServices.Parse<Props, POCD_MT000040Props>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator Props(XElement xe) { return XTypedServices.ToXTypedElement<Props, POCD_MT000040Props>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new Props(((POCD_MT000040Props)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private POCD_MT000040Props ContentField;
        
        public Props() {
            SetInnerType(new POCD_MT000040Props());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual POCD_MT000040Props Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(POCD_MT000040Props ContentField) {
            this.ContentField = ((POCD_MT000040Props)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public Props(POCD_MT000040Props content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// код ОГРН
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Ogrn {
            get {
                return this.ContentField.Ogrn;
            }
            set {
                this.ContentField.Ogrn = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// код ОГРНИП
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Ogrnip {
            get {
                return this.ContentField.Ogrnip;
            }
            set {
                this.ContentField.Ogrnip = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// код ОКПО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Okpo {
            get {
                return this.ContentField.Okpo;
            }
            set {
                this.ContentField.Okpo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// код ОКАТО
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ogrn?, Ogrnip?, Okpo?, Okato?))?
        /// </para>
        /// </summary>
        public virtual string Okato {
            get {
                return this.ContentField.Okato;
            }
            set {
                this.ContentField.Okato = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                return this.ContentField.nullFlavor;
            }
            set {
                this.ContentField.nullFlavor = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Props", "urn:hl7-ru:identity");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class AuthorityDoc : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AuthorityDoc Load(string xmlFile) {
            return XTypedServices.Load<AuthorityDoc, POCD_MT000040AuthorityDoc>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AuthorityDoc Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AuthorityDoc, POCD_MT000040AuthorityDoc>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static AuthorityDoc Parse(string xml) {
            return XTypedServices.Parse<AuthorityDoc, POCD_MT000040AuthorityDoc>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator AuthorityDoc(XElement xe) { return XTypedServices.ToXTypedElement<AuthorityDoc, POCD_MT000040AuthorityDoc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new AuthorityDoc(((POCD_MT000040AuthorityDoc)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private POCD_MT000040AuthorityDoc ContentField;
        
        public AuthorityDoc() {
            SetInnerType(new POCD_MT000040AuthorityDoc());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual POCD_MT000040AuthorityDoc Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(POCD_MT000040AuthorityDoc ContentField) {
            this.ContentField = ((POCD_MT000040AuthorityDoc)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public AuthorityDoc(POCD_MT000040AuthorityDoc content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// тип документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040AuthorityDoc.IdentityCardTypeLocalType IdentityCardType {
            get {
                return this.ContentField.IdentityCardType;
            }
            set {
                this.ContentField.IdentityCardType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST_non_NF Number {
            get {
                return this.ContentField.Number;
            }
            set {
                this.ContentField.Number = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// кем выдан документ
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST IssueOrgName {
            get {
                return this.ContentField.IssueOrgName;
            }
            set {
                this.ContentField.IssueOrgName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// дата выдачи документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityCardType, Series, Number, IssueOrgName, IssueDate))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040AuthorityDoc.IssueDateLocalType IssueDate {
            get {
                return this.ContentField.IssueDate;
            }
            set {
                this.ContentField.IssueDate = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuthorityDoc", "urn:hl7-ru:identity");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class DocInfo : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DocInfo Load(string xmlFile) {
            return XTypedServices.Load<DocInfo, POCD_MT000040DocInfo>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocInfo Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DocInfo, POCD_MT000040DocInfo>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocInfo Parse(string xml) {
            return XTypedServices.Parse<DocInfo, POCD_MT000040DocInfo>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator DocInfo(XElement xe) { return XTypedServices.ToXTypedElement<DocInfo, POCD_MT000040DocInfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new DocInfo(((POCD_MT000040DocInfo)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private POCD_MT000040DocInfo ContentField;
        
        public DocInfo() {
            SetInnerType(new POCD_MT000040DocInfo());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual POCD_MT000040DocInfo Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(POCD_MT000040DocInfo ContentField) {
            this.ContentField = ((POCD_MT000040DocInfo)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public DocInfo(POCD_MT000040DocInfo content) {
            SetInnerType(content);
        }
        
        /// <summary>
        /// <para>
        /// тип документа основания
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040DocInfo.IdentityDocTypeLocalType IdentityDocType {
            get {
                return this.ContentField.IdentityDocType;
            }
            set {
                this.ContentField.IdentityDocType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// тип полиса ОМС
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual urn.hl7.ru.identity.POCD_MT000040DocInfo.InsurancePolicyTypeLocalType InsurancePolicyType {
            get {
                return this.ContentField.InsurancePolicyType;
            }
            set {
                this.ContentField.InsurancePolicyType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// серия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Series {
            get {
                return this.ContentField.Series;
            }
            set {
                this.ContentField.Series = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// номер документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST Number {
            get {
                return this.ContentField.Number;
            }
            set {
                this.ContentField.Number = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// ИНН организации или физического лица
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual DocumentGenerator.Semd.Evacuation.Base.ST INN {
            get {
                return this.ContentField.INN;
            }
            set {
                this.ContentField.INN = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// срок действия документа
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((IdentityDocType, InsurancePolicyType, Series, Number, INN, effectiveTime))?
        /// </para>
        /// </summary>
        public virtual Effective_time effectiveTime {
            get {
                return this.ContentField.effectiveTime;
            }
            set {
                this.ContentField.effectiveTime = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object nullFlavor {
            get {
                return this.ContentField.nullFlavor;
            }
            set {
                this.ContentField.nullFlavor = value;
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocInfo", "urn:hl7-ru:identity");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///            The character string data type stands for text data,
    ///            primarily intended for machine processing (e.g.,
    ///            sorting, querying, indexing, etc.) Used for names,
    ///            symbols, and formal expressions.
    ///			
    /// </para>
    /// </summary>
    public partial class Device : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Device Load(string xmlFile) {
            return XTypedServices.Load<Device>(xmlFile);
        }
        
        public static Device Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Device>(xmlFile);
        }
        
        public static Device Parse(string xml) {
            return XTypedServices.Parse<Device>(xml);
        }
        
		public static explicit operator Device(XElement xe) { return XTypedServices.ToXTypedElement<Device>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Device>(this);
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Device() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The character string data type stands for text data,
        ///            primarily intended for machine processing (e.g.,
        ///            sorting, querying, indexing, etc.) Used for names,
        ///            symbols, and formal expressions.
        ///			
        /// </para>
        /// </summary>
        public Device(string content) {
            this.TypedValue = content;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        protected internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::DocumentGenerator.Semd.Evacuation.Base.st.TypeDefinition);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Device", "urn:hl7-ru:identity");
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(Patronymic root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Patronymic Patronymic {  get {return rootObject as Patronymic; } }
        
        public XRootNamespace(Dept root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Dept Dept {  get {return rootObject as Dept; } }
        
        public XRootNamespace(IdentityDoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public IdentityDoc IdentityDoc {  get {return rootObject as IdentityDoc; } }
        
        public XRootNamespace(InsurancePolicy root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public InsurancePolicy InsurancePolicy {  get {return rootObject as InsurancePolicy; } }
        
        public XRootNamespace(Props root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Props Props {  get {return rootObject as Props; } }
        
        public XRootNamespace(AuthorityDoc root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public AuthorityDoc AuthorityDoc {  get {return rootObject as AuthorityDoc; } }
        
        public XRootNamespace(DocInfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public DocInfo DocInfo {  get {return rootObject as DocInfo; } }
        
        public XRootNamespace(Device root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Device Device {  get {return rootObject as Device; } }
    }
}
namespace urn.hl7.ru.medService {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using urn.hl7.ru.fias;
    
    
    public partial class DocTypeType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator DocTypeType(XElement xe) { return XTypedServices.ToXTypedElement<DocTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocTypeType>(this);
        }
        
        public DocTypeType() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocType", "urn:hl7-ru:medService");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceFormType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator serviceFormType(XElement xe) { return XTypedServices.ToXTypedElement<serviceFormType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<serviceFormType>(this);
        }
        
        public serviceFormType() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceForm", "urn:hl7-ru:medService");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceTypeType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator serviceTypeType(XElement xe) { return XTypedServices.ToXTypedElement<serviceTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<serviceTypeType>(this);
        }
        
        public serviceTypeType() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceType", "urn:hl7-ru:medService");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceCondType : global::DocumentGenerator.Semd.Evacuation.Base.CE_non_elements, IXMetaData {
        
		public static explicit operator serviceCondType(XElement xe) { return XTypedServices.ToXTypedElement<serviceCondType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<serviceCondType>(this);
        }
        
        public serviceCondType() {
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceCond", "urn:hl7-ru:medService");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class DocType : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DocType Load(string xmlFile) {
            return XTypedServices.Load<DocType, DocTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DocType, DocTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static DocType Parse(string xml) {
            return XTypedServices.Parse<DocType, DocTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator DocType(XElement xe) { return XTypedServices.ToXTypedElement<DocType, DocTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new DocType(((DocTypeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DocTypeType ContentField;
        
        public DocType() {
            SetInnerType(new DocTypeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual DocTypeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(DocTypeType ContentField) {
            this.ContentField = ((DocTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public DocType(DocTypeType content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocType", "urn:hl7-ru:medService");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceForm : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static serviceForm Load(string xmlFile) {
            return XTypedServices.Load<serviceForm, serviceFormType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceForm Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<serviceForm, serviceFormType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceForm Parse(string xml) {
            return XTypedServices.Parse<serviceForm, serviceFormType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator serviceForm(XElement xe) { return XTypedServices.ToXTypedElement<serviceForm, serviceFormType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new serviceForm(((serviceFormType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private serviceFormType ContentField;
        
        public serviceForm() {
            SetInnerType(new serviceFormType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual serviceFormType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(serviceFormType ContentField) {
            this.ContentField = ((serviceFormType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public serviceForm(serviceFormType content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceForm", "urn:hl7-ru:medService");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceType : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static serviceType Load(string xmlFile) {
            return XTypedServices.Load<serviceType, serviceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<serviceType, serviceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceType Parse(string xml) {
            return XTypedServices.Parse<serviceType, serviceTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator serviceType(XElement xe) { return XTypedServices.ToXTypedElement<serviceType, serviceTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new serviceType(((serviceTypeType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private serviceTypeType ContentField;
        
        public serviceType() {
            SetInnerType(new serviceTypeType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual serviceTypeType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(serviceTypeType ContentField) {
            this.ContentField = ((serviceTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public serviceType(serviceTypeType content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceType", "urn:hl7-ru:medService");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class serviceCond : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static serviceCond Load(string xmlFile) {
            return XTypedServices.Load<serviceCond, serviceCondType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceCond Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<serviceCond, serviceCondType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static serviceCond Parse(string xml) {
            return XTypedServices.Parse<serviceCond, serviceCondType>(xml, LinqToXsdTypeManager.Instance);
        }
        
		public static explicit operator serviceCond(XElement xe) { return XTypedServices.ToXTypedElement<serviceCond, serviceCondType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return new serviceCond(((serviceCondType)(this.Content.Clone())));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private serviceCondType ContentField;
        
        public serviceCond() {
            SetInnerType(new serviceCondType());
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual serviceCondType Content {
            get {
                return ContentField;
            }
        }
        
        private void SetInnerType(serviceCondType ContentField) {
            this.ContentField = ((serviceCondType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        public serviceCond(serviceCondType content) {
            SetInnerType(content);
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("serviceCond", "urn:hl7-ru:medService");
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(DocType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public DocType DocType {  get {return rootObject as DocType; } }
        
        public XRootNamespace(serviceForm root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public serviceForm serviceForm {  get {return rootObject as serviceForm; } }
        
        public XRootNamespace(serviceType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public serviceType serviceType {  get {return rootObject as serviceType; } }
        
        public XRootNamespace(serviceCond root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public serviceCond serviceCond {  get {return rootObject as serviceCond; } }
    }
}
